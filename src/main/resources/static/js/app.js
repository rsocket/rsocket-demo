/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n\n//# sourceURL=webpack://rsocket-demo/./node_modules/base64-js/index.js?");

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nconst base64 = __webpack_require__(/*! base64-js */ \"./node_modules/base64-js/index.js\")\nconst ieee754 = __webpack_require__(/*! ieee754 */ \"./node_modules/ieee754/index.js\")\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n\n\n//# sourceURL=webpack://rsocket-demo/./node_modules/buffer/index.js?");

/***/ }),

/***/ "./node_modules/fbjs/lib/emptyFunction.js":
/*!************************************************!*\
  !*** ./node_modules/fbjs/lib/emptyFunction.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nfunction makeEmptyFunction(arg) {\n  return function () {\n    return arg;\n  };\n}\n/**\n * This function accepts and discards inputs; it has no side effects. This is\n * primarily useful idiomatically for overridable function endpoints which\n * always need to be callable, since JS lacks a null-call idiom ala Cocoa.\n */\n\n\nvar emptyFunction = function emptyFunction() {};\n\nemptyFunction.thatReturns = makeEmptyFunction;\nemptyFunction.thatReturnsFalse = makeEmptyFunction(false);\nemptyFunction.thatReturnsTrue = makeEmptyFunction(true);\nemptyFunction.thatReturnsNull = makeEmptyFunction(null);\n\nemptyFunction.thatReturnsThis = function () {\n  return this;\n};\n\nemptyFunction.thatReturnsArgument = function (arg) {\n  return arg;\n};\n\nmodule.exports = emptyFunction;\n\n//# sourceURL=webpack://rsocket-demo/./node_modules/fbjs/lib/emptyFunction.js?");

/***/ }),

/***/ "./node_modules/fbjs/lib/forEachObject.js":
/*!************************************************!*\
  !*** ./node_modules/fbjs/lib/forEachObject.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";
eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n/**\n * Executes the provided `callback` once for each enumerable own property in the\n * object. The `callback` is invoked with three arguments:\n *\n *  - the property value\n *  - the property name\n *  - the object being traversed\n *\n * Properties that are added after the call to `forEachObject` will not be\n * visited by `callback`. If the values of existing properties are changed, the\n * value passed to `callback` will be the value at the time `forEachObject`\n * visits them. Properties that are deleted before being visited are not\n * visited.\n *\n * @param {?object} object\n * @param {function} callback\n * @param {*} context\n */\n\nfunction forEachObject(object, callback, context) {\n  for (var name in object) {\n    if (hasOwnProperty.call(object, name)) {\n      callback.call(context, object[name], name, object);\n    }\n  }\n}\n\nmodule.exports = forEachObject;\n\n//# sourceURL=webpack://rsocket-demo/./node_modules/fbjs/lib/forEachObject.js?");

/***/ }),

/***/ "./node_modules/fbjs/lib/invariant.js":
/*!********************************************!*\
  !*** ./node_modules/fbjs/lib/invariant.js ***!
  \********************************************/
/***/ ((module) => {

"use strict";
eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\nvar validateFormat =  true ? function (format) {\n  if (format === undefined) {\n    throw new Error('invariant(...): Second argument must be a string.');\n  }\n} : 0;\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments to provide\n * information about what broke and what you were expecting.\n *\n * The invariant message will be stripped in production, but the invariant will\n * remain to ensure logic does not differ in production.\n */\n\nfunction invariant(condition, format) {\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return String(args[argIndex++]);\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // Skip invariant's own stack frame.\n\n    throw error;\n  }\n}\n\nmodule.exports = invariant;\n\n//# sourceURL=webpack://rsocket-demo/./node_modules/fbjs/lib/invariant.js?");

/***/ }),

/***/ "./node_modules/fbjs/lib/nullthrows.js":
/*!*********************************************!*\
  !*** ./node_modules/fbjs/lib/nullthrows.js ***!
  \*********************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nvar nullthrows = function nullthrows(x) {\n  if (x != null) {\n    return x;\n  }\n\n  throw new Error(\"Got unexpected null or undefined\");\n};\n\nmodule.exports = nullthrows;\n\n//# sourceURL=webpack://rsocket-demo/./node_modules/fbjs/lib/nullthrows.js?");

/***/ }),

/***/ "./node_modules/fbjs/lib/sprintf.js":
/*!******************************************!*\
  !*** ./node_modules/fbjs/lib/sprintf.js ***!
  \******************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\n/**\n * Simple function for formatting strings.\n *\n * Replaces placeholders with values passed as extra arguments\n *\n * @param {string} format the base string\n * @param ...args the values to insert\n * @return {string} the replaced string\n */\nfunction sprintf(format) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  var index = 0;\n  return format.replace(/%s/g, function (match) {\n    return args[index++];\n  });\n}\n\nmodule.exports = sprintf;\n\n//# sourceURL=webpack://rsocket-demo/./node_modules/fbjs/lib/sprintf.js?");

/***/ }),

/***/ "./node_modules/fbjs/lib/warning.js":
/*!******************************************!*\
  !*** ./node_modules/fbjs/lib/warning.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\nvar emptyFunction = __webpack_require__(/*! ./emptyFunction */ \"./node_modules/fbjs/lib/emptyFunction.js\");\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\n\nfunction printWarning(format) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  var argIndex = 0;\n  var message = 'Warning: ' + format.replace(/%s/g, function () {\n    return args[argIndex++];\n  });\n\n  if (typeof console !== 'undefined') {\n    console.error(message);\n  }\n\n  try {\n    // --- Welcome to debugging React ---\n    // This error was thrown as a convenience so that you can use this stack\n    // to find the callsite that caused this warning to fire.\n    throw new Error(message);\n  } catch (x) {}\n}\n\nvar warning =  true ? function (condition, format) {\n  if (format === undefined) {\n    throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');\n  }\n\n  if (!condition) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      args[_key2 - 2] = arguments[_key2];\n    }\n\n    printWarning.apply(void 0, [format].concat(args));\n  }\n} : 0;\nmodule.exports = warning;\n\n//# sourceURL=webpack://rsocket-demo/./node_modules/fbjs/lib/warning.js?");

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n//# sourceURL=webpack://rsocket-demo/./node_modules/ieee754/index.js?");

/***/ }),

/***/ "./node_modules/rsocket-core/build/AuthMetadata.js":
/*!*********************************************************!*\
  !*** ./node_modules/rsocket-core/build/AuthMetadata.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({value: true}));\nexports.encodeWellKnownAuthMetadata = encodeWellKnownAuthMetadata;\nexports.encodeCustomAuthMetadata = encodeCustomAuthMetadata;\nexports.encodeSimpleAuthMetadata = encodeSimpleAuthMetadata;\nexports.encodeBearerAuthMetadata = encodeBearerAuthMetadata;\nexports.decodeAuthMetadata = decodeAuthMetadata;\nexports.decodeSimpleAuthPayload = decodeSimpleAuthPayload;\n\nvar _LiteBuffer = __webpack_require__(/*! ./LiteBuffer */ \"./node_modules/rsocket-core/build/LiteBuffer.js\");\nvar _RSocketBufferUtils = __webpack_require__(/*! ./RSocketBufferUtils */ \"./node_modules/rsocket-core/build/RSocketBufferUtils.js\");\nvar _WellKnownAuthType = _interopRequireWildcard(\n  __webpack_require__(/*! ./WellKnownAuthType */ \"./node_modules/rsocket-core/build/WellKnownAuthType.js\")\n);\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== 'function') return null;\n  var cache = new WeakMap();\n  _getRequireWildcardCache = function () {\n    return cache;\n  };\n  return cache;\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {\n    return {default: obj};\n  }\n  var cache = _getRequireWildcardCache();\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor =\n    Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor\n        ? Object.getOwnPropertyDescriptor(obj, key)\n        : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\n\nconst authTypeIdBytesLength = 1;\nconst customAuthTypeBytesLength = 1;\nconst usernameLengthBytesLength = 2;\n\nconst streamMetadataKnownMask = 0x80; // 1000 0000\nconst streamMetadataLengthMask = 0x7f; // 0111 1111\n\n/**\n * Encode Auth metadata with the given {@link WellKnownAuthType} and auth payload {@link Buffer}\n *\n * @param authType well known auth type\n * @param authPayloadBuffer auth payload buffer\n * @returns encoded {@link WellKnownAuthType} and payload {@link Buffer}\n */\nfunction encodeWellKnownAuthMetadata(authType, authPayloadBuffer) {\n  if (\n    authType === _WellKnownAuthType.UNPARSEABLE_AUTH_TYPE ||\n    authType === _WellKnownAuthType.UNKNOWN_RESERVED_AUTH_TYPE\n  ) {\n    throw new Error(\n      `Illegal WellKnownAuthType[${authType.toString()}]. Only allowed AuthType should be used`\n    );\n  }\n\n  const buffer = (0, _RSocketBufferUtils.createBuffer)(authTypeIdBytesLength);\n\n  // eslint-disable-next-line no-bitwise\n  buffer.writeUInt8(authType.identifier | streamMetadataKnownMask);\n\n  return _LiteBuffer.LiteBuffer.concat([buffer, authPayloadBuffer]);\n}\n\n/**\n * Encode Auth metadata with the given custom auth type {@link string} and auth payload {@link Buffer}\n *\n * @param customAuthType custom auth type\n * @param authPayloadBuffer auth payload buffer\n * @returns encoded {@link WellKnownAuthType} and payload {@link Buffer}\n */\nfunction encodeCustomAuthMetadata(customAuthType, authPayloadBuffer) {\n  const customAuthTypeBuffer = (0, _RSocketBufferUtils.toBuffer)(\n    customAuthType\n  );\n\n  if (customAuthTypeBuffer.byteLength !== customAuthType.length) {\n    throw new Error('Custom auth type must be US_ASCII characters only');\n  }\n  if (\n    customAuthTypeBuffer.byteLength < 1 ||\n    customAuthTypeBuffer.byteLength > 128\n  ) {\n    throw new Error(\n      'Custom auth type must have a strictly positive length that fits on 7 unsigned bits, ie 1-128'\n    );\n  }\n\n  const buffer = (0, _RSocketBufferUtils.createBuffer)(\n    customAuthTypeBytesLength + customAuthTypeBuffer.byteLength\n  );\n\n  // encoded length is one less than actual length, since 0 is never a valid length, which gives\n  // wider representation range\n  buffer.writeUInt8(customAuthTypeBuffer.byteLength - 1);\n  buffer.write(customAuthType, customAuthTypeBytesLength);\n\n  return _LiteBuffer.LiteBuffer.concat([buffer, authPayloadBuffer]);\n}\n\n/**\n * Encode Simple Auth metadata with the given username and password\n *\n * @param username username\n * @param password password\n * @returns encoded {@link SIMPLE} and given username and password as auth payload {@link Buffer}\n */\nfunction encodeSimpleAuthMetadata(username, password) {\n  const usernameBuffer = (0, _RSocketBufferUtils.toBuffer)(username);\n  const passwordBuffer = (0, _RSocketBufferUtils.toBuffer)(password);\n  const usernameLength = usernameBuffer.byteLength;\n\n  if (usernameLength > 65535) {\n    throw new Error(\n      `Username should be shorter than or equal to 65535 bytes length in UTF-8 encoding but the given was ${usernameLength}`\n    );\n  }\n\n  const capacity = authTypeIdBytesLength + usernameLengthBytesLength;\n  const buffer = (0, _RSocketBufferUtils.createBuffer)(capacity);\n\n  // eslint-disable-next-line no-bitwise\n  buffer.writeUInt8(\n    _WellKnownAuthType.SIMPLE.identifier | streamMetadataKnownMask\n  );\n  buffer.writeUInt16BE(usernameLength, 1);\n\n  return _LiteBuffer.LiteBuffer.concat([\n    buffer,\n    usernameBuffer,\n    passwordBuffer,\n  ]);\n}\n\n/**\n * Encode Bearer Auth metadata with the given token\n *\n * @param token token\n * @returns encoded {@link BEARER} and given token as auth payload {@link Buffer}\n */\nfunction encodeBearerAuthMetadata(token) {\n  const tokenBuffer = (0, _RSocketBufferUtils.toBuffer)(token);\n  const buffer = (0, _RSocketBufferUtils.createBuffer)(authTypeIdBytesLength);\n\n  // eslint-disable-next-line no-bitwise\n  buffer.writeUInt8(\n    _WellKnownAuthType.BEARER.identifier | streamMetadataKnownMask\n  );\n\n  return _LiteBuffer.LiteBuffer.concat([buffer, tokenBuffer]);\n}\n\n/**\n * Decode auth metadata {@link Buffer} into {@link AuthMetadata} object\n *\n * @param metadata auth metadata {@link Buffer}\n * @returns decoded {@link AuthMetadata}\n */\nfunction decodeAuthMetadata(metadata) {\n  if (metadata.byteLength < 1) {\n    throw new Error(\n      'Unable to decode Auth metadata. Not enough readable bytes'\n    );\n  }\n\n  const lengthOrId = metadata.readUInt8();\n  // eslint-disable-next-line no-bitwise\n  const normalizedId = lengthOrId & streamMetadataLengthMask;\n\n  if (normalizedId !== lengthOrId) {\n    const authType = _WellKnownAuthType.default.fromIdentifier(normalizedId);\n\n    return {\n      payload: metadata.slice(1),\n      type: {\n        identifier: authType.identifier,\n        string: authType.string,\n      },\n    };\n  } else {\n    // encoded length is realLength - 1 in order to avoid intersection with 0x00 authtype\n    const realLength = lengthOrId + 1;\n    if (metadata.byteLength < realLength + customAuthTypeBytesLength) {\n      throw new Error(\n        'Unable to decode custom Auth type. Malformed length or auth type string'\n      );\n    }\n\n    const customAuthTypeString = metadata.toString(\n      'utf8',\n      customAuthTypeBytesLength,\n      customAuthTypeBytesLength + realLength\n    );\n\n    const payload = metadata.slice(realLength + customAuthTypeBytesLength);\n\n    return {\n      payload,\n      type: {\n        identifier: _WellKnownAuthType.UNPARSEABLE_AUTH_TYPE.identifier,\n        string: customAuthTypeString,\n      },\n    };\n  }\n}\n\n/**\n * Read up to 129 bytes from the given metadata in order to get the custom Auth Type\n *\n * @param authPayload\n * @return sliced username and password buffers\n */\nfunction decodeSimpleAuthPayload(authPayload) {\n  if (authPayload.byteLength < usernameLengthBytesLength) {\n    throw new Error(\n      'Unable to decode Simple Auth Payload. Not enough readable bytes'\n    );\n  }\n\n  const usernameLength = authPayload.readUInt16BE();\n\n  if (authPayload.byteLength < usernameLength + usernameLengthBytesLength) {\n    throw new Error(\n      'Unable to decode Simple Auth Payload. Not enough readable bytes'\n    );\n  }\n\n  const username = authPayload.slice(\n    usernameLengthBytesLength,\n    usernameLengthBytesLength + usernameLength\n  );\n\n  const password = authPayload.slice(\n    usernameLengthBytesLength + usernameLength\n  );\n\n  return {password, username};\n}\n\n\n//# sourceURL=webpack://rsocket-demo/./node_modules/rsocket-core/build/AuthMetadata.js?");

/***/ }),

/***/ "./node_modules/rsocket-core/build/CompositeMetadata.js":
/*!**************************************************************!*\
  !*** ./node_modules/rsocket-core/build/CompositeMetadata.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({value: true}));\nexports.encodeCompositeMetadata = encodeCompositeMetadata;\nexports.encodeAndAddCustomMetadata = encodeAndAddCustomMetadata;\nexports.encodeAndAddWellKnownMetadata = encodeAndAddWellKnownMetadata;\nexports.decodeMimeAndContentBuffersSlices = decodeMimeAndContentBuffersSlices;\nexports.decodeMimeTypeFromMimeBuffer = decodeMimeTypeFromMimeBuffer;\nexports.encodeCustomMetadataHeader = encodeCustomMetadataHeader;\nexports.encodeWellKnownMetadataHeader = encodeWellKnownMetadataHeader;\nexports.decodeCompositeMetadata = decodeCompositeMetadata;\nexports.WellKnownMimeTypeEntry = exports.ReservedMimeTypeEntry = exports.ExplicitMimeTimeEntry = exports.CompositeMetadata = void 0;\n\nvar _LiteBuffer = __webpack_require__(/*! ./LiteBuffer */ \"./node_modules/rsocket-core/build/LiteBuffer.js\");\nvar _RSocketBufferUtils = __webpack_require__(/*! ./RSocketBufferUtils */ \"./node_modules/rsocket-core/build/RSocketBufferUtils.js\");\n\nvar _WellKnownMimeType = _interopRequireWildcard(\n  __webpack_require__(/*! ./WellKnownMimeType */ \"./node_modules/rsocket-core/build/WellKnownMimeType.js\")\n);\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== 'function') return null;\n  var cache = new WeakMap();\n  _getRequireWildcardCache = function () {\n    return cache;\n  };\n  return cache;\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {\n    return {default: obj};\n  }\n  var cache = _getRequireWildcardCache();\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor =\n    Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor\n        ? Object.getOwnPropertyDescriptor(obj, key)\n        : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\n\n// $FlowFixMe\nclass CompositeMetadata {\n  constructor(buffer) {\n    this._buffer = buffer;\n  }\n\n  iterator() {\n    return decodeCompositeMetadata(this._buffer);\n  }\n\n  // $FlowFixMe\n  [Symbol.iterator]() {\n    return decodeCompositeMetadata(this._buffer);\n  }\n}\n\n/**\n * Encode an object where key is either {@link WellKnownMimeType} or {@link string}\n * and value as a {@link Buffer} into composite metadata {@link Buffer}\n *\n * @param metadata key-value based object\n * @returns {Buffer}\n */ exports.CompositeMetadata = CompositeMetadata;\nfunction encodeCompositeMetadata(metadata) {\n  let encodedCompositeMetadata = (0, _RSocketBufferUtils.createBuffer)(0);\n  for (const [metadataKey, metadataValue] of metadata) {\n    const metadataRealValue =\n      typeof metadataValue === 'function' ? metadataValue() : metadataValue;\n\n    if (\n      metadataKey instanceof _WellKnownMimeType.default ||\n      typeof metadataKey === 'number' ||\n      metadataKey.constructor.name === 'WellKnownMimeType'\n    ) {\n      encodedCompositeMetadata = encodeAndAddWellKnownMetadata(\n        encodedCompositeMetadata,\n        metadataKey,\n        metadataRealValue\n      );\n    } else {\n      encodedCompositeMetadata = encodeAndAddCustomMetadata(\n        encodedCompositeMetadata,\n        metadataKey,\n        metadataRealValue\n      );\n    }\n  }\n\n  return encodedCompositeMetadata;\n}\n\n/**\n * Encode a new sub-metadata information into a composite metadata {@link CompositeByteBuf\n * buffer}, without checking if the {@link String} can be matched with a well known compressable\n * mime type. Prefer using this method and {@link #encodeAndAddMetadata(CompositeByteBuf,\n * ByteBufAllocator, WellKnownMimeType, ByteBuf)} if you know in advance whether or not the mime\n * is well known. Otherwise use {@link #encodeAndAddMetadataWithCompression(CompositeByteBuf,\n * ByteBufAllocator, String, ByteBuf)}\n *\n * @param compositeMetaData the buffer that will hold all composite metadata information.\n * @param allocator the {@link ByteBufAllocator} to use to create intermediate buffers as needed.\n * @param customMimeType the custom mime type to encode.\n * @param metadata the metadata value to encode.\n */\n// see #encodeMetadataHeader(ByteBufAllocator, String, int)\nfunction encodeAndAddCustomMetadata(\n  compositeMetaData,\n  customMimeType,\n  metadata\n) {\n  return _LiteBuffer.LiteBuffer.concat([\n    compositeMetaData,\n    encodeCustomMetadataHeader(customMimeType, metadata.byteLength),\n    metadata,\n  ]);\n}\n\n/**\n * Encode a new sub-metadata information into a composite metadata {@link CompositeByteBuf\n * buffer}.\n *\n * @param compositeMetadata the buffer that will hold all composite metadata information.\n * @param allocator the {@link ByteBufAllocator} to use to create intermediate buffers as needed.\n * @param knownMimeType the {@link WellKnownMimeType} to encode.\n * @param metadata the metadata value to encode.\n */\n// see #encodeMetadataHeader(ByteBufAllocator, byte, int)\nfunction encodeAndAddWellKnownMetadata(\n  compositeMetadata,\n  knownMimeType,\n  metadata\n) {\n  let mimeTypeId;\n\n  if (Number.isInteger(knownMimeType)) {\n    mimeTypeId = knownMimeType;\n  } else {\n    mimeTypeId = knownMimeType.identifier;\n  }\n\n  return _LiteBuffer.LiteBuffer.concat([\n    compositeMetadata,\n    encodeWellKnownMetadataHeader(mimeTypeId, metadata.byteLength),\n    metadata,\n  ]);\n}\n\n/**\n * Decode the next metadata entry (a mime header + content pair of {@link ByteBuf}) from   a {@link\n * ByteBuf} that contains at least enough bytes for one more such entry. These buffers are\n * actually slices of the full metadata buffer, and this method doesn't move the full metadata\n * buffer's {@link ByteBuf#readerIndex()}. As such, it requires the user to provide an {@code\n * index} to read from. The next index is computed by calling {@link #computeNextEntryIndex(int,\n * ByteBuf, ByteBuf)}. Size of the first buffer (the \"header buffer\") drives which decoding method\n * should be further applied to it.\n *\n * <p>The header buffer is either:\n *\n * <ul>\n *   <li>made up of a single byte: this represents an encoded mime id, which can be further\n *       decoded using {@link #decodeMimeIdFromMimeBuffer(ByteBuf)}\n *   <li>made up of 2 or more bytes: this represents an encoded mime String + its length, which\n *       can be further decoded using {@link #decodeMimeTypeFromMimeBuffer(ByteBuf)}. Note the\n *       encoded length, in the first byte, is skipped by this decoding method because the\n *       remaining length of the buffer is that of the mime string.\n * </ul>\n *\n * @param compositeMetadata the source {@link ByteBuf} that originally contains one or more\n *     metadata entries\n * @param entryIndex the {@link ByteBuf#readerIndex()} to start decoding from. original reader\n *     index is kept on the source buffer\n * @param retainSlices should produced metadata entry buffers {@link ByteBuf#slice() slices} be\n *     {@link ByteBuf#retainedSlice() retained}?\n * @return a {@link ByteBuf} array of length 2 containing the mime header buffer\n *     <strong>slice</strong> and the content buffer <strong>slice</strong>, or one of the\n *     zero-length error constant arrays\n */\nfunction decodeMimeAndContentBuffersSlices(compositeMetadata, entryIndex) {\n  const mimeIdOrLength = compositeMetadata.readInt8(entryIndex);\n  let mime;\n  let toSkip = entryIndex;\n  if (\n    (mimeIdOrLength & STREAM_METADATA_KNOWN_MASK) ===\n    STREAM_METADATA_KNOWN_MASK\n  ) {\n    mime = compositeMetadata.slice(toSkip, toSkip + 1);\n    toSkip += 1;\n  } else {\n    // M flag unset, remaining 7 bits are the length of the mime\n    const mimeLength = (mimeIdOrLength & 0xff) + 1;\n\n    if (compositeMetadata.byteLength > toSkip + mimeLength) {\n      // need to be able to read an extra mimeLength bytes (we have already read one so byteLength should be strictly more)\n      // here we need a way for the returned ByteBuf to differentiate between a\n      // 1-byte length mime type and a 1 byte encoded mime id, preferably without\n      // re-applying the byte mask. The easiest way is to include the initial byte\n      // and have further decoding ignore the first byte. 1 byte buffer == id, 2+ byte\n      // buffer == full mime string.\n      mime = compositeMetadata.slice(toSkip, toSkip + mimeLength + 1);\n\n      // we thus need to skip the bytes we just sliced, but not the flag/length byte\n      // which was already skipped in initial read\n      toSkip += mimeLength + 1;\n    } else {\n      throw new Error(\n        'Metadata is malformed. Inappropriately formed Mime Length'\n      );\n    }\n  }\n\n  if (compositeMetadata.byteLength >= toSkip + 3) {\n    // ensures the length medium can be read\n    const metadataLength = (0, _RSocketBufferUtils.readUInt24BE)(\n      compositeMetadata,\n      toSkip\n    );\n    toSkip += 3;\n    if (compositeMetadata.byteLength >= metadataLength + toSkip) {\n      const metadata = compositeMetadata.slice(toSkip, toSkip + metadataLength);\n      return [mime, metadata];\n    } else {\n      throw new Error(\n        'Metadata is malformed. Inappropriately formed Metadata Length or malformed content'\n      );\n    }\n  } else {\n    throw new Error(\n      'Metadata is malformed. Metadata Length is absent or malformed'\n    );\n  }\n}\n\n/**\n * Decode a {@link CharSequence} custome mime type from a {@link ByteBuf}, assuming said buffer\n * properly contains such a mime type.\n *\n * <p>The buffer must at least have two readable bytes, which distinguishes it from the {@link\n * #decodeMimeIdFromMimeBuffer(ByteBuf) compressed id} case. The first byte is a size and the\n * remaining bytes must correspond to the {@link CharSequence}, encoded fully in US_ASCII. As a\n * result, the first byte can simply be skipped, and the remaining of the buffer be decoded to the\n * mime type.\n *\n * <p>If the mime header buffer is less than 2 bytes long, returns {@code null}.\n *\n * @param flyweightMimeBuffer the mime header {@link ByteBuf} that contains length + custom mime\n *     type\n * @return the decoded custom mime type, as a {@link CharSequence}, or null if the input is\n *     invalid\n * @see #decodeMimeIdFromMimeBuffer(ByteBuf)\n */\nfunction decodeMimeTypeFromMimeBuffer(flyweightMimeBuffer) {\n  if (flyweightMimeBuffer.length < 2) {\n    throw new Error('Unable to decode explicit MIME type');\n  }\n  // the encoded length is assumed to be kept at the start of the buffer\n  // but also assumed to be irrelevant because the rest of the slice length\n  // actually already matches _decoded_length\n  return flyweightMimeBuffer.toString('ascii', 1);\n}\n\nfunction encodeCustomMetadataHeader(customMime, metadataLength) {\n  const metadataHeader = (0, _RSocketBufferUtils.createBuffer)(\n    4 + customMime.length\n  );\n  // reserve 1 byte for the customMime length\n  // /!\\ careful not to read that first byte, which is random at this point\n  // int writerIndexInitial = metadataHeader.writerIndex();\n  // metadataHeader.writerIndex(writerIndexInitial + 1);\n\n  // write the custom mime in UTF8 but validate it is all ASCII-compatible\n  // (which produces the right result since ASCII chars are still encoded on 1 byte in UTF8)\n  const customMimeLength = metadataHeader.write(customMime, 1);\n  if (!isAscii(metadataHeader, 1)) {\n    throw new Error('Custom mime type must be US_ASCII characters only');\n  }\n  if (customMimeLength < 1 || customMimeLength > 128) {\n    throw new Error(\n      'Custom mime type must have a strictly positive length that fits on 7 unsigned bits, ie 1-128'\n    );\n  }\n  // encoded length is one less than actual length, since 0 is never a valid length, which gives\n  // wider representation range\n  metadataHeader.writeUInt8(customMimeLength - 1);\n\n  (0, _RSocketBufferUtils.writeUInt24BE)(\n    metadataHeader,\n    metadataLength,\n    customMimeLength + 1\n  );\n\n  return metadataHeader;\n}\n\n/**\n * Encode a {@link WellKnownMimeType well known mime type} and a metadata value length into a\n * newly allocated {@link ByteBuf}.\n *\n * <p>This compact representation encodes the mime type via its ID on a single byte, and the\n * unsigned value length on 3 additional bytes.\n *\n * @param allocator the {@link ByteBufAllocator} to use to create the buffer.\n * @param mimeType a byte identifier of a {@link WellKnownMimeType} to encode.\n * @param metadataLength the metadata length to append to the buffer as an unsigned 24 bits\n *     integer.\n * @return the encoded mime and metadata length information\n */\nfunction encodeWellKnownMetadataHeader(mimeType, metadataLength) {\n  const buffer = _LiteBuffer.LiteBuffer.alloc(4);\n\n  buffer.writeUInt8(mimeType | STREAM_METADATA_KNOWN_MASK);\n  (0, _RSocketBufferUtils.writeUInt24BE)(buffer, metadataLength, 1);\n\n  return buffer;\n}\n\n/**\n * Decode given {@link Buffer} into {@link Iterator<Entry>}\n *\n * @param buffer encoded Composite Metadata content\n * @returns {Iterator<Entry>}\n * @since 0.0.21\n */\nfunction* decodeCompositeMetadata(buffer) {\n  const length = buffer.byteLength;\n  let entryIndex = 0;\n\n  while (entryIndex < length) {\n    const headerAndData = decodeMimeAndContentBuffersSlices(buffer, entryIndex);\n\n    const header = headerAndData[0];\n    const data = headerAndData[1];\n\n    entryIndex = computeNextEntryIndex(entryIndex, header, data);\n\n    if (!isWellKnownMimeType(header)) {\n      const typeString = decodeMimeTypeFromMimeBuffer(header);\n      if (!typeString) {\n        throw new Error('MIME type cannot be null');\n      }\n\n      yield new ExplicitMimeTimeEntry(data, typeString);\n      continue;\n    }\n\n    const id = decodeMimeIdFromMimeBuffer(header);\n    const type = _WellKnownMimeType.default.fromIdentifier(id);\n    if (_WellKnownMimeType.UNKNOWN_RESERVED_MIME_TYPE === type) {\n      yield new ReservedMimeTypeEntry(data, id);\n      continue;\n    }\n\n    yield new WellKnownMimeTypeEntry(data, type);\n  }\n}\n\nclass ExplicitMimeTimeEntry {\n  constructor(content, type) {\n    this._content = content;\n    this._type = type;\n  }\n\n  get content() {\n    return this._content;\n  }\n\n  get mimeType() {\n    return this._type;\n  }\n}\nexports.ExplicitMimeTimeEntry = ExplicitMimeTimeEntry;\n\nclass ReservedMimeTypeEntry {\n  constructor(content, type) {\n    this._content = content;\n    this._type = type;\n  }\n\n  get content() {\n    return this._content;\n  }\n\n  /**\n   * {@inheritDoc} Since this entry represents a compressed id that couldn't be decoded, this is\n   * always {@code null}.\n   */\n  get mimeType() {\n    return undefined;\n  }\n\n  /**\n   * Returns the reserved, but unknown {@link WellKnownMimeType} for this entry. Range is 0-127\n   * (inclusive).\n   *\n   * @return the reserved, but unknown {@link WellKnownMimeType} for this entry\n   */\n  get type() {\n    return this._type;\n  }\n}\nexports.ReservedMimeTypeEntry = ReservedMimeTypeEntry;\n\nclass WellKnownMimeTypeEntry {\n  constructor(content, type) {\n    this._content = content;\n    this._type = type;\n  }\n\n  get content() {\n    return this._content;\n  }\n\n  get mimeType() {\n    return this._type.string;\n  }\n\n  /**\n   * Returns the {@link WellKnownMimeType} for this entry.\n   *\n   * @return the {@link WellKnownMimeType} for this entry\n   */\n  get type() {\n    return this._type;\n  }\n}\n\n/**\n * Decode a {@code byte} compressed mime id from a {@link ByteBuf}, assuming said buffer properly\n * contains such an id.\n *\n * <p>The buffer must have exactly one readable byte, which is assumed to have been tested for\n * mime id encoding via the {@link #STREAM_METADATA_KNOWN_MASK} mask ({@code firstByte &\n * STREAM_METADATA_KNOWN_MASK) == STREAM_METADATA_KNOWN_MASK}).\n *\n * <p>If there is no readable byte, the negative identifier of {@link\n * WellKnownMimeType#UNPARSEABLE_MIME_TYPE} is returned.\n *\n * @param mimeBuffer the buffer that should next contain the compressed mime id byte\n * @return the compressed mime id, between 0 and 127, or a negative id if the input is invalid\n * @see #decodeMimeTypeFromMimeBuffer(ByteBuf)\n */ exports.WellKnownMimeTypeEntry = WellKnownMimeTypeEntry;\nfunction decodeMimeIdFromMimeBuffer(mimeBuffer) {\n  if (!isWellKnownMimeType(mimeBuffer)) {\n    return _WellKnownMimeType.UNPARSEABLE_MIME_TYPE.identifier;\n  }\n  return mimeBuffer.readInt8() & STREAM_METADATA_LENGTH_MASK;\n}\n\nfunction computeNextEntryIndex(currentEntryIndex, headerSlice, contentSlice) {\n  return (\n    currentEntryIndex +\n    headerSlice.byteLength + // this includes the mime length byte\n    3 + // 3 bytes of the content length, which are excluded from the slice\n    contentSlice.byteLength\n  );\n}\n\nfunction isWellKnownMimeType(header) {\n  return header.byteLength === 1;\n}\n\nconst STREAM_METADATA_KNOWN_MASK = 0x80; // 1000 0000\nconst STREAM_METADATA_LENGTH_MASK = 0x7f; // 0111 1111\n\nfunction isAscii(buffer, offset) {\n  let isAscii = true;\n  for (let i = offset, length = buffer.length; i < length; i++) {\n    if (buffer[i] > 127) {\n      isAscii = false;\n      break;\n    }\n  }\n\n  return isAscii;\n}\n\n\n//# sourceURL=webpack://rsocket-demo/./node_modules/rsocket-core/build/CompositeMetadata.js?");

/***/ }),

/***/ "./node_modules/rsocket-core/build/LiteBuffer.js":
/*!*******************************************************!*\
  !*** ./node_modules/rsocket-core/build/LiteBuffer.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({value: true}));\nexports.LiteBuffer = exports.Buffer = void 0;\n\nvar _buffer = _interopRequireDefault(__webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nconst bufferExists =\n  typeof __webpack_require__.g !== 'undefined' && __webpack_require__.g.hasOwnProperty('Buffer');\n\nfunction notImplemented(msg) {\n  const message = msg ? `Not implemented: ${msg}` : 'Not implemented';\n  throw new Error(message);\n}\n\n// eslint-disable-next-line max-len\n// Taken from: https://github.com/nodejs/node/blob/ba684805b6c0eded76e5cd89ee00328ac7a59365/lib/internal/util.js#L125\n// Return undefined if there is no match.\n// Move the \"slow cases\" to a separate function to make sure this function gets\n// inlined properly. That prioritizes the common case.\nfunction normalizeEncoding(enc) {\n  if (enc == null || enc === 'utf8' || enc === 'utf-8') {\n    return 'utf8';\n  }\n  return slowCases(enc);\n}\n\nfunction isInstance(obj, type) {\n  return (\n    obj instanceof type ||\n    (obj != null &&\n      obj.constructor != null &&\n      obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n  );\n}\n\n// eslint-disable-next-line max-len\n// https://github.com/nodejs/node/blob/ba684805b6c0eded76e5cd89ee00328ac7a59365/lib/internal/util.js#L130\nfunction slowCases(enc) {\n  switch (enc.length) {\n    case 4:\n      if (enc === 'UTF8') {\n        return 'utf8';\n      }\n      if (enc === 'ucs2' || enc === 'UCS2') {\n        return 'utf16le';\n      }\n      enc = `${enc}`.toLowerCase();\n      if (enc === 'utf8') {\n        return 'utf8';\n      }\n      if (enc === 'ucs2') {\n        return 'utf16le';\n      }\n      break;\n    case 3:\n      if (enc === 'hex' || enc === 'HEX' || `${enc}`.toLowerCase() === 'hex') {\n        return 'hex';\n      }\n      break;\n    case 5:\n      if (enc === 'ascii') {\n        return 'ascii';\n      }\n      if (enc === 'ucs-2') {\n        return 'utf16le';\n      }\n      if (enc === 'UTF-8') {\n        return 'utf8';\n      }\n      if (enc === 'ASCII') {\n        return 'ascii';\n      }\n      if (enc === 'UCS-2') {\n        return 'utf16le';\n      }\n      enc = `${enc}`.toLowerCase();\n      if (enc === 'utf-8') {\n        return 'utf8';\n      }\n      if (enc === 'ascii') {\n        return 'ascii';\n      }\n      if (enc === 'ucs-2') {\n        return 'utf16le';\n      }\n      break;\n    case 6:\n      if (enc === 'base64') {\n        return 'base64';\n      }\n      if (enc === 'latin1' || enc === 'binary') {\n        return 'latin1';\n      }\n      if (enc === 'BASE64') {\n        return 'base64';\n      }\n      if (enc === 'LATIN1' || enc === 'BINARY') {\n        return 'latin1';\n      }\n      enc = `${enc}`.toLowerCase();\n      if (enc === 'base64') {\n        return 'base64';\n      }\n      if (enc === 'latin1' || enc === 'binary') {\n        return 'latin1';\n      }\n      break;\n    case 7:\n      if (\n        enc === 'utf16le' ||\n        enc === 'UTF16LE' ||\n        `${enc}`.toLowerCase() === 'utf16le'\n      ) {\n        return 'utf16le';\n      }\n      break;\n    case 8:\n      if (\n        enc === 'utf-16le' ||\n        enc === 'UTF-16LE' ||\n        `${enc}`.toLowerCase() === 'utf-16le'\n      ) {\n        return 'utf16le';\n      }\n      break;\n    default:\n      if (enc === '') {\n        return 'utf8';\n      }\n  }\n}\n\nconst notImplementedEncodings = [\n  'base64',\n  'hex',\n  'ascii',\n  'binary',\n  'latin1',\n  'ucs2',\n  'utf16le',\n];\n\nfunction checkEncoding(encoding = 'utf8', strict = true) {\n  if (typeof encoding !== 'string' || (strict && encoding === '')) {\n    if (!strict) {\n      return 'utf8';\n    }\n    throw new TypeError(`Unknown encoding: ${encoding}`);\n  }\n\n  const normalized = normalizeEncoding(encoding);\n\n  if (normalized === undefined) {\n    throw new TypeError(`Unknown encoding: ${encoding}`);\n  }\n\n  if (notImplementedEncodings.includes(encoding)) {\n    notImplemented(`\"${encoding}\" encoding`);\n  }\n\n  return normalized;\n}\n\n// https://github.com/nodejs/node/blob/56dbe466fdbc598baea3bfce289bf52b97b8b8f7/lib/buffer.js#L598\nconst encodingOps = {\n  ascii: {\n    byteLength: (string) => string.length,\n  },\n\n  base64: {\n    byteLength: (string) => base64ByteLength(string, string.length),\n  },\n\n  hex: {\n    byteLength: (string) => string.length >>> 1,\n  },\n\n  latin1: {\n    byteLength: (string) => string.length,\n  },\n\n  ucs2: {\n    byteLength: (string) => string.length * 2,\n  },\n\n  utf16le: {\n    byteLength: (string) => string.length * 2,\n  },\n\n  utf8: {\n    byteLength: (string) => utf8ToBytes(string).length,\n  },\n};\n\nfunction base64ByteLength(str, bytes) {\n  // Handle padding\n  if (str.charCodeAt(bytes - 1) === 0x3d) {\n    bytes--;\n  }\n  if (bytes > 1 && str.charCodeAt(bytes - 1) === 0x3d) {\n    bytes--;\n  }\n\n  // Base64 ratio: 3/4\n  // eslint-disable-next-line no-bitwise\n  return (bytes * 3) >>> 2;\n}\n\nconst MAX_ARGUMENTS_LENGTH = 0x1000;\nfunction decodeCodePointsArray(codePoints) {\n  const len = codePoints.length;\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = '';\n  let i = 0;\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, (i += MAX_ARGUMENTS_LENGTH))\n    );\n  }\n  return res;\n}\n\nfunction utf8ToBytes(str, pUnits = Infinity) {\n  let units = pUnits;\n  let codePoint;\n  const length = str.length;\n  let leadSurrogate = null;\n  const bytes = [];\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = str.charCodeAt(i);\n\n    // is surrogate component\n    if (codePoint > 0xd7ff && codePoint < 0xe000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xdbff) {\n          // unexpected trail\n          if ((units -= 3) > -1) {\n            bytes.push(0xef, 0xbf, 0xbd);\n          }\n          continue;\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) {\n            bytes.push(0xef, 0xbf, 0xbd);\n          }\n          continue;\n        }\n\n        // valid lead\n        leadSurrogate = codePoint;\n\n        continue;\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xdc00) {\n        if ((units -= 3) > -1) {\n          bytes.push(0xef, 0xbf, 0xbd);\n        }\n        leadSurrogate = codePoint;\n        continue;\n      }\n\n      // valid surrogate pair\n      codePoint =\n        (((leadSurrogate - 0xd800) << 10) | (codePoint - 0xdc00)) + 0x10000;\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) {\n        bytes.push(0xef, 0xbf, 0xbd);\n      }\n    }\n\n    leadSurrogate = null;\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) {\n        break;\n      }\n      bytes.push(codePoint);\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) {\n        break;\n      }\n      bytes.push((codePoint >> 0x6) | 0xc0, (codePoint & 0x3f) | 0x80);\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) {\n        break;\n      }\n      bytes.push(\n        (codePoint >> 0xc) | 0xe0,\n        ((codePoint >> 0x6) & 0x3f) | 0x80,\n        (codePoint & 0x3f) | 0x80\n      );\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) {\n        break;\n      }\n      bytes.push(\n        (codePoint >> 0x12) | 0xf0,\n        ((codePoint >> 0xc) & 0x3f) | 0x80,\n        ((codePoint >> 0x6) & 0x3f) | 0x80,\n        (codePoint & 0x3f) | 0x80\n      );\n    } else {\n      throw new Error('Invalid code point');\n    }\n  }\n\n  return bytes;\n}\n\nfunction utf8Slice(buf, start, end) {\n  end = Math.min(buf.length, end);\n  const res = [];\n\n  let i = start;\n  while (i < end) {\n    const firstByte = buf[i];\n    let codePoint = null;\n    let bytesPerSequence =\n      firstByte > 0xef ? 4 : firstByte > 0xdf ? 3 : firstByte > 0xbf ? 2 : 1;\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint;\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte;\n          }\n          break;\n        case 2:\n          secondByte = buf[i + 1];\n          if ((secondByte & 0xc0) === 0x80) {\n            tempCodePoint = ((firstByte & 0x1f) << 0x6) | (secondByte & 0x3f);\n            if (tempCodePoint > 0x7f) {\n              codePoint = tempCodePoint;\n            }\n          }\n          break;\n        case 3:\n          secondByte = buf[i + 1];\n          thirdByte = buf[i + 2];\n          if ((secondByte & 0xc0) === 0x80 && (thirdByte & 0xc0) === 0x80) {\n            tempCodePoint =\n              ((firstByte & 0xf) << 0xc) |\n              ((secondByte & 0x3f) << 0x6) |\n              (thirdByte & 0x3f);\n            if (\n              tempCodePoint > 0x7ff &&\n              (tempCodePoint < 0xd800 || tempCodePoint > 0xdfff)\n            ) {\n              codePoint = tempCodePoint;\n            }\n          }\n          break;\n        case 4:\n          secondByte = buf[i + 1];\n          thirdByte = buf[i + 2];\n          fourthByte = buf[i + 3];\n          if (\n            (secondByte & 0xc0) === 0x80 &&\n            (thirdByte & 0xc0) === 0x80 &&\n            (fourthByte & 0xc0) === 0x80\n          ) {\n            tempCodePoint =\n              ((firstByte & 0xf) << 0x12) |\n              ((secondByte & 0x3f) << 0xc) |\n              ((thirdByte & 0x3f) << 0x6) |\n              (fourthByte & 0x3f);\n            if (tempCodePoint > 0xffff && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint;\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xfffd;\n      bytesPerSequence = 1;\n    } else if (codePoint > 0xffff) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000;\n      res.push(((codePoint >>> 10) & 0x3ff) | 0xd800);\n      codePoint = 0xdc00 | (codePoint & 0x3ff);\n    }\n\n    res.push(codePoint);\n    i += bytesPerSequence;\n  }\n\n  return decodeCodePointsArray(res);\n}\n\nfunction utf8Write(buf, input, offset, length) {\n  return blitBuffer(\n    utf8ToBytes(input, buf.length - offset),\n    buf,\n    offset,\n    length\n  );\n}\n\nfunction blitBuffer(src, dst, offset, length) {\n  let i = 0;\n  for (; i < length; ++i) {\n    if (i + offset >= dst.length || i >= src.length) {\n      break;\n    }\n    dst[i + offset] = src[i];\n  }\n  return i;\n}\n\n/**\n * See also https://nodejs.org/api/buffer.html\n */\nclass Buffer extends Uint8Array {\n  constructor(value, byteOffset, length) {\n    super(value, byteOffset, length);\n  }\n  /**\n   * Allocates a new Buffer of size bytes.\n   */\n  static alloc(size, fill = 0, encoding = 'utf8') {\n    if (typeof size !== 'number') {\n      throw new TypeError(\n        `The \"size\" argument must be of type number. Received type ${typeof size}`\n      );\n    }\n\n    const buf = new Buffer(size);\n    if (size === 0) {\n      return buf;\n    }\n\n    let bufFill;\n    if (typeof fill === 'string') {\n      encoding = checkEncoding(encoding);\n      if (fill.length === 1 && encoding === 'utf8') {\n        buf.fill(fill.charCodeAt(0));\n      } else {\n        bufFill = Buffer.from(fill, encoding);\n      }\n    } else if (typeof fill === 'number') {\n      buf.fill(fill);\n    } else if (isInstance(fill, Uint8Array)) {\n      if (fill.length === 0) {\n        throw new TypeError(\n          `The argument \"value\" is invalid. Received ${fill.constructor.name} []`\n        );\n      }\n\n      bufFill = fill;\n    }\n\n    if (bufFill) {\n      if (bufFill.length > buf.length) {\n        bufFill = bufFill.subarray(0, buf.length);\n      }\n\n      let offset = 0;\n      while (offset < size) {\n        buf.set(bufFill, offset);\n        offset += bufFill.length;\n        if (offset + bufFill.length >= size) {\n          break;\n        }\n      }\n      if (offset !== size) {\n        buf.set(bufFill.subarray(0, size - offset), offset);\n      }\n    }\n\n    return buf;\n  }\n\n  static allocUnsafe(size) {\n    return new Buffer(size);\n  }\n\n  /**\n   * Returns the byte length of a string when encoded. This is not the same as\n   * String.prototype.length, which does not account for the encoding that is\n   * used to convert the string into bytes.\n   */\n  static byteLength(string, encoding = 'utf8') {\n    if (typeof string != 'string') {\n      return string.byteLength;\n    }\n\n    encoding = normalizeEncoding(encoding) || 'utf8';\n    return encodingOps[encoding].byteLength(string);\n  }\n\n  /**\n   * Returns a new Buffer which is the result of concatenating all the Buffer\n   * instances in the list together.\n   */\n  static concat(list, totalLength) {\n    if (totalLength == undefined) {\n      totalLength = 0;\n      for (const buf of list) {\n        totalLength += buf.length;\n      }\n    }\n\n    const buffer = new Buffer(totalLength);\n    let pos = 0;\n    for (const buf of list) {\n      buffer.set(buf, pos);\n      pos += buf.length;\n    }\n\n    return buffer;\n  }\n\n  /**\n   * This creates a view of the ArrayBuffer without copying the underlying\n   * memory. For example, when passed a reference to the .buffer property of a\n   * TypedArray instance, the newly created Buffer will share the same allocated\n   * memory as the TypedArray.\n   */\n  //$FlowFixMe\n  static from(\n    value,\n    byteOffsetOrEncoding,\n    //$FlowFixMe\n    length\n  ) {\n    const offset =\n      typeof byteOffsetOrEncoding === 'string'\n        ? undefined\n        : byteOffsetOrEncoding;\n    let encoding =\n      typeof byteOffsetOrEncoding === 'string'\n        ? byteOffsetOrEncoding\n        : undefined;\n\n    if (typeof value === 'string' || value.constructor.name === 'String') {\n      value = value.toString();\n      encoding = checkEncoding(encoding, false);\n      // if (encoding === 'hex') {return new Buffer(hex.decodeString(value).buffer);}\n      // if (encoding === 'base64') {return new Buffer(base64.decode(value));}\n\n      switch (encoding) {\n        case 'utf8':\n          if (typeof TextEncoder !== 'undefined') {\n            return new Buffer(new TextEncoder().encode(value).buffer);\n          }\n          return new Buffer(utf8ToBytes(value));\n        default:\n          throw new TypeError('Unknown encoding: ' + encoding);\n      }\n    }\n\n    // workaround for https://github.com/microsoft/TypeScript/issues/38446\n    return new Buffer(value, offset, length);\n  }\n\n  /**\n   * Returns true if obj is a Buffer, false otherwise.\n   */\n  static isBuffer(obj) {\n    return isInstance(obj, Buffer);\n  }\n\n  static isEncoding(encoding) {\n    return (\n      typeof encoding === 'string' &&\n      encoding.length !== 0 &&\n      normalizeEncoding(encoding) !== undefined\n    );\n  }\n\n  /**\n   * Copies data from a region of buf to a region in target, even if the target\n   * memory region overlaps with buf.\n   */\n  copy(\n    targetBuffer,\n    targetStart = 0,\n    sourceStart = 0,\n    sourceEnd = this.length\n  ) {\n    const sourceBuffer = this.subarray(sourceStart, sourceEnd);\n    targetBuffer.set(sourceBuffer, targetStart);\n    return sourceBuffer.length;\n  }\n\n  /*\n   * Returns true if both buf and otherBuffer have exactly the same bytes, false otherwise.\n   */\n  equals(otherBuffer) {\n    if (!isInstance(otherBuffer, Uint8Array)) {\n      throw new TypeError(\n        // eslint-disable-next-line max-len\n        `The \"otherBuffer\" argument must be an instance of Buffer or Uint8Array. Received type ${typeof otherBuffer}`\n      );\n    }\n\n    if (this === otherBuffer) {\n      return true;\n    }\n    if (this.byteLength !== otherBuffer.byteLength) {\n      return false;\n    }\n\n    for (let i = 0; i < this.length; i++) {\n      if (this[i] !== otherBuffer[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  readDoubleBE(offset = 0) {\n    return new DataView(\n      this.buffer,\n      this.byteOffset,\n      this.byteLength\n    ).getFloat64(offset);\n  }\n\n  readDoubleLE(offset = 0) {\n    return new DataView(\n      this.buffer,\n      this.byteOffset,\n      this.byteLength\n    ).getFloat64(offset, true);\n  }\n\n  readFloatBE(offset = 0) {\n    return new DataView(\n      this.buffer,\n      this.byteOffset,\n      this.byteLength\n    ).getFloat32(offset);\n  }\n\n  readFloatLE(offset = 0) {\n    return new DataView(\n      this.buffer,\n      this.byteOffset,\n      this.byteLength\n    ).getFloat32(offset, true);\n  }\n\n  readInt8(offset = 0) {\n    return new DataView(this.buffer, this.byteOffset, this.byteLength).getInt8(\n      offset\n    );\n  }\n\n  readInt16BE(offset = 0) {\n    return new DataView(this.buffer, this.byteOffset, this.byteLength).getInt16(\n      offset\n    );\n  }\n\n  readInt16LE(offset = 0) {\n    return new DataView(this.buffer, this.byteOffset, this.byteLength).getInt16(\n      offset,\n      true\n    );\n  }\n\n  readInt32BE(offset = 0) {\n    return new DataView(this.buffer, this.byteOffset, this.byteLength).getInt32(\n      offset\n    );\n  }\n\n  readInt32LE(offset = 0) {\n    return new DataView(this.buffer, this.byteOffset, this.byteLength).getInt32(\n      offset,\n      true\n    );\n  }\n\n  readUInt8(offset = 0) {\n    return new DataView(this.buffer, this.byteOffset, this.byteLength).getUint8(\n      offset\n    );\n  }\n\n  readUInt16BE(offset = 0) {\n    return new DataView(\n      this.buffer,\n      this.byteOffset,\n      this.byteLength\n    ).getUint16(offset);\n  }\n\n  readUInt16LE(offset = 0) {\n    return new DataView(\n      this.buffer,\n      this.byteOffset,\n      this.byteLength\n    ).getUint16(offset, true);\n  }\n\n  readUInt32BE(offset = 0) {\n    return new DataView(\n      this.buffer,\n      this.byteOffset,\n      this.byteLength\n    ).getUint32(offset);\n  }\n\n  readUInt32LE(offset = 0) {\n    return new DataView(\n      this.buffer,\n      this.byteOffset,\n      this.byteLength\n    ).getUint32(offset, true);\n  }\n\n  /**\n   * Returns a new Buffer that references the same memory as the original, but\n   * offset and cropped by the start and end indices.\n   */\n  // $FlowFixMe\n  slice(begin = 0, end = this.length) {\n    // workaround for https://github.com/microsoft/TypeScript/issues/38665\n    return this.subarray(begin, end);\n  }\n\n  // $FlowFixMe\n  subarray(begin = 0, end = this.length) {\n    return new Buffer(super.subarray(begin, end));\n  }\n\n  /**\n   * Returns a JSON representation of buf. JSON.stringify() implicitly calls\n   * this function when stringifying a Buffer instance.\n   */\n  toJSON() {\n    return {data: Array.from(this), type: 'Buffer'};\n  }\n\n  /**\n   * Decodes buf to a string according to the specified character encoding in\n   * encoding. start and end may be passed to decode only a subset of buf.\n   */\n  toString(encoding = 'utf8', start = 0, end = this.length) {\n    encoding = checkEncoding(encoding);\n\n    if (typeof TextDecoder !== 'undefined') {\n      const b = this.subarray(start, end);\n      // if (encoding === 'hex') {return hex.encodeToString(b);}\n      // if (encoding === 'base64') {return base64.encode(b.buffer);}\n\n      return new TextDecoder().decode(b);\n    }\n\n    return this.slowToString(encoding, start, end);\n  }\n\n  slowToString(encoding = 'utf8', start = 0, end = this.length) {\n    if (start === undefined || start < 0) {\n      start = 0;\n    }\n\n    if (start > this.length) {\n      return '';\n    }\n\n    if (end === undefined || end > this.length) {\n      end = this.length;\n    }\n\n    if (end <= 0) {\n      return '';\n    }\n\n    // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n    end >>>= 0;\n    start >>>= 0;\n\n    if (end <= start) {\n      return '';\n    }\n\n    encoding = checkEncoding(encoding);\n    switch (encoding) {\n      case 'utf8':\n        return utf8Slice(this, start, end);\n      default:\n        throw new TypeError('Unsupported encoding: ' + encoding);\n    }\n  }\n\n  /**\n   * Writes string to buf at offset according to the character encoding in\n   * encoding. The length parameter is the number of bytes to write. If buf did\n   * not contain enough space to fit the entire string, only part of string will\n   * be written. However, partially encoded characters will not be written.\n   */\n  write(string, offset = 0, length = this.length, encoding = 'utf8') {\n    encoding = checkEncoding(encoding);\n    switch (encoding) {\n      case 'utf8':\n        if (typeof TextEncoder !== 'undefined') {\n          // $FlowFixMe\n          const resultArray = new TextEncoder().encode(string);\n          this.set(resultArray, offset);\n\n          return resultArray.byteLength > length - offset\n            ? length - offset\n            : resultArray.byteLength;\n        }\n        return utf8Write(this, string, offset, length);\n      default:\n        throw new TypeError('Unknown encoding: ' + encoding);\n    }\n  }\n\n  writeDoubleBE(value, offset = 0) {\n    new DataView(this.buffer, this.byteOffset, this.byteLength).setFloat64(\n      offset,\n      value\n    );\n\n    return offset + 8;\n  }\n\n  writeDoubleLE(value, offset = 0) {\n    new DataView(this.buffer, this.byteOffset, this.byteLength).setFloat64(\n      offset,\n      value,\n      true\n    );\n\n    return offset + 8;\n  }\n\n  writeFloatBE(value, offset = 0) {\n    new DataView(this.buffer, this.byteOffset, this.byteLength).setFloat32(\n      offset,\n      value\n    );\n\n    return offset + 4;\n  }\n\n  writeFloatLE(value, offset = 0) {\n    new DataView(this.buffer, this.byteOffset, this.byteLength).setFloat32(\n      offset,\n      value,\n      true\n    );\n\n    return offset + 4;\n  }\n\n  writeInt8(value, offset = 0) {\n    new DataView(this.buffer, this.byteOffset, this.byteLength).setInt8(\n      offset,\n      value\n    );\n\n    return offset + 1;\n  }\n\n  writeInt16BE(value, offset = 0) {\n    new DataView(this.buffer, this.byteOffset, this.byteLength).setInt16(\n      offset,\n      value\n    );\n\n    return offset + 2;\n  }\n\n  writeInt16LE(value, offset = 0) {\n    new DataView(this.buffer, this.byteOffset, this.byteLength).setInt16(\n      offset,\n      value,\n      true\n    );\n\n    return offset + 2;\n  }\n\n  writeInt32BE(value, offset = 0) {\n    new DataView(this.buffer, this.byteOffset, this.byteLength).setUint32(\n      offset,\n      value\n    );\n\n    return offset + 4;\n  }\n\n  writeInt32LE(value, offset = 0) {\n    new DataView(this.buffer, this.byteOffset, this.byteLength).setInt32(\n      offset,\n      value,\n      true\n    );\n\n    return offset + 4;\n  }\n\n  writeUInt8(value, offset = 0) {\n    new DataView(this.buffer, this.byteOffset, this.byteLength).setUint8(\n      offset,\n      value\n    );\n\n    return offset + 1;\n  }\n\n  writeUInt16BE(value, offset = 0) {\n    new DataView(this.buffer, this.byteOffset, this.byteLength).setUint16(\n      offset,\n      value\n    );\n\n    return offset + 2;\n  }\n\n  writeUInt16LE(value, offset = 0) {\n    new DataView(this.buffer, this.byteOffset, this.byteLength).setUint16(\n      offset,\n      value,\n      true\n    );\n\n    return offset + 2;\n  }\n\n  writeUInt32BE(value, offset = 0) {\n    new DataView(this.buffer, this.byteOffset, this.byteLength).setUint32(\n      offset,\n      value\n    );\n\n    return offset + 4;\n  }\n\n  writeUInt32LE(value, offset = 0) {\n    new DataView(this.buffer, this.byteOffset, this.byteLength).setUint32(\n      offset,\n      value,\n      true\n    );\n\n    return offset + 4;\n  }\n}\nexports.Buffer = Buffer;\n\nif (!bufferExists) {\n  if (_buffer.default.hasOwnProperty('Buffer')) {\n    // ExistingBuffer is likely to be a polyfill, hence we can override it\n    // eslint-disable-next-line no-undef\n    // $FlowFixMe\n    Object.defineProperty(_buffer.default, 'Buffer', {\n      configurable: true,\n      enumerable: false,\n      value: Buffer,\n      writable: true,\n    });\n  }\n  // eslint-disable-next-line no-undef\n  Object.defineProperty(window, 'Buffer', {\n    configurable: true,\n    enumerable: false,\n    value: Buffer,\n    writable: true,\n  });\n}\n\nconst LiteBuffer = bufferExists ? __webpack_require__.g.Buffer : Buffer;\nexports.LiteBuffer = LiteBuffer;\n\n\n//# sourceURL=webpack://rsocket-demo/./node_modules/rsocket-core/build/LiteBuffer.js?");

/***/ }),

/***/ "./node_modules/rsocket-core/build/RSocketBinaryFraming.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rsocket-core/build/RSocketBinaryFraming.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/** Copyright (c) Facebook, Inc. and its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n */\n\n\n\n/* eslint-disable consistent-return, no-bitwise */ Object.defineProperty(exports, \"__esModule\", ({value: true}));\nexports.deserializeFrameWithLength = deserializeFrameWithLength;\nexports.deserializeFrames = deserializeFrames;\nexports.serializeFrameWithLength = serializeFrameWithLength;\nexports.deserializeFrame = deserializeFrame;\nexports.serializeFrame = serializeFrame;\nexports.sizeOfFrame = sizeOfFrame;\n\nvar _invariant = _interopRequireDefault(__webpack_require__(/*! fbjs/lib/invariant */ \"./node_modules/fbjs/lib/invariant.js\"));\nvar _RSocketFrame = __webpack_require__(/*! ./RSocketFrame */ \"./node_modules/rsocket-core/build/RSocketFrame.js\");\n\nvar _RSocketEncoding = __webpack_require__(/*! ./RSocketEncoding */ \"./node_modules/rsocket-core/build/RSocketEncoding.js\");\nvar _RSocketBufferUtils = __webpack_require__(/*! ./RSocketBufferUtils */ \"./node_modules/rsocket-core/build/RSocketBufferUtils.js\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n/**\n * Frame header is:\n * - stream id (uint32 = 4)\n * - type + flags (uint 16 = 2)\n */\nconst FRAME_HEADER_SIZE = 6;\n\n/**\n * Size of frame length and metadata length fields.\n */\nconst UINT24_SIZE = 3;\n\n/**\n * Reads a frame from a buffer that is prefixed with the frame length.\n */\nfunction deserializeFrameWithLength(buffer, encoders) {\n  const frameLength = (0, _RSocketBufferUtils.readUInt24BE)(buffer, 0);\n  return deserializeFrame(\n    buffer.slice(UINT24_SIZE, UINT24_SIZE + frameLength),\n    encoders\n  );\n}\n\n/**\n * Given a buffer that may contain zero or more length-prefixed frames followed\n * by zero or more bytes of a (partial) subsequent frame, returns an array of\n * the frames and a buffer of the leftover bytes.\n */\nfunction deserializeFrames(buffer, encoders) {\n  const frames = [];\n  let offset = 0;\n  while (offset + UINT24_SIZE < buffer.length) {\n    const frameLength = (0, _RSocketBufferUtils.readUInt24BE)(buffer, offset);\n    const frameStart = offset + UINT24_SIZE;\n    const frameEnd = frameStart + frameLength;\n    if (frameEnd > buffer.length) {\n      // not all bytes of next frame received\n      break;\n    }\n    const frameBuffer = buffer.slice(frameStart, frameEnd);\n    const frame = deserializeFrame(frameBuffer, encoders);\n    frames.push(frame);\n    offset = frameEnd;\n  }\n  return [frames, buffer.slice(offset, buffer.length)];\n}\n\n/**\n * Writes a frame to a buffer with a length prefix.\n */\nfunction serializeFrameWithLength(frame, encoders) {\n  const buffer = serializeFrame(frame, encoders);\n  const lengthPrefixed = (0, _RSocketBufferUtils.createBuffer)(\n    buffer.length + UINT24_SIZE\n  );\n  (0, _RSocketBufferUtils.writeUInt24BE)(lengthPrefixed, buffer.length, 0);\n  buffer.copy(lengthPrefixed, UINT24_SIZE, 0, buffer.length);\n  return lengthPrefixed;\n}\n\n/**\n * Read a frame from the buffer.\n */\nfunction deserializeFrame(buffer, encoders) {\n  encoders = encoders || _RSocketEncoding.Utf8Encoders;\n  let offset = 0;\n  const streamId = buffer.readInt32BE(offset);\n  offset += 4;\n  (0, _invariant.default)(\n    streamId >= 0,\n    'RSocketBinaryFraming: Invalid frame, expected a positive stream id, got `%s.',\n    streamId\n  );\n\n  const typeAndFlags = buffer.readUInt16BE(offset);\n  offset += 2;\n  const type = typeAndFlags >>> _RSocketFrame.FRAME_TYPE_OFFFSET; // keep highest 6 bits\n  const flags = typeAndFlags & _RSocketFrame.FLAGS_MASK; // keep lowest 10 bits\n  switch (type) {\n    case _RSocketFrame.FRAME_TYPES.SETUP:\n      return deserializeSetupFrame(buffer, streamId, flags, encoders);\n    case _RSocketFrame.FRAME_TYPES.PAYLOAD:\n      return deserializePayloadFrame(buffer, streamId, flags, encoders);\n    case _RSocketFrame.FRAME_TYPES.ERROR:\n      return deserializeErrorFrame(buffer, streamId, flags, encoders);\n    case _RSocketFrame.FRAME_TYPES.KEEPALIVE:\n      return deserializeKeepAliveFrame(buffer, streamId, flags, encoders);\n    case _RSocketFrame.FRAME_TYPES.REQUEST_FNF:\n      return deserializeRequestFnfFrame(buffer, streamId, flags, encoders);\n    case _RSocketFrame.FRAME_TYPES.REQUEST_RESPONSE:\n      return deserializeRequestResponseFrame(buffer, streamId, flags, encoders);\n    case _RSocketFrame.FRAME_TYPES.REQUEST_STREAM:\n      return deserializeRequestStreamFrame(buffer, streamId, flags, encoders);\n    case _RSocketFrame.FRAME_TYPES.REQUEST_CHANNEL:\n      return deserializeRequestChannelFrame(buffer, streamId, flags, encoders);\n    case _RSocketFrame.FRAME_TYPES.REQUEST_N:\n      return deserializeRequestNFrame(buffer, streamId, flags, encoders);\n    case _RSocketFrame.FRAME_TYPES.RESUME:\n      return deserializeResumeFrame(buffer, streamId, flags, encoders);\n    case _RSocketFrame.FRAME_TYPES.RESUME_OK:\n      return deserializeResumeOkFrame(buffer, streamId, flags, encoders);\n    case _RSocketFrame.FRAME_TYPES.CANCEL:\n      return deserializeCancelFrame(buffer, streamId, flags, encoders);\n    case _RSocketFrame.FRAME_TYPES.LEASE:\n      return deserializeLeaseFrame(buffer, streamId, flags, encoders);\n    default:\n      (0, _invariant.default)(\n        false,\n        'RSocketBinaryFraming: Unsupported frame type `%s`.',\n        (0, _RSocketFrame.getFrameTypeName)(type)\n      );\n  }\n}\n\n/**\n * Convert the frame to a (binary) buffer.\n */\nfunction serializeFrame(frame, encoders) {\n  encoders = encoders || _RSocketEncoding.Utf8Encoders;\n  switch (frame.type) {\n    case _RSocketFrame.FRAME_TYPES.SETUP:\n      return serializeSetupFrame(frame, encoders);\n    case _RSocketFrame.FRAME_TYPES.PAYLOAD:\n      return serializePayloadFrame(frame, encoders);\n    case _RSocketFrame.FRAME_TYPES.ERROR:\n      return serializeErrorFrame(frame, encoders);\n    case _RSocketFrame.FRAME_TYPES.KEEPALIVE:\n      return serializeKeepAliveFrame(frame, encoders);\n    case _RSocketFrame.FRAME_TYPES.REQUEST_FNF:\n    case _RSocketFrame.FRAME_TYPES.REQUEST_RESPONSE:\n      return serializeRequestFrame(frame, encoders);\n    case _RSocketFrame.FRAME_TYPES.REQUEST_STREAM:\n    case _RSocketFrame.FRAME_TYPES.REQUEST_CHANNEL:\n      return serializeRequestManyFrame(frame, encoders);\n    case _RSocketFrame.FRAME_TYPES.REQUEST_N:\n      return serializeRequestNFrame(frame, encoders);\n    case _RSocketFrame.FRAME_TYPES.RESUME:\n      return serializeResumeFrame(frame, encoders);\n    case _RSocketFrame.FRAME_TYPES.RESUME_OK:\n      return serializeResumeOkFrame(frame, encoders);\n    case _RSocketFrame.FRAME_TYPES.CANCEL:\n      return serializeCancelFrame(frame, encoders);\n    case _RSocketFrame.FRAME_TYPES.LEASE:\n      return serializeLeaseFrame(frame, encoders);\n    default:\n      (0, _invariant.default)(\n        false,\n        'RSocketBinaryFraming: Unsupported frame type `%s`.',\n        (0, _RSocketFrame.getFrameTypeName)(frame.type)\n      );\n  }\n}\n/**\n * Byte size of frame without size prefix\n */\nfunction sizeOfFrame(frame, encoders) {\n  encoders = encoders || _RSocketEncoding.Utf8Encoders;\n  switch (frame.type) {\n    case _RSocketFrame.FRAME_TYPES.SETUP:\n      return sizeOfSetupFrame(frame, encoders);\n    case _RSocketFrame.FRAME_TYPES.PAYLOAD:\n      return sizeOfPayloadFrame(frame, encoders);\n    case _RSocketFrame.FRAME_TYPES.ERROR:\n      return sizeOfErrorFrame(frame, encoders);\n    case _RSocketFrame.FRAME_TYPES.KEEPALIVE:\n      return sizeOfKeepAliveFrame(frame, encoders);\n    case _RSocketFrame.FRAME_TYPES.REQUEST_FNF:\n    case _RSocketFrame.FRAME_TYPES.REQUEST_RESPONSE:\n      return sizeOfRequestFrame(frame, encoders);\n    case _RSocketFrame.FRAME_TYPES.REQUEST_STREAM:\n    case _RSocketFrame.FRAME_TYPES.REQUEST_CHANNEL:\n      return sizeOfRequestManyFrame(frame, encoders);\n    case _RSocketFrame.FRAME_TYPES.REQUEST_N:\n      return sizeOfRequestNFrame(frame, encoders);\n    case _RSocketFrame.FRAME_TYPES.RESUME:\n      return sizeOfResumeFrame(frame, encoders);\n    case _RSocketFrame.FRAME_TYPES.RESUME_OK:\n      return sizeOfResumeOkFrame(frame, encoders);\n    case _RSocketFrame.FRAME_TYPES.CANCEL:\n      return sizeOfCancelFrame(frame, encoders);\n    case _RSocketFrame.FRAME_TYPES.LEASE:\n      return sizeOfLeaseFrame(frame, encoders);\n    default:\n      (0, _invariant.default)(\n        false,\n        'RSocketBinaryFraming: Unsupported frame type `%s`.',\n        (0, _RSocketFrame.getFrameTypeName)(frame.type)\n      );\n  }\n}\n\n/**\n * Writes a SETUP frame into a new buffer and returns it.\n *\n * Prefix size is:\n * - version (2x uint16 = 4)\n * - keepalive (uint32 = 4)\n * - lifetime (uint32 = 4)\n * - mime lengths (2x uint8 = 2)\n */\nconst SETUP_FIXED_SIZE = 14;\nconst RESUME_TOKEN_LENGTH_SIZE = 2;\nfunction serializeSetupFrame(frame, encoders) {\n  const resumeTokenLength =\n    frame.resumeToken != null\n      ? encoders.resumeToken.byteLength(frame.resumeToken)\n      : 0;\n  const metadataMimeTypeLength =\n    frame.metadataMimeType != null\n      ? encoders.metadataMimeType.byteLength(frame.metadataMimeType)\n      : 0;\n  const dataMimeTypeLength =\n    frame.dataMimeType != null\n      ? encoders.dataMimeType.byteLength(frame.dataMimeType)\n      : 0;\n  const payloadLength = getPayloadLength(frame, encoders);\n  const buffer = (0, _RSocketBufferUtils.createBuffer)(\n    FRAME_HEADER_SIZE +\n      SETUP_FIXED_SIZE + //\n      (resumeTokenLength ? RESUME_TOKEN_LENGTH_SIZE + resumeTokenLength : 0) +\n      metadataMimeTypeLength +\n      dataMimeTypeLength +\n      payloadLength\n  );\n\n  let offset = writeHeader(frame, buffer);\n  offset = buffer.writeUInt16BE(frame.majorVersion, offset);\n  offset = buffer.writeUInt16BE(frame.minorVersion, offset);\n  offset = buffer.writeUInt32BE(frame.keepAlive, offset);\n  offset = buffer.writeUInt32BE(frame.lifetime, offset);\n\n  if (frame.flags & _RSocketFrame.FLAGS.RESUME_ENABLE) {\n    offset = buffer.writeUInt16BE(resumeTokenLength, offset);\n    if (frame.resumeToken != null) {\n      offset = encoders.resumeToken.encode(\n        frame.resumeToken,\n        buffer,\n        offset,\n        offset + resumeTokenLength\n      );\n    }\n  }\n\n  offset = buffer.writeUInt8(metadataMimeTypeLength, offset);\n  if (frame.metadataMimeType != null) {\n    offset = encoders.metadataMimeType.encode(\n      frame.metadataMimeType,\n      buffer,\n      offset,\n      offset + metadataMimeTypeLength\n    );\n  }\n\n  offset = buffer.writeUInt8(dataMimeTypeLength, offset);\n  if (frame.dataMimeType != null) {\n    offset = encoders.dataMimeType.encode(\n      frame.dataMimeType,\n      buffer,\n      offset,\n      offset + dataMimeTypeLength\n    );\n  }\n\n  writePayload(frame, buffer, encoders, offset);\n  return buffer;\n}\n\nfunction sizeOfSetupFrame(frame, encoders) {\n  const resumeTokenLength =\n    frame.resumeToken != null\n      ? encoders.resumeToken.byteLength(frame.resumeToken)\n      : 0;\n  const metadataMimeTypeLength =\n    frame.metadataMimeType != null\n      ? encoders.metadataMimeType.byteLength(frame.metadataMimeType)\n      : 0;\n  const dataMimeTypeLength =\n    frame.dataMimeType != null\n      ? encoders.dataMimeType.byteLength(frame.dataMimeType)\n      : 0;\n  const payloadLength = getPayloadLength(frame, encoders);\n  return (\n    FRAME_HEADER_SIZE +\n    SETUP_FIXED_SIZE + //\n    (resumeTokenLength ? RESUME_TOKEN_LENGTH_SIZE + resumeTokenLength : 0) +\n    metadataMimeTypeLength +\n    dataMimeTypeLength +\n    payloadLength\n  );\n}\n\n/**\n * Reads a SETUP frame from the buffer and returns it.\n */\nfunction deserializeSetupFrame(buffer, streamId, flags, encoders) {\n  (0, _invariant.default)(\n    streamId === 0,\n    'RSocketBinaryFraming: Invalid SETUP frame, expected stream id to be 0.'\n  );\n\n  const length = buffer.length;\n  let offset = FRAME_HEADER_SIZE;\n  const majorVersion = buffer.readUInt16BE(offset);\n  offset += 2;\n  const minorVersion = buffer.readUInt16BE(offset);\n  offset += 2;\n\n  const keepAlive = buffer.readInt32BE(offset);\n  offset += 4;\n  (0, _invariant.default)(\n    keepAlive >= 0 && keepAlive <= _RSocketFrame.MAX_KEEPALIVE,\n    'RSocketBinaryFraming: Invalid SETUP frame, expected keepAlive to be ' +\n      '>= 0 and <= %s. Got `%s`.',\n    _RSocketFrame.MAX_KEEPALIVE,\n    keepAlive\n  );\n\n  const lifetime = buffer.readInt32BE(offset);\n  offset += 4;\n  (0, _invariant.default)(\n    lifetime >= 0 && lifetime <= _RSocketFrame.MAX_LIFETIME,\n    'RSocketBinaryFraming: Invalid SETUP frame, expected lifetime to be ' +\n      '>= 0 and <= %s. Got `%s`.',\n    _RSocketFrame.MAX_LIFETIME,\n    lifetime\n  );\n\n  let resumeToken = null;\n  if (flags & _RSocketFrame.FLAGS.RESUME_ENABLE) {\n    const resumeTokenLength = buffer.readInt16BE(offset);\n    offset += 2;\n    (0, _invariant.default)(\n      resumeTokenLength >= 0 &&\n        resumeTokenLength <= _RSocketFrame.MAX_RESUME_LENGTH,\n      'RSocketBinaryFraming: Invalid SETUP frame, expected resumeToken length ' +\n        'to be >= 0 and <= %s. Got `%s`.',\n      _RSocketFrame.MAX_RESUME_LENGTH,\n      resumeTokenLength\n    );\n\n    resumeToken = encoders.resumeToken.decode(\n      buffer,\n      offset,\n      offset + resumeTokenLength\n    );\n\n    offset += resumeTokenLength;\n  }\n\n  const metadataMimeTypeLength = buffer.readUInt8(offset);\n  offset += 1;\n  const metadataMimeType = encoders.metadataMimeType.decode(\n    buffer,\n    offset,\n    offset + metadataMimeTypeLength\n  );\n\n  offset += metadataMimeTypeLength;\n\n  const dataMimeTypeLength = buffer.readUInt8(offset);\n  offset += 1;\n  const dataMimeType = encoders.dataMimeType.decode(\n    buffer,\n    offset,\n    offset + dataMimeTypeLength\n  );\n\n  offset += dataMimeTypeLength;\n\n  const frame = {\n    data: null,\n    dataMimeType,\n    flags,\n    keepAlive,\n    length,\n    lifetime,\n    majorVersion,\n    metadata: null,\n    metadataMimeType,\n    minorVersion,\n    resumeToken,\n    streamId,\n    type: _RSocketFrame.FRAME_TYPES.SETUP,\n  };\n\n  readPayload(buffer, frame, encoders, offset);\n  return frame;\n}\n\n/**\n * Writes an ERROR frame into a new buffer and returns it.\n *\n * Prefix size is for the error code (uint32 = 4).\n */\nconst ERROR_FIXED_SIZE = 4;\nfunction serializeErrorFrame(frame, encoders) {\n  const messageLength =\n    frame.message != null ? encoders.message.byteLength(frame.message) : 0;\n  const buffer = (0, _RSocketBufferUtils.createBuffer)(\n    FRAME_HEADER_SIZE + ERROR_FIXED_SIZE + messageLength\n  );\n\n  let offset = writeHeader(frame, buffer);\n  offset = buffer.writeUInt32BE(frame.code, offset);\n  if (frame.message != null) {\n    encoders.message.encode(\n      frame.message,\n      buffer,\n      offset,\n      offset + messageLength\n    );\n  }\n  return buffer;\n}\n\nfunction sizeOfErrorFrame(frame, encoders) {\n  const messageLength =\n    frame.message != null ? encoders.message.byteLength(frame.message) : 0;\n  return FRAME_HEADER_SIZE + ERROR_FIXED_SIZE + messageLength;\n}\n\n/**\n * Reads an ERROR frame from the buffer and returns it.\n */\nfunction deserializeErrorFrame(buffer, streamId, flags, encoders) {\n  const length = buffer.length;\n  let offset = FRAME_HEADER_SIZE;\n  const code = buffer.readInt32BE(offset);\n  offset += 4;\n  (0, _invariant.default)(\n    code >= 0 && code <= _RSocketFrame.MAX_CODE,\n    'RSocketBinaryFraming: Invalid ERROR frame, expected code to be >= 0 and <= %s. Got `%s`.',\n    _RSocketFrame.MAX_CODE,\n    code\n  );\n\n  const messageLength = buffer.length - offset;\n  let message = '';\n  if (messageLength > 0) {\n    message = encoders.message.decode(buffer, offset, offset + messageLength);\n    offset += messageLength;\n  }\n\n  return {\n    code,\n    flags,\n    length,\n    message,\n    streamId,\n    type: _RSocketFrame.FRAME_TYPES.ERROR,\n  };\n}\n\n/**\n * Writes a KEEPALIVE frame into a new buffer and returns it.\n *\n * Prefix size is for the last received position (uint64 = 8).\n */\nconst KEEPALIVE_FIXED_SIZE = 8;\nfunction serializeKeepAliveFrame(frame, encoders) {\n  const dataLength =\n    frame.data != null ? encoders.data.byteLength(frame.data) : 0;\n  const buffer = (0, _RSocketBufferUtils.createBuffer)(\n    FRAME_HEADER_SIZE + KEEPALIVE_FIXED_SIZE + dataLength\n  );\n\n  let offset = writeHeader(frame, buffer);\n  offset = (0, _RSocketBufferUtils.writeUInt64BE)(\n    buffer,\n    frame.lastReceivedPosition,\n    offset\n  );\n  if (frame.data != null) {\n    encoders.data.encode(frame.data, buffer, offset, offset + dataLength);\n  }\n  return buffer;\n}\n\nfunction sizeOfKeepAliveFrame(frame, encoders) {\n  const dataLength =\n    frame.data != null ? encoders.data.byteLength(frame.data) : 0;\n  return FRAME_HEADER_SIZE + KEEPALIVE_FIXED_SIZE + dataLength;\n}\n\n/**\n * Reads a KEEPALIVE frame from the buffer and returns it.\n */\nfunction deserializeKeepAliveFrame(buffer, streamId, flags, encoders) {\n  (0, _invariant.default)(\n    streamId === 0,\n    'RSocketBinaryFraming: Invalid KEEPALIVE frame, expected stream id to be 0.'\n  );\n\n  const length = buffer.length;\n  let offset = FRAME_HEADER_SIZE;\n  const lastReceivedPosition = (0, _RSocketBufferUtils.readUInt64BE)(\n    buffer,\n    offset\n  );\n  offset += 8;\n  let data = null;\n  if (offset < buffer.length) {\n    data = encoders.data.decode(buffer, offset, buffer.length);\n  }\n\n  return {\n    data,\n    flags,\n    lastReceivedPosition,\n    length,\n    streamId,\n    type: _RSocketFrame.FRAME_TYPES.KEEPALIVE,\n  };\n}\n\n/**\n * Writes a LEASE frame into a new buffer and returns it.\n *\n * Prefix size is for the ttl (uint32) and requestcount (uint32).\n */\nconst LEASE_FIXED_SIZE = 8;\nfunction serializeLeaseFrame(frame, encoders) {\n  const metaLength =\n    frame.metadata != null ? encoders.metadata.byteLength(frame.metadata) : 0;\n  const buffer = (0, _RSocketBufferUtils.createBuffer)(\n    FRAME_HEADER_SIZE + LEASE_FIXED_SIZE + metaLength\n  );\n\n  let offset = writeHeader(frame, buffer);\n  offset = buffer.writeUInt32BE(frame.ttl, offset);\n  offset = buffer.writeUInt32BE(frame.requestCount, offset);\n  if (frame.metadata != null) {\n    encoders.metadata.encode(\n      frame.metadata,\n      buffer,\n      offset,\n      offset + metaLength\n    );\n  }\n  return buffer;\n}\n\nfunction sizeOfLeaseFrame(frame, encoders) {\n  const metaLength =\n    frame.metadata != null ? encoders.metadata.byteLength(frame.metadata) : 0;\n  return FRAME_HEADER_SIZE + LEASE_FIXED_SIZE + metaLength;\n}\n\n/**\n * Reads a LEASE frame from the buffer and returns it.\n */\nfunction deserializeLeaseFrame(buffer, streamId, flags, encoders) {\n  (0, _invariant.default)(\n    streamId === 0,\n    'RSocketBinaryFraming: Invalid LEASE frame, expected stream id to be 0.'\n  );\n\n  const length = buffer.length;\n  let offset = FRAME_HEADER_SIZE;\n  const ttl = buffer.readUInt32BE(offset);\n  offset += 4;\n  const requestCount = buffer.readUInt32BE(offset);\n  offset += 4;\n  let metadata = null;\n  if (offset < buffer.length) {\n    metadata = encoders.metadata.decode(buffer, offset, buffer.length);\n  }\n  return {\n    flags,\n    length,\n    metadata,\n    requestCount,\n    streamId,\n    ttl,\n    type: _RSocketFrame.FRAME_TYPES.LEASE,\n  };\n}\n\n/**\n * Writes a REQUEST_FNF or REQUEST_RESPONSE frame to a new buffer and returns\n * it.\n *\n * Note that these frames have the same shape and only differ in their type.\n */\nfunction serializeRequestFrame(frame, encoders) {\n  const payloadLength = getPayloadLength(frame, encoders);\n  const buffer = (0, _RSocketBufferUtils.createBuffer)(\n    FRAME_HEADER_SIZE + payloadLength\n  );\n  const offset = writeHeader(frame, buffer);\n  writePayload(frame, buffer, encoders, offset);\n  return buffer;\n}\n\nfunction sizeOfRequestFrame(frame, encoders) {\n  const payloadLength = getPayloadLength(frame, encoders);\n  return FRAME_HEADER_SIZE + payloadLength;\n}\n\nfunction deserializeRequestFnfFrame(buffer, streamId, flags, encoders) {\n  (0, _invariant.default)(\n    streamId > 0,\n    'RSocketBinaryFraming: Invalid REQUEST_FNF frame, expected stream id to be > 0.'\n  );\n\n  const length = buffer.length;\n  const frame = {\n    data: null,\n    flags,\n    length,\n    metadata: null,\n    streamId,\n    type: _RSocketFrame.FRAME_TYPES.REQUEST_FNF,\n  };\n\n  readPayload(buffer, frame, encoders, FRAME_HEADER_SIZE);\n  return frame;\n}\n\nfunction deserializeRequestResponseFrame(buffer, streamId, flags, encoders) {\n  (0, _invariant.default)(\n    streamId > 0,\n    'RSocketBinaryFraming: Invalid REQUEST_RESPONSE frame, expected stream id to be > 0.'\n  );\n\n  const length = buffer.length;\n  const frame = {\n    data: null,\n    flags,\n    length,\n    metadata: null,\n    streamId,\n    type: _RSocketFrame.FRAME_TYPES.REQUEST_RESPONSE,\n  };\n\n  readPayload(buffer, frame, encoders, FRAME_HEADER_SIZE);\n  return frame;\n}\n\n/**\n * Writes a REQUEST_STREAM or REQUEST_CHANNEL frame to a new buffer and returns\n * it.\n *\n * Note that these frames have the same shape and only differ in their type.\n *\n * Prefix size is for requestN (uint32 = 4).\n */\nconst REQUEST_MANY_HEADER = 4;\nfunction serializeRequestManyFrame(frame, encoders) {\n  const payloadLength = getPayloadLength(frame, encoders);\n  const buffer = (0, _RSocketBufferUtils.createBuffer)(\n    FRAME_HEADER_SIZE + REQUEST_MANY_HEADER + payloadLength\n  );\n\n  let offset = writeHeader(frame, buffer);\n  offset = buffer.writeUInt32BE(frame.requestN, offset);\n  writePayload(frame, buffer, encoders, offset);\n  return buffer;\n}\n\nfunction sizeOfRequestManyFrame(frame, encoders) {\n  const payloadLength = getPayloadLength(frame, encoders);\n  return FRAME_HEADER_SIZE + REQUEST_MANY_HEADER + payloadLength;\n}\n\nfunction deserializeRequestStreamFrame(buffer, streamId, flags, encoders) {\n  (0, _invariant.default)(\n    streamId > 0,\n    'RSocketBinaryFraming: Invalid REQUEST_STREAM frame, expected stream id to be > 0.'\n  );\n\n  const length = buffer.length;\n  let offset = FRAME_HEADER_SIZE;\n  const requestN = buffer.readInt32BE(offset);\n  offset += 4;\n  (0, _invariant.default)(\n    requestN > 0,\n    'RSocketBinaryFraming: Invalid REQUEST_STREAM frame, expected requestN to be > 0, got `%s`.',\n    requestN\n  );\n\n  const frame = {\n    data: null,\n    flags,\n    length,\n    metadata: null,\n    requestN,\n    streamId,\n    type: _RSocketFrame.FRAME_TYPES.REQUEST_STREAM,\n  };\n\n  readPayload(buffer, frame, encoders, offset);\n  return frame;\n}\n\nfunction deserializeRequestChannelFrame(buffer, streamId, flags, encoders) {\n  (0, _invariant.default)(\n    streamId > 0,\n    'RSocketBinaryFraming: Invalid REQUEST_CHANNEL frame, expected stream id to be > 0.'\n  );\n\n  const length = buffer.length;\n  let offset = FRAME_HEADER_SIZE;\n  const requestN = buffer.readInt32BE(offset);\n  offset += 4;\n  (0, _invariant.default)(\n    requestN > 0,\n    'RSocketBinaryFraming: Invalid REQUEST_STREAM frame, expected requestN to be > 0, got `%s`.',\n    requestN\n  );\n\n  const frame = {\n    data: null,\n    flags,\n    length,\n    metadata: null,\n    requestN,\n    streamId,\n    type: _RSocketFrame.FRAME_TYPES.REQUEST_CHANNEL,\n  };\n\n  readPayload(buffer, frame, encoders, offset);\n  return frame;\n}\n\n/**\n * Writes a REQUEST_N frame to a new buffer and returns it.\n *\n * Prefix size is for requestN (uint32 = 4).\n */\nconst REQUEST_N_HEADER = 4;\nfunction serializeRequestNFrame(frame, encoders) {\n  const buffer = (0, _RSocketBufferUtils.createBuffer)(\n    FRAME_HEADER_SIZE + REQUEST_N_HEADER\n  );\n  const offset = writeHeader(frame, buffer);\n  buffer.writeUInt32BE(frame.requestN, offset);\n  return buffer;\n}\n\nfunction sizeOfRequestNFrame(frame, encoders) {\n  return FRAME_HEADER_SIZE + REQUEST_N_HEADER;\n}\n\nfunction deserializeRequestNFrame(buffer, streamId, flags, encoders) {\n  (0, _invariant.default)(\n    streamId > 0,\n    'RSocketBinaryFraming: Invalid REQUEST_N frame, expected stream id to be > 0.'\n  );\n\n  const length = buffer.length;\n  const requestN = buffer.readInt32BE(FRAME_HEADER_SIZE);\n  (0, _invariant.default)(\n    requestN > 0,\n    'RSocketBinaryFraming: Invalid REQUEST_STREAM frame, expected requestN to be > 0, got `%s`.',\n    requestN\n  );\n\n  return {\n    flags,\n    length,\n    requestN,\n    streamId,\n    type: _RSocketFrame.FRAME_TYPES.REQUEST_N,\n  };\n}\n\n/**\n * Writes a CANCEL frame to a new buffer and returns it.\n */\nfunction serializeCancelFrame(frame, encoders) {\n  const buffer = (0, _RSocketBufferUtils.createBuffer)(FRAME_HEADER_SIZE);\n  writeHeader(frame, buffer);\n  return buffer;\n}\n\nfunction sizeOfCancelFrame(frame, encoders) {\n  return FRAME_HEADER_SIZE;\n}\n\nfunction deserializeCancelFrame(buffer, streamId, flags, encoders) {\n  (0, _invariant.default)(\n    streamId > 0,\n    'RSocketBinaryFraming: Invalid CANCEL frame, expected stream id to be > 0.'\n  );\n\n  const length = buffer.length;\n  return {\n    flags,\n    length,\n    streamId,\n    type: _RSocketFrame.FRAME_TYPES.CANCEL,\n  };\n}\n\n/**\n * Writes a PAYLOAD frame to a new buffer and returns it.\n */\nfunction serializePayloadFrame(frame, encoders) {\n  const payloadLength = getPayloadLength(frame, encoders);\n  const buffer = (0, _RSocketBufferUtils.createBuffer)(\n    FRAME_HEADER_SIZE + payloadLength\n  );\n  const offset = writeHeader(frame, buffer);\n  writePayload(frame, buffer, encoders, offset);\n  return buffer;\n}\n\nfunction sizeOfPayloadFrame(frame, encoders) {\n  const payloadLength = getPayloadLength(frame, encoders);\n  return FRAME_HEADER_SIZE + payloadLength;\n}\n\nfunction deserializePayloadFrame(buffer, streamId, flags, encoders) {\n  (0, _invariant.default)(\n    streamId > 0,\n    'RSocketBinaryFraming: Invalid PAYLOAD frame, expected stream id to be > 0.'\n  );\n\n  const length = buffer.length;\n  const frame = {\n    data: null,\n    flags,\n    length,\n    metadata: null,\n    streamId,\n    type: _RSocketFrame.FRAME_TYPES.PAYLOAD,\n  };\n\n  readPayload(buffer, frame, encoders, FRAME_HEADER_SIZE);\n  return frame;\n}\n\n/**\n * Writes a RESUME frame into a new buffer and returns it.\n *\n * Fixed size is:\n * - major version (uint16 = 2)\n * - minor version (uint16 = 2)\n * - token length (uint16 = 2)\n * - client position (uint64 = 8)\n * - server position (uint64 = 8)\n */\nconst RESUME_FIXED_SIZE = 22;\nfunction serializeResumeFrame(frame, encoders) {\n  const resumeTokenLength = encoders.resumeToken.byteLength(frame.resumeToken);\n  const buffer = (0, _RSocketBufferUtils.createBuffer)(\n    FRAME_HEADER_SIZE + RESUME_FIXED_SIZE + resumeTokenLength\n  );\n\n  let offset = writeHeader(frame, buffer);\n  offset = buffer.writeUInt16BE(frame.majorVersion, offset);\n  offset = buffer.writeUInt16BE(frame.minorVersion, offset);\n  offset = buffer.writeUInt16BE(resumeTokenLength, offset);\n  offset = encoders.resumeToken.encode(\n    frame.resumeToken,\n    buffer,\n    offset,\n    offset + resumeTokenLength\n  );\n\n  offset = (0, _RSocketBufferUtils.writeUInt64BE)(\n    buffer,\n    frame.serverPosition,\n    offset\n  );\n  (0, _RSocketBufferUtils.writeUInt64BE)(buffer, frame.clientPosition, offset);\n  return buffer;\n}\n\nfunction sizeOfResumeFrame(frame, encoders) {\n  const resumeTokenLength = encoders.resumeToken.byteLength(frame.resumeToken);\n  return FRAME_HEADER_SIZE + RESUME_FIXED_SIZE + resumeTokenLength;\n}\n\nfunction deserializeResumeFrame(buffer, streamId, flags, encoders) {\n  (0, _invariant.default)(\n    streamId === 0,\n    'RSocketBinaryFraming: Invalid RESUME frame, expected stream id to be 0.'\n  );\n\n  const length = buffer.length;\n  let offset = FRAME_HEADER_SIZE;\n  const majorVersion = buffer.readUInt16BE(offset);\n  offset += 2;\n  const minorVersion = buffer.readUInt16BE(offset);\n  offset += 2;\n\n  const resumeTokenLength = buffer.readInt16BE(offset);\n  offset += 2;\n  (0, _invariant.default)(\n    resumeTokenLength >= 0 &&\n      resumeTokenLength <= _RSocketFrame.MAX_RESUME_LENGTH,\n    'RSocketBinaryFraming: Invalid SETUP frame, expected resumeToken length ' +\n      'to be >= 0 and <= %s. Got `%s`.',\n    _RSocketFrame.MAX_RESUME_LENGTH,\n    resumeTokenLength\n  );\n\n  const resumeToken = encoders.resumeToken.decode(\n    buffer,\n    offset,\n    offset + resumeTokenLength\n  );\n\n  offset += resumeTokenLength;\n  const serverPosition = (0, _RSocketBufferUtils.readUInt64BE)(buffer, offset);\n  offset += 8;\n  const clientPosition = (0, _RSocketBufferUtils.readUInt64BE)(buffer, offset);\n  offset += 8;\n  return {\n    clientPosition,\n    flags,\n    length,\n    majorVersion,\n    minorVersion,\n    resumeToken,\n    serverPosition,\n    streamId,\n    type: _RSocketFrame.FRAME_TYPES.RESUME,\n  };\n}\n\n/**\n * Writes a RESUME_OK frame into a new buffer and returns it.\n *\n * Fixed size is:\n * - client position (uint64 = 8)\n */\nconst RESUME_OK_FIXED_SIZE = 8;\nfunction serializeResumeOkFrame(frame, encoders) {\n  const buffer = (0, _RSocketBufferUtils.createBuffer)(\n    FRAME_HEADER_SIZE + RESUME_OK_FIXED_SIZE\n  );\n  const offset = writeHeader(frame, buffer);\n  (0, _RSocketBufferUtils.writeUInt64BE)(buffer, frame.clientPosition, offset);\n  return buffer;\n}\n\nfunction sizeOfResumeOkFrame(frame, encoders) {\n  return FRAME_HEADER_SIZE + RESUME_OK_FIXED_SIZE;\n}\n\nfunction deserializeResumeOkFrame(buffer, streamId, flags, encoders) {\n  (0, _invariant.default)(\n    streamId === 0,\n    'RSocketBinaryFraming: Invalid RESUME frame, expected stream id to be 0.'\n  );\n\n  const length = buffer.length;\n  const clientPosition = (0, _RSocketBufferUtils.readUInt64BE)(\n    buffer,\n    FRAME_HEADER_SIZE\n  );\n  return {\n    clientPosition,\n    flags,\n    length,\n    streamId,\n    type: _RSocketFrame.FRAME_TYPES.RESUME_OK,\n  };\n}\n\n/**\n * Write the header of the frame into the buffer.\n */\nfunction writeHeader(frame, buffer) {\n  const offset = buffer.writeInt32BE(frame.streamId, 0);\n  // shift frame to high 6 bits, extract lowest 10 bits from flags\n  return buffer.writeUInt16BE(\n    (frame.type << _RSocketFrame.FRAME_TYPE_OFFFSET) |\n      (frame.flags & _RSocketFrame.FLAGS_MASK),\n    offset\n  );\n}\n\n/**\n * Determine the length of the payload section of a frame. Only applies to\n * frame types that MAY have both metadata and data.\n */\nfunction getPayloadLength(frame, encoders) {\n  let payloadLength = 0;\n  if (frame.data != null) {\n    payloadLength += encoders.data.byteLength(frame.data);\n  }\n  if ((0, _RSocketFrame.isMetadata)(frame.flags)) {\n    payloadLength += UINT24_SIZE;\n    if (frame.metadata != null) {\n      payloadLength += encoders.metadata.byteLength(frame.metadata);\n    }\n  }\n  return payloadLength;\n}\n\n/**\n * Write the payload of a frame into the given buffer. Only applies to frame\n * types that MAY have both metadata and data.\n */\nfunction writePayload(frame, buffer, encoders, offset) {\n  if ((0, _RSocketFrame.isMetadata)(frame.flags)) {\n    if (frame.metadata != null) {\n      const metaLength = encoders.metadata.byteLength(frame.metadata);\n      offset = (0, _RSocketBufferUtils.writeUInt24BE)(\n        buffer,\n        metaLength,\n        offset\n      );\n      offset = encoders.metadata.encode(\n        frame.metadata,\n        buffer,\n        offset,\n        offset + metaLength\n      );\n    } else {\n      offset = (0, _RSocketBufferUtils.writeUInt24BE)(buffer, 0, offset);\n    }\n  }\n  if (frame.data != null) {\n    encoders.data.encode(frame.data, buffer, offset, buffer.length);\n  }\n}\n\n/**\n * Read the payload from a buffer and write it into the frame. Only applies to\n * frame types that MAY have both metadata and data.\n */\nfunction readPayload(buffer, frame, encoders, offset) {\n  if ((0, _RSocketFrame.isMetadata)(frame.flags)) {\n    const metaLength = (0, _RSocketBufferUtils.readUInt24BE)(buffer, offset);\n    offset += UINT24_SIZE;\n    if (metaLength > 0) {\n      frame.metadata = encoders.metadata.decode(\n        buffer,\n        offset,\n        offset + metaLength\n      );\n\n      offset += metaLength;\n    }\n  }\n  if (offset < buffer.length) {\n    frame.data = encoders.data.decode(buffer, offset, buffer.length);\n  }\n}\n\n\n//# sourceURL=webpack://rsocket-demo/./node_modules/rsocket-core/build/RSocketBinaryFraming.js?");

/***/ }),

/***/ "./node_modules/rsocket-core/build/RSocketBufferUtils.js":
/*!***************************************************************!*\
  !*** ./node_modules/rsocket-core/build/RSocketBufferUtils.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/** Copyright (c) Facebook, Inc. and its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n */\n\n\n\n/* eslint-disable no-bitwise */ Object.defineProperty(exports, \"__esModule\", ({\n  value: true,\n}));\nexports.readUInt24BE = readUInt24BE;\nexports.writeUInt24BE = writeUInt24BE;\nexports.readUInt64BE = readUInt64BE;\nexports.writeUInt64BE = writeUInt64BE;\nexports.byteLength = byteLength;\nexports.createBuffer = exports.toBuffer = void 0;\n\nvar _LiteBuffer = __webpack_require__(/*! ./LiteBuffer */ \"./node_modules/rsocket-core/build/LiteBuffer.js\");\n\n/**\n * Mimimum value that would overflow bitwise operators (2^32).\n */\nconst BITWISE_OVERFLOW = 0x100000000;\n\n/**\n * Read a uint24 from a buffer starting at the given offset.\n */\nfunction readUInt24BE(buffer, offset) {\n  const val1 = buffer.readUInt8(offset) << 16;\n  const val2 = buffer.readUInt8(offset + 1) << 8;\n  const val3 = buffer.readUInt8(offset + 2);\n  return val1 | val2 | val3;\n}\n\n/**\n * Writes a uint24 to a buffer starting at the given offset, returning the\n * offset of the next byte.\n */\nfunction writeUInt24BE(buffer, value, offset) {\n  offset = buffer.writeUInt8(value >>> 16, offset); // 3rd byte\n  offset = buffer.writeUInt8((value >>> 8) & 0xff, offset); // 2nd byte\n  return buffer.writeUInt8(value & 0xff, offset); // 1st byte\n}\n\n/**\n * Read a uint64 (technically supports up to 53 bits per JS number\n * representation).\n */\nfunction readUInt64BE(buffer, offset) {\n  const high = buffer.readUInt32BE(offset);\n  const low = buffer.readUInt32BE(offset + 4);\n  return high * BITWISE_OVERFLOW + low;\n}\n\n/**\n * Write a uint64 (technically supports up to 53 bits per JS number\n * representation).\n */\nfunction writeUInt64BE(buffer, value, offset) {\n  const high = (value / BITWISE_OVERFLOW) | 0;\n  const low = value % BITWISE_OVERFLOW;\n  offset = buffer.writeUInt32BE(high, offset); // first half of uint64\n  return buffer.writeUInt32BE(low, offset); // second half of uint64\n}\n\n/**\n * Determine the number of bytes it would take to encode the given data with the\n * given encoding.\n */\nfunction byteLength(data, encoding) {\n  if (data == null) {\n    return 0;\n  }\n  return _LiteBuffer.LiteBuffer.byteLength(data, encoding);\n}\n\n/**\n * Attempts to construct a buffer from the input, throws if invalid.\n */\nconst toBuffer =\n  typeof _LiteBuffer.LiteBuffer.from === 'function'\n    ? (...args) => {\n        // Buffer.from(buffer) copies which we don't want here\n        if (args[0] instanceof _LiteBuffer.LiteBuffer) {\n          return args[0];\n        }\n        return _LiteBuffer.LiteBuffer.from.apply(_LiteBuffer.LiteBuffer, args);\n      }\n    : (...args) => {\n        // Buffer.from(buffer) copies which we don't want here\n        if (args[0] instanceof _LiteBuffer.LiteBuffer) {\n          return args[0];\n        }\n        return new (_LiteBuffer.LiteBuffer.bind.apply(_LiteBuffer.LiteBuffer, [\n          _LiteBuffer.LiteBuffer,\n          ...args,\n        ]))();\n      };\n\n/**\n * Function to create a buffer of a given sized filled with zeros.\n */ exports.toBuffer = toBuffer;\nconst createBuffer =\n  typeof _LiteBuffer.LiteBuffer.alloc === 'function'\n    ? (length) => _LiteBuffer.LiteBuffer.alloc(length)\n    : // $FlowFixMe\n      (length) => new _LiteBuffer.LiteBuffer(length).fill(0);\nexports.createBuffer = createBuffer;\n\n\n//# sourceURL=webpack://rsocket-demo/./node_modules/rsocket-core/build/RSocketBufferUtils.js?");

/***/ }),

/***/ "./node_modules/rsocket-core/build/RSocketClient.js":
/*!**********************************************************!*\
  !*** ./node_modules/rsocket-core/build/RSocketClient.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/** Copyright (c) Facebook, Inc. and its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n */\n\n\nObject.defineProperty(exports, \"__esModule\", ({value: true}));\nexports.default = void 0;\n\nvar _rsocketFlowable = __webpack_require__(/*! rsocket-flowable */ \"./node_modules/rsocket-flowable/build/index.js\");\nvar _invariant = _interopRequireDefault(__webpack_require__(/*! fbjs/lib/invariant */ \"./node_modules/fbjs/lib/invariant.js\"));\nvar _RSocketFrame = __webpack_require__(/*! ./RSocketFrame */ \"./node_modules/rsocket-core/build/RSocketFrame.js\");\nvar _RSocketVersion = __webpack_require__(/*! ./RSocketVersion */ \"./node_modules/rsocket-core/build/RSocketVersion.js\");\nvar _RSocketMachine = __webpack_require__(/*! ./RSocketMachine */ \"./node_modules/rsocket-core/build/RSocketMachine.js\");\nvar _RSocketLease = __webpack_require__(/*! ./RSocketLease */ \"./node_modules/rsocket-core/build/RSocketLease.js\");\n\nvar _RSocketSerialization = __webpack_require__(/*! ./RSocketSerialization */ \"./node_modules/rsocket-core/build/RSocketSerialization.js\");\nvar _ReassemblyDuplexConnection = __webpack_require__(/*! ./ReassemblyDuplexConnection */ \"./node_modules/rsocket-core/build/ReassemblyDuplexConnection.js\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n/**\n * RSocketClient: A client in an RSocket connection that will communicates with\n * the peer via the given transport client. Provides methods for establishing a\n * connection and initiating the RSocket interactions:\n * - fireAndForget()\n * - requestResponse()\n * - requestStream()\n * - requestChannel()\n * - metadataPush()\n */\nclass RSocketClient {\n  constructor(config) {\n    this._checkConfig(config);\n    this._cancel = null;\n    this._config = config;\n    this._connection = null;\n    this._socket = null;\n  }\n\n  close() {\n    this._config.transport.close();\n  }\n\n  connect() {\n    (0, _invariant.default)(\n      !this._connection,\n      'RSocketClient: Unexpected call to connect(), already connected.'\n    );\n\n    this._connection = new _rsocketFlowable.Single((subscriber) => {\n      const transport = this._config.transport;\n      let subscription;\n      transport.connectionStatus().subscribe({\n        onNext: (status) => {\n          if (status.kind === 'CONNECTED') {\n            subscription && subscription.cancel();\n            subscriber.onComplete(\n              new RSocketClientSocket(\n                this._config,\n                new _ReassemblyDuplexConnection.ReassemblyDuplexConnection(\n                  transport\n                )\n              )\n            );\n          } else if (status.kind === 'ERROR') {\n            subscription && subscription.cancel();\n            subscriber.onError(status.error);\n          } else if (status.kind === 'CLOSED') {\n            subscription && subscription.cancel();\n            subscriber.onError(new Error('RSocketClient: Connection closed.'));\n          }\n        },\n        onSubscribe: (_subscription) => {\n          subscription = _subscription;\n          subscriber.onSubscribe(() => {\n            _subscription.cancel();\n            transport.close();\n          });\n          subscription.request(Number.MAX_SAFE_INTEGER);\n        },\n      });\n\n      transport.connect();\n    });\n    return this._connection;\n  }\n\n  _checkConfig(config) {\n    const setup = config.setup;\n    const keepAlive = setup && setup.keepAlive;\n    // wrap in try catch since in 'strict' mode the access to an unexciting window will throw\n    // the ReferenceError: window is not defined exception\n    try {\n      // eslint-disable-next-line no-undef\n      const navigator = window && window.navigator;\n      if (\n        keepAlive > 30000 &&\n        navigator &&\n        navigator.userAgent &&\n        (navigator.userAgent.includes('Trident') ||\n          navigator.userAgent.includes('Edg'))\n      ) {\n        console.warn(\n          'rsocket-js: Due to a browser bug, Internet Explorer and Edge users may experience WebSocket instability with keepAlive values longer than 30 seconds.'\n        );\n      }\n    } catch (e) {\n      // ignore the error since it means that the code is running in non browser environment\n    }\n  }\n}\n\n/**\n * @private\n */ exports.default = RSocketClient;\nclass RSocketClientSocket {\n  constructor(config, connection) {\n    let requesterLeaseHandler;\n    let responderLeaseHandler;\n\n    const leasesSupplier = config.leases;\n    if (leasesSupplier) {\n      const lease = leasesSupplier();\n      requesterLeaseHandler = new _RSocketLease.RequesterLeaseHandler(\n        lease._receiver\n      );\n      responderLeaseHandler = new _RSocketLease.ResponderLeaseHandler(\n        lease._sender,\n        lease._stats\n      );\n    }\n    const {keepAlive, lifetime} = config.setup;\n\n    this._machine = (0, _RSocketMachine.createClientMachine)(\n      connection,\n      (subscriber) => connection.receive().subscribe(subscriber),\n      lifetime,\n      config.serializers,\n      config.responder,\n      config.errorHandler,\n      requesterLeaseHandler,\n      responderLeaseHandler\n    );\n\n    // Send SETUP\n    connection.sendOne(this._buildSetupFrame(config));\n\n    // Send KEEPALIVE frames\n    const keepAliveFrames = (0, _rsocketFlowable.every)(keepAlive).map(() => ({\n      data: null,\n      flags: _RSocketFrame.FLAGS.RESPOND,\n      lastReceivedPosition: 0,\n      streamId: _RSocketFrame.CONNECTION_STREAM_ID,\n      type: _RSocketFrame.FRAME_TYPES.KEEPALIVE,\n    }));\n\n    connection.send(keepAliveFrames);\n  }\n\n  fireAndForget(payload) {\n    this._machine.fireAndForget(payload);\n  }\n\n  requestResponse(payload) {\n    return this._machine.requestResponse(payload);\n  }\n\n  requestStream(payload) {\n    return this._machine.requestStream(payload);\n  }\n\n  requestChannel(payloads) {\n    return this._machine.requestChannel(payloads);\n  }\n\n  metadataPush(payload) {\n    return this._machine.metadataPush(payload);\n  }\n\n  close() {\n    this._machine.close();\n  }\n\n  connectionStatus() {\n    return this._machine.connectionStatus();\n  }\n\n  availability() {\n    return this._machine.availability();\n  }\n\n  _buildSetupFrame(config) {\n    const {\n      dataMimeType,\n      keepAlive,\n      lifetime,\n      metadataMimeType,\n      payload,\n    } = config.setup;\n\n    const serializers =\n      config.serializers || _RSocketSerialization.IdentitySerializers;\n    const data = payload ? serializers.data.serialize(payload.data) : undefined;\n    const metadata = payload\n      ? serializers.metadata.serialize(payload.metadata)\n      : undefined;\n    let flags = 0;\n    if (metadata !== undefined) {\n      flags |= _RSocketFrame.FLAGS.METADATA;\n    }\n    return {\n      data,\n      dataMimeType,\n      flags: flags | (config.leases ? _RSocketFrame.FLAGS.LEASE : 0),\n      keepAlive,\n      lifetime,\n      majorVersion: _RSocketVersion.MAJOR_VERSION,\n      metadata,\n      metadataMimeType,\n      minorVersion: _RSocketVersion.MINOR_VERSION,\n      resumeToken: null,\n      streamId: _RSocketFrame.CONNECTION_STREAM_ID,\n      type: _RSocketFrame.FRAME_TYPES.SETUP,\n    };\n  }\n}\n\n\n//# sourceURL=webpack://rsocket-demo/./node_modules/rsocket-core/build/RSocketClient.js?");

/***/ }),

/***/ "./node_modules/rsocket-core/build/RSocketEncoding.js":
/*!************************************************************!*\
  !*** ./node_modules/rsocket-core/build/RSocketEncoding.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/** Copyright (c) Facebook, Inc. and its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n */\n\n\nObject.defineProperty(exports, \"__esModule\", ({value: true}));\nexports.BufferEncoders = exports.Utf8Encoders = exports.BufferEncoder = exports.UTF8Encoder = void 0;\n\nvar _RSocketBufferUtils = __webpack_require__(/*! ./RSocketBufferUtils */ \"./node_modules/rsocket-core/build/RSocketBufferUtils.js\");\nvar _invariant = _interopRequireDefault(__webpack_require__(/*! fbjs/lib/invariant */ \"./node_modules/fbjs/lib/invariant.js\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nconst UTF8Encoder = {\n  byteLength: (value) => (0, _RSocketBufferUtils.byteLength)(value, 'utf8'),\n  decode: (buffer, start, end) => {\n    return buffer.toString('utf8', start, end);\n  },\n  encode: (value, buffer, start, end) => {\n    (0, _invariant.default)(\n      typeof value === 'string',\n      'RSocketEncoding: Expected value to be a string, got `%s`.',\n      value\n    );\n\n    buffer.write(value, start, end - start, 'utf8');\n    return end;\n  },\n};\nexports.UTF8Encoder = UTF8Encoder;\n\nconst BufferEncoder = {\n  byteLength: (value) => {\n    (0, _invariant.default)(\n      Buffer.isBuffer(value),\n      'RSocketEncoding: Expected value to be a buffer, got `%s`.',\n      value\n    );\n\n    return value.length;\n  },\n  decode: (buffer, start, end) => {\n    return buffer.slice(start, end);\n  },\n  encode: (value, buffer, start, end) => {\n    (0, _invariant.default)(\n      Buffer.isBuffer(value),\n      'RSocketEncoding: Expected value to be a buffer, got `%s`.',\n      value\n    );\n\n    value.copy(buffer, start, 0, value.length);\n    return end;\n  },\n};\n\n/**\n * Encode all values as UTF8 strings.\n */ exports.BufferEncoder = BufferEncoder;\nconst Utf8Encoders = {\n  data: UTF8Encoder,\n  dataMimeType: UTF8Encoder,\n  message: UTF8Encoder,\n  metadata: UTF8Encoder,\n  metadataMimeType: UTF8Encoder,\n  resumeToken: UTF8Encoder,\n};\n\n/**\n * Encode all values as buffers.\n */ exports.Utf8Encoders = Utf8Encoders;\nconst BufferEncoders = {\n  data: BufferEncoder,\n  dataMimeType: UTF8Encoder,\n  message: UTF8Encoder,\n  metadata: BufferEncoder,\n  metadataMimeType: UTF8Encoder,\n  resumeToken: BufferEncoder,\n};\nexports.BufferEncoders = BufferEncoders;\n\n\n//# sourceURL=webpack://rsocket-demo/./node_modules/rsocket-core/build/RSocketEncoding.js?");

/***/ }),

/***/ "./node_modules/rsocket-core/build/RSocketFrame.js":
/*!*********************************************************!*\
  !*** ./node_modules/rsocket-core/build/RSocketFrame.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/** Copyright (c) Facebook, Inc. and its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n */\n\n\n/* eslint-disable max-len, no-bitwise */ Object.defineProperty(exports, \"__esModule\", ({value: true}));\nexports.isIgnore = isIgnore;\nexports.isMetadata = isMetadata;\nexports.isComplete = isComplete;\nexports.isNext = isNext;\nexports.isRespond = isRespond;\nexports.isResumeEnable = isResumeEnable;\nexports.isLease = isLease;\nexports.isFollows = isFollows;\nexports.isResumePositionFrameType = isResumePositionFrameType;\nexports.getFrameTypeName = getFrameTypeName;\nexports.createErrorFromFrame = createErrorFromFrame;\nexports.getErrorCodeExplanation = getErrorCodeExplanation;\nexports.printFrame = printFrame;\nexports.MAX_VERSION = exports.MAX_TTL = exports.MAX_STREAM_ID = exports.MAX_RESUME_LENGTH = exports.MAX_REQUEST_N = exports.MAX_REQUEST_COUNT = exports.MAX_MIME_LENGTH = exports.MAX_METADATA_LENGTH = exports.MAX_LIFETIME = exports.MAX_KEEPALIVE = exports.MAX_CODE = exports.FRAME_TYPE_OFFFSET = exports.FLAGS_MASK = exports.ERROR_EXPLANATIONS = exports.ERROR_CODES = exports.FLAGS = exports.FRAME_TYPE_NAMES = exports.FRAME_TYPES = exports.CONNECTION_STREAM_ID = void 0;\n\nvar _forEachObject = _interopRequireDefault(__webpack_require__(/*! fbjs/lib/forEachObject */ \"./node_modules/fbjs/lib/forEachObject.js\"));\nvar _sprintf = _interopRequireDefault(__webpack_require__(/*! fbjs/lib/sprintf */ \"./node_modules/fbjs/lib/sprintf.js\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly)\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(\n          target,\n          key,\n          Object.getOwnPropertyDescriptor(source, key)\n        );\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true,\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nconst CONNECTION_STREAM_ID = 0;\nexports.CONNECTION_STREAM_ID = CONNECTION_STREAM_ID;\n\nconst FRAME_TYPES = {\n  CANCEL: 0x09, // Cancel Request: Cancel outstanding request.\n  ERROR: 0x0b, // Error: Error at connection or application level.\n  EXT: 0x3f, // Extension Header: Used To Extend more frame types as well as extensions.\n  KEEPALIVE: 0x03, // Keepalive: Connection keepalive.\n  LEASE: 0x02, // Lease: Sent by Responder to grant the ability to send requests.\n  METADATA_PUSH: 0x0c, // Metadata: Asynchronous Metadata frame\n  PAYLOAD: 0x0a, // Payload: Payload on a stream. For example, response to a request, or message on a channel.\n  REQUEST_CHANNEL: 0x07, // Request Channel: Request a completable stream in both directions.\n  REQUEST_FNF: 0x05, // Fire And Forget: A single one-way message.\n  REQUEST_N: 0x08, // Request N: Request N more items with Reactive Streams semantics.\n  REQUEST_RESPONSE: 0x04, // Request Response: Request single response.\n  REQUEST_STREAM: 0x06, // Request Stream: Request a completable stream.\n  RESERVED: 0x00, // Reserved\n  RESUME: 0x0d, // Resume: Replaces SETUP for Resuming Operation (optional)\n  RESUME_OK: 0x0e, // Resume OK : Sent in response to a RESUME if resuming operation possible (optional)\n  SETUP: 0x01, // Setup: Sent by client to initiate protocol processing.\n};\n\n// Maps frame type codes to type names\nexports.FRAME_TYPES = FRAME_TYPES;\nconst FRAME_TYPE_NAMES = {};\nexports.FRAME_TYPE_NAMES = FRAME_TYPE_NAMES;\n(0, _forEachObject.default)(FRAME_TYPES, (value, name) => {\n  FRAME_TYPE_NAMES[value] = name;\n});\n\nconst FLAGS = {\n  COMPLETE: 0x40, // PAYLOAD, REQUEST_CHANNEL: indicates stream completion, if set onComplete will be invoked on receiver.\n  FOLLOWS: 0x80, // PAYLOAD, REQUEST_XXX: indicates that frame was fragmented and requires reassembly\n  IGNORE: 0x200, // (all): Ignore frame if not understood.\n  LEASE: 0x40, // SETUP: Will honor lease or not.\n  METADATA: 0x100, // (all): must be set if metadata is present in the frame.\n  NEXT: 0x20, // PAYLOAD: indicates data/metadata present, if set onNext will be invoked on receiver.\n  RESPOND: 0x80, // KEEPALIVE: should KEEPALIVE be sent by peer on receipt.\n  RESUME_ENABLE: 0x80, // SETUP: Client requests resume capability if possible. Resume Identification Token present.\n};\n\n// Maps error names to codes\nexports.FLAGS = FLAGS;\nconst ERROR_CODES = {\n  APPLICATION_ERROR: 0x00000201,\n  CANCELED: 0x00000203,\n  CONNECTION_CLOSE: 0x00000102,\n  CONNECTION_ERROR: 0x00000101,\n  INVALID: 0x00000204,\n  INVALID_SETUP: 0x00000001,\n  REJECTED: 0x00000202,\n  REJECTED_RESUME: 0x00000004,\n  REJECTED_SETUP: 0x00000003,\n  RESERVED: 0x00000000,\n  RESERVED_EXTENSION: 0xffffffff,\n  UNSUPPORTED_SETUP: 0x00000002,\n};\n\n// Maps error codes to names\nexports.ERROR_CODES = ERROR_CODES;\nconst ERROR_EXPLANATIONS = {};\nexports.ERROR_EXPLANATIONS = ERROR_EXPLANATIONS;\n(0, _forEachObject.default)(ERROR_CODES, (code, explanation) => {\n  ERROR_EXPLANATIONS[code] = explanation;\n});\n\nconst FLAGS_MASK = 0x3ff; // low 10 bits\nexports.FLAGS_MASK = FLAGS_MASK;\nconst FRAME_TYPE_OFFFSET = 10; // frame type is offset 10 bytes within the uint16 containing type + flags\nexports.FRAME_TYPE_OFFFSET = FRAME_TYPE_OFFFSET;\nconst MAX_CODE = 0x7fffffff; // uint31\nexports.MAX_CODE = MAX_CODE;\nconst MAX_KEEPALIVE = 0x7fffffff; // uint31\nexports.MAX_KEEPALIVE = MAX_KEEPALIVE;\nconst MAX_LIFETIME = 0x7fffffff; // uint31\nexports.MAX_LIFETIME = MAX_LIFETIME;\nconst MAX_METADATA_LENGTH = 0xffffff; // uint24\nexports.MAX_METADATA_LENGTH = MAX_METADATA_LENGTH;\nconst MAX_MIME_LENGTH = 0xff; // int8\nexports.MAX_MIME_LENGTH = MAX_MIME_LENGTH;\nconst MAX_REQUEST_COUNT = 0x7fffffff; // uint31\nexports.MAX_REQUEST_COUNT = MAX_REQUEST_COUNT;\nconst MAX_REQUEST_N = 0x7fffffff; // uint31\nexports.MAX_REQUEST_N = MAX_REQUEST_N;\nconst MAX_RESUME_LENGTH = 0xffff; // uint16\nexports.MAX_RESUME_LENGTH = MAX_RESUME_LENGTH;\nconst MAX_STREAM_ID = 0x7fffffff; // uint31\nexports.MAX_STREAM_ID = MAX_STREAM_ID;\nconst MAX_TTL = 0x7fffffff; // uint31\nexports.MAX_TTL = MAX_TTL;\nconst MAX_VERSION = 0xffff; // uint16\n\n/**\n * Returns true iff the flags have the IGNORE bit set.\n */ exports.MAX_VERSION = MAX_VERSION;\nfunction isIgnore(flags) {\n  return (flags & FLAGS.IGNORE) === FLAGS.IGNORE;\n}\n\n/**\n * Returns true iff the flags have the METADATA bit set.\n */\nfunction isMetadata(flags) {\n  return (flags & FLAGS.METADATA) === FLAGS.METADATA;\n}\n\n/**\n * Returns true iff the flags have the COMPLETE bit set.\n */\nfunction isComplete(flags) {\n  return (flags & FLAGS.COMPLETE) === FLAGS.COMPLETE;\n}\n\n/**\n * Returns true iff the flags have the NEXT bit set.\n */\nfunction isNext(flags) {\n  return (flags & FLAGS.NEXT) === FLAGS.NEXT;\n}\n\n/**\n * Returns true iff the flags have the RESPOND bit set.\n */\nfunction isRespond(flags) {\n  return (flags & FLAGS.RESPOND) === FLAGS.RESPOND;\n}\n\n/**\n * Returns true iff the flags have the RESUME_ENABLE bit set.\n */\nfunction isResumeEnable(flags) {\n  return (flags & FLAGS.RESUME_ENABLE) === FLAGS.RESUME_ENABLE;\n}\n\n/**\n * Returns true iff the flags have the LEASE bit set.\n */\nfunction isLease(flags) {\n  return (flags & FLAGS.LEASE) === FLAGS.LEASE;\n}\n\nfunction isFollows(flags) {\n  return (flags & FLAGS.FOLLOWS) === FLAGS.FOLLOWS;\n}\n\n/**\n * Returns true iff the frame type is counted toward the implied\n * client/server position used for the resumption protocol.\n */\nfunction isResumePositionFrameType(type) {\n  return (\n    type === FRAME_TYPES.CANCEL ||\n    type === FRAME_TYPES.ERROR ||\n    type === FRAME_TYPES.PAYLOAD ||\n    type === FRAME_TYPES.REQUEST_CHANNEL ||\n    type === FRAME_TYPES.REQUEST_FNF ||\n    type === FRAME_TYPES.REQUEST_RESPONSE ||\n    type === FRAME_TYPES.REQUEST_STREAM ||\n    type === FRAME_TYPES.REQUEST_N\n  );\n}\n\nfunction getFrameTypeName(type) {\n  const name = FRAME_TYPE_NAMES[type];\n  return name != null ? name : toHex(type);\n}\n\n/**\n * Constructs an Error object given the contents of an error frame. The\n * `source` property contains metadata about the error for use in introspecting\n * the error at runtime:\n * - `error.source.code: number`: the error code returned by the server.\n * - `error.source.explanation: string`: human-readable explanation of the code\n *   (this value is not standardized and may change).\n * - `error.source.message: string`: the error string returned by the server.\n */\nfunction createErrorFromFrame(frame) {\n  const {code, message} = frame;\n  const explanation = getErrorCodeExplanation(code);\n  const error = new Error(\n    (0, _sprintf.default)(\n      'RSocket error %s (%s): %s. See error `source` property for details.',\n      toHex(code),\n      explanation,\n      message\n    )\n  );\n\n  error.source = {\n    code,\n    explanation,\n    message,\n  };\n\n  return error;\n}\n\n/**\n * Given a RSocket error code, returns a human-readable explanation of that\n * code, following the names used in the protocol specification.\n */\nfunction getErrorCodeExplanation(code) {\n  const explanation = ERROR_EXPLANATIONS[code];\n  if (explanation != null) {\n    return explanation;\n  } else if (code <= 0x00300) {\n    return 'RESERVED (PROTOCOL)';\n  } else {\n    return 'RESERVED (APPLICATION)';\n  }\n}\n\n/**\n * Pretty-prints the frame for debugging purposes, with types, flags, and\n * error codes annotated with descriptive names.\n */\nfunction printFrame(frame) {\n  const obj = _objectSpread({}, frame);\n  obj.type = getFrameTypeName(frame.type) + ` (${toHex(frame.type)})`;\n  const flagNames = [];\n  (0, _forEachObject.default)(FLAGS, (flag, name) => {\n    if ((frame.flags & flag) === flag) {\n      flagNames.push(name);\n    }\n  });\n  if (!flagNames.length) {\n    flagNames.push('NO FLAGS');\n  }\n  obj.flags = flagNames.join(' | ') + ` (${toHex(frame.flags)})`;\n  if (frame.type === FRAME_TYPES.ERROR) {\n    obj.code = getErrorCodeExplanation(frame.code) + ` (${toHex(frame.code)})`;\n  }\n  return JSON.stringify(obj, null, 2);\n}\n\nfunction toHex(n) {\n  return '0x' + n.toString(16);\n}\n\n\n//# sourceURL=webpack://rsocket-demo/./node_modules/rsocket-core/build/RSocketFrame.js?");

/***/ }),

/***/ "./node_modules/rsocket-core/build/RSocketLease.js":
/*!*********************************************************!*\
  !*** ./node_modules/rsocket-core/build/RSocketLease.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/** Copyright 2015-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", ({value: true}));\nexports.ResponderLeaseHandler = exports.RequesterLeaseHandler = exports.Leases = exports.Lease = void 0;\n\nvar _invariant = _interopRequireDefault(__webpack_require__(/*! fbjs/lib/invariant */ \"./node_modules/fbjs/lib/invariant.js\"));\nvar _rsocketFlowable = __webpack_require__(/*! rsocket-flowable */ \"./node_modules/rsocket-flowable/build/index.js\");\n\nvar _RSocketFrame = __webpack_require__(/*! ./RSocketFrame */ \"./node_modules/rsocket-core/build/RSocketFrame.js\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true,\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nclass Lease {\n  constructor(timeToLiveMillis, allowedRequests, metadata) {\n    (0, _invariant.default)(\n      timeToLiveMillis > 0,\n      'Lease time-to-live must be positive'\n    );\n    (0, _invariant.default)(\n      allowedRequests > 0,\n      'Lease allowed requests must be positive'\n    );\n    this.timeToLiveMillis = timeToLiveMillis;\n    this.allowedRequests = allowedRequests;\n    this.startingAllowedRequests = allowedRequests;\n    this.expiry = Date.now() + timeToLiveMillis;\n    this.metadata = metadata;\n  }\n\n  expired() {\n    return Date.now() > this.expiry;\n  }\n\n  valid() {\n    return this.allowedRequests > 0 && !this.expired();\n  }\n\n  // todo hide\n  _use() {\n    if (this.expired()) {\n      return false;\n    }\n    const allowed = this.allowedRequests;\n    const success = allowed > 0;\n    if (success) {\n      this.allowedRequests = allowed - 1;\n    }\n    return success;\n  }\n}\nexports.Lease = Lease;\n\nclass Leases {\n  constructor() {\n    _defineProperty(this, '_sender', () => _rsocketFlowable.Flowable.never());\n    _defineProperty(this, '_receiver', (leases) => {});\n  }\n\n  sender(sender) {\n    this._sender = sender;\n    return this;\n  }\n\n  receiver(receiver) {\n    this._receiver = receiver;\n    return this;\n  }\n\n  stats(stats) {\n    this._stats = stats;\n    return this;\n  }\n}\nexports.Leases = Leases;\n\nclass RequesterLeaseHandler {\n  /*negative value means received lease was not signalled due to missing requestN*/\n\n  constructor(leaseReceiver) {\n    _defineProperty(this, '_requestN', -1);\n    leaseReceiver(\n      new _rsocketFlowable.Flowable((subscriber) => {\n        if (this._subscriber) {\n          subscriber.onError(new Error('only 1 subscriber is allowed'));\n          return;\n        }\n        if (this.isDisposed()) {\n          subscriber.onComplete();\n          return;\n        }\n        this._subscriber = subscriber;\n        subscriber.onSubscribe({\n          cancel: () => {\n            this.dispose();\n          },\n          request: (n) => {\n            if (n <= 0) {\n              subscriber.onError(\n                new Error(`request demand must be positive: ${n}`)\n              );\n            }\n            if (!this.isDisposed()) {\n              const curReqN = this._requestN;\n              this._onRequestN(curReqN);\n              this._requestN = Math.min(\n                Number.MAX_SAFE_INTEGER,\n                Math.max(0, curReqN) + n\n              );\n            }\n          },\n        });\n      })\n    );\n  }\n\n  use() {\n    const l = this._lease;\n    return l ? l._use() : false;\n  }\n\n  errorMessage() {\n    return _errorMessage(this._lease);\n  }\n\n  receive(frame) {\n    if (!this.isDisposed()) {\n      const timeToLiveMillis = frame.ttl;\n      const requestCount = frame.requestCount;\n      const metadata = frame.metadata;\n      this._onLease(new Lease(timeToLiveMillis, requestCount, metadata));\n    }\n  }\n\n  availability() {\n    const l = this._lease;\n    if (l && l.valid()) {\n      return l.allowedRequests / l.startingAllowedRequests;\n    }\n    return 0.0;\n  }\n\n  dispose() {\n    if (!this._isDisposed) {\n      this._isDisposed = true;\n      const s = this._subscriber;\n      if (s) {\n        s.onComplete();\n      }\n    }\n  }\n\n  isDisposed() {\n    return this._isDisposed;\n  }\n\n  _onRequestN(requestN) {\n    const l = this._lease;\n    const s = this._subscriber;\n    if (requestN < 0 && l && s) {\n      s.onNext(l);\n    }\n  }\n\n  _onLease(lease) {\n    const s = this._subscriber;\n    const newReqN = this._requestN - 1;\n    if (newReqN >= 0 && s) {\n      s.onNext(lease);\n    }\n    this._requestN = Math.max(-1, newReqN);\n    this._lease = lease;\n  }\n}\nexports.RequesterLeaseHandler = RequesterLeaseHandler;\n\nclass ResponderLeaseHandler {\n  constructor(leaseSender, stats, errorConsumer) {\n    this._leaseSender = leaseSender;\n    this._stats = stats;\n    this._errorConsumer = errorConsumer;\n  }\n\n  use() {\n    const l = this._lease;\n    const success = l ? l._use() : false;\n    this._onStatsEvent(success);\n    return success;\n  }\n\n  errorMessage() {\n    return _errorMessage(this._lease);\n  }\n\n  send(send) {\n    let subscription;\n    let isDisposed;\n\n    this._leaseSender(this._stats).subscribe({\n      onComplete: () => this._onStatsEvent(),\n      onError: (error) => {\n        this._onStatsEvent();\n        const errConsumer = this._errorConsumer;\n        if (errConsumer) {\n          errConsumer(error);\n        }\n      },\n      onNext: (lease) => {\n        this._lease = lease;\n        send(lease);\n      },\n      onSubscribe: (s) => {\n        if (isDisposed) {\n          s.cancel();\n          return;\n        }\n        s.request(_RSocketFrame.MAX_REQUEST_N);\n        subscription = s;\n      },\n    });\n\n    return {\n      dispose() {\n        if (!isDisposed) {\n          isDisposed = true;\n          this._onStatsEvent();\n          if (subscription) {\n            subscription.cancel();\n          }\n        }\n      },\n\n      isDisposed() {\n        return isDisposed;\n      },\n    };\n  }\n\n  _onStatsEvent(success) {\n    const s = this._stats;\n    if (s) {\n      const event =\n        success === undefined ? 'Terminate' : success ? 'Accept' : 'Reject';\n      s.onEvent(event);\n    }\n  }\n}\nexports.ResponderLeaseHandler = ResponderLeaseHandler;\n\nfunction _errorMessage(lease) {\n  if (!lease) {\n    return 'Lease was not received yet';\n  }\n  if (lease.valid()) {\n    return 'Missing leases';\n  } else {\n    const isExpired = lease.expired();\n    const requests = lease.allowedRequests;\n    return `Missing leases. Expired: ${isExpired.toString()}, allowedRequests: ${requests}`;\n  }\n}\n\n\n//# sourceURL=webpack://rsocket-demo/./node_modules/rsocket-core/build/RSocketLease.js?");

/***/ }),

/***/ "./node_modules/rsocket-core/build/RSocketMachine.js":
/*!***********************************************************!*\
  !*** ./node_modules/rsocket-core/build/RSocketMachine.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/** Copyright (c) Facebook, Inc. and its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n */\n\n\nObject.defineProperty(exports, \"__esModule\", ({value: true}));\nexports.createServerMachine = createServerMachine;\nexports.createClientMachine = createClientMachine;\n\nvar _rsocketFlowable = __webpack_require__(/*! rsocket-flowable */ \"./node_modules/rsocket-flowable/build/index.js\");\nvar _emptyFunction = _interopRequireDefault(__webpack_require__(/*! fbjs/lib/emptyFunction */ \"./node_modules/fbjs/lib/emptyFunction.js\"));\nvar _invariant = _interopRequireDefault(__webpack_require__(/*! fbjs/lib/invariant */ \"./node_modules/fbjs/lib/invariant.js\"));\nvar _warning = _interopRequireDefault(__webpack_require__(/*! fbjs/lib/warning */ \"./node_modules/fbjs/lib/warning.js\"));\nvar _RSocketFrame = __webpack_require__(/*! ./RSocketFrame */ \"./node_modules/rsocket-core/build/RSocketFrame.js\");\n\nvar _RSocketSerialization = __webpack_require__(/*! ./RSocketSerialization */ \"./node_modules/rsocket-core/build/RSocketSerialization.js\");\nvar _RSocketLease = __webpack_require__(/*! ./RSocketLease */ \"./node_modules/rsocket-core/build/RSocketLease.js\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly)\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(\n          target,\n          key,\n          Object.getOwnPropertyDescriptor(source, key)\n        );\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true,\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nclass ResponderWrapper {\n  constructor(responder) {\n    this._responder = responder || {};\n  }\n\n  setResponder(responder) {\n    this._responder = responder || {};\n  }\n\n  fireAndForget(payload) {\n    if (this._responder.fireAndForget) {\n      try {\n        this._responder.fireAndForget(payload);\n      } catch (error) {\n        console.error('fireAndForget threw an exception', error);\n      }\n    }\n  }\n\n  requestResponse(payload) {\n    let error;\n    if (this._responder.requestResponse) {\n      try {\n        return this._responder.requestResponse(payload);\n      } catch (_error) {\n        console.error('requestResponse threw an exception', _error);\n        error = _error;\n      }\n    }\n    return _rsocketFlowable.Single.error(error || new Error('not implemented'));\n  }\n\n  requestStream(payload) {\n    let error;\n    if (this._responder.requestStream) {\n      try {\n        return this._responder.requestStream(payload);\n      } catch (_error) {\n        console.error('requestStream threw an exception', _error);\n        error = _error;\n      }\n    }\n    return _rsocketFlowable.Flowable.error(\n      error || new Error('not implemented')\n    );\n  }\n\n  requestChannel(payloads) {\n    let error;\n    if (this._responder.requestChannel) {\n      try {\n        return this._responder.requestChannel(payloads);\n      } catch (_error) {\n        console.error('requestChannel threw an exception', _error);\n        error = _error;\n      }\n    }\n    return _rsocketFlowable.Flowable.error(\n      error || new Error('not implemented')\n    );\n  }\n\n  metadataPush(payload) {\n    let error;\n    if (this._responder.metadataPush) {\n      try {\n        return this._responder.metadataPush(payload);\n      } catch (_error) {\n        console.error('metadataPush threw an exception', _error);\n        error = _error;\n      }\n    }\n    return _rsocketFlowable.Single.error(error || new Error('not implemented'));\n  }\n}\n\nfunction createServerMachine(\n  connection,\n  connectionPublisher,\n  keepAliveTimeout,\n  serializers,\n  errorHandler,\n  requesterLeaseHandler,\n  responderLeaseHandler\n) {\n  return new RSocketMachineImpl(\n    'SERVER',\n    connection,\n    connectionPublisher,\n    keepAliveTimeout,\n    serializers,\n    undefined,\n    errorHandler,\n    requesterLeaseHandler,\n    responderLeaseHandler\n  );\n}\n\nfunction createClientMachine(\n  connection,\n  connectionPublisher,\n  keepAliveTimeout,\n  serializers,\n  requestHandler,\n  errorHandler,\n  requesterLeaseHandler,\n  responderLeaseHandler\n) {\n  return new RSocketMachineImpl(\n    'CLIENT',\n    connection,\n    connectionPublisher,\n    keepAliveTimeout,\n    serializers,\n    requestHandler,\n    errorHandler,\n    requesterLeaseHandler,\n    responderLeaseHandler\n  );\n}\n\nclass RSocketMachineImpl {\n  constructor(\n    role,\n    connection,\n    connectionPublisher,\n    keepAliveTimeout,\n    serializers,\n    requestHandler,\n    errorHandler,\n    requesterLeaseHandler,\n    responderLeaseHandler\n  ) {\n    _defineProperty(this, '_connectionAvailability', 1.0);\n    _defineProperty(\n      this,\n      '_handleTransportClose',\n\n      () => {\n        this._handleError(new Error('RSocket: The connection was closed.'));\n      }\n    );\n    _defineProperty(\n      this,\n      '_handleError',\n\n      (error) => {\n        // Error any open request streams\n        this._receivers.forEach((receiver) => {\n          receiver.onError(error);\n        });\n        this._receivers.clear();\n        // Cancel any active subscriptions\n        this._subscriptions.forEach((subscription) => {\n          subscription.cancel();\n        });\n        this._subscriptions.clear();\n        this._connectionAvailability = 0.0;\n        this._dispose(\n          this._requesterLeaseHandler,\n          this._responderLeaseSenderDisposable\n        );\n\n        const handle = this._keepAliveTimerHandle;\n        if (handle) {\n          clearTimeout(handle);\n          this._keepAliveTimerHandle = null;\n        }\n      }\n    );\n    _defineProperty(\n      this,\n      '_handleFrame',\n\n      (frame) => {\n        const {streamId} = frame;\n        if (streamId === _RSocketFrame.CONNECTION_STREAM_ID) {\n          this._handleConnectionFrame(frame);\n        } else {\n          this._handleStreamFrame(streamId, frame);\n        }\n      }\n    );\n    this._connection = connection;\n    this._requesterLeaseHandler = requesterLeaseHandler;\n    this._responderLeaseHandler = responderLeaseHandler;\n    this._nextStreamId = role === 'CLIENT' ? 1 : 2;\n    this._receivers = new Map();\n    this._subscriptions = new Map();\n    this._serializers =\n      serializers || _RSocketSerialization.IdentitySerializers;\n    this._requestHandler = new ResponderWrapper(requestHandler);\n    this._errorHandler = errorHandler; // Subscribe to completion/errors before sending anything\n    connectionPublisher({\n      onComplete: this._handleTransportClose,\n      onError: this._handleError,\n      onNext: this._handleFrame,\n      onSubscribe: (subscription) =>\n        subscription.request(Number.MAX_SAFE_INTEGER),\n    });\n    const responderHandler = this._responderLeaseHandler;\n    if (responderHandler) {\n      this._responderLeaseSenderDisposable = responderHandler.send(\n        this._leaseFrameSender()\n      );\n    } // Cleanup when the connection closes\n    this._connection.connectionStatus().subscribe({\n      onNext: (status) => {\n        if (status.kind === 'CLOSED') {\n          this._handleTransportClose();\n        } else if (status.kind === 'ERROR') {\n          this._handleError(status.error);\n        }\n      },\n      onSubscribe: (subscription) =>\n        subscription.request(Number.MAX_SAFE_INTEGER),\n    });\n    const MIN_TICK_DURATION = 100;\n    this._keepAliveLastReceivedMillis = Date.now();\n    const keepAliveHandler = () => {\n      const now = Date.now();\n      const noKeepAliveDuration = now - this._keepAliveLastReceivedMillis;\n      if (noKeepAliveDuration >= keepAliveTimeout) {\n        this._handleConnectionError(\n          new Error(`No keep-alive acks for ${keepAliveTimeout} millis`)\n        );\n      } else {\n        this._keepAliveTimerHandle = setTimeout(\n          keepAliveHandler,\n          Math.max(MIN_TICK_DURATION, keepAliveTimeout - noKeepAliveDuration)\n        );\n      }\n    };\n    this._keepAliveTimerHandle = setTimeout(keepAliveHandler, keepAliveTimeout);\n  }\n  setRequestHandler(requestHandler) {\n    this._requestHandler.setResponder(requestHandler);\n  }\n  close() {\n    this._connection.close();\n  }\n  connectionStatus() {\n    return this._connection.connectionStatus();\n  }\n  availability() {\n    const r = this._requesterLeaseHandler;\n    const requesterAvailability = r ? r.availability() : 1.0;\n    return Math.min(this._connectionAvailability, requesterAvailability);\n  }\n  fireAndForget(payload) {\n    if (this._useLeaseOrError(this._requesterLeaseHandler)) {\n      return;\n    }\n    const streamId = this._getNextStreamId(this._receivers);\n    const data = this._serializers.data.serialize(payload.data);\n    const metadata = this._serializers.metadata.serialize(payload.metadata);\n    const frame = {\n      data,\n      flags: payload.metadata !== undefined ? _RSocketFrame.FLAGS.METADATA : 0,\n      metadata,\n      streamId,\n      type: _RSocketFrame.FRAME_TYPES.REQUEST_FNF,\n    };\n    this._connection.sendOne(frame);\n  }\n  requestResponse(payload) {\n    const leaseError = this._useLeaseOrError(this._requesterLeaseHandler);\n    if (leaseError) {\n      return _rsocketFlowable.Single.error(new Error(leaseError));\n    }\n    const streamId = this._getNextStreamId(this._receivers);\n    return new _rsocketFlowable.Single((subscriber) => {\n      this._receivers.set(streamId, {\n        onComplete: _emptyFunction.default,\n        onError: (error) => subscriber.onError(error),\n        onNext: (data) => subscriber.onComplete(data),\n      });\n      const data = this._serializers.data.serialize(payload.data);\n      const metadata = this._serializers.metadata.serialize(payload.metadata);\n      const frame = {\n        data,\n        flags:\n          payload.metadata !== undefined ? _RSocketFrame.FLAGS.METADATA : 0,\n        metadata,\n        streamId,\n        type: _RSocketFrame.FRAME_TYPES.REQUEST_RESPONSE,\n      };\n      this._connection.sendOne(frame);\n      subscriber.onSubscribe(() => {\n        this._receivers.delete(streamId);\n        const cancelFrame = {\n          flags: 0,\n          streamId,\n          type: _RSocketFrame.FRAME_TYPES.CANCEL,\n        };\n        this._connection.sendOne(cancelFrame);\n      });\n    });\n  }\n  requestStream(payload) {\n    const leaseError = this._useLeaseOrError(this._requesterLeaseHandler);\n    if (leaseError) {\n      return _rsocketFlowable.Flowable.error(new Error(leaseError));\n    }\n    const streamId = this._getNextStreamId(this._receivers);\n    return new _rsocketFlowable.Flowable((subscriber) => {\n      this._receivers.set(streamId, subscriber);\n      let initialized = false;\n      subscriber.onSubscribe({\n        cancel: () => {\n          this._receivers.delete(streamId);\n          if (!initialized) {\n            return;\n          }\n          const cancelFrame = {\n            flags: 0,\n            streamId,\n            type: _RSocketFrame.FRAME_TYPES.CANCEL,\n          };\n          this._connection.sendOne(cancelFrame);\n        },\n        request: (n) => {\n          if (n > _RSocketFrame.MAX_REQUEST_N) {\n            n = _RSocketFrame.MAX_REQUEST_N;\n          }\n          if (initialized) {\n            const requestNFrame = {\n              flags: 0,\n              requestN: n,\n              streamId,\n              type: _RSocketFrame.FRAME_TYPES.REQUEST_N,\n            };\n            this._connection.sendOne(requestNFrame);\n          } else {\n            initialized = true;\n            const data = this._serializers.data.serialize(payload.data);\n            const metadata = this._serializers.metadata.serialize(\n              payload.metadata\n            );\n            const requestStreamFrame = {\n              data,\n              flags:\n                payload.metadata !== undefined\n                  ? _RSocketFrame.FLAGS.METADATA\n                  : 0,\n              metadata,\n              requestN: n,\n              streamId,\n              type: _RSocketFrame.FRAME_TYPES.REQUEST_STREAM,\n            };\n            this._connection.sendOne(requestStreamFrame);\n          }\n        },\n      });\n    }, _RSocketFrame.MAX_REQUEST_N);\n  }\n  requestChannel(payloads) {\n    const leaseError = this._useLeaseOrError(this._requesterLeaseHandler);\n    if (leaseError) {\n      return _rsocketFlowable.Flowable.error(new Error(leaseError));\n    }\n    const streamId = this._getNextStreamId(this._receivers);\n    let payloadsSubscribed = false;\n    return new _rsocketFlowable.Flowable((subscriber) => {\n      try {\n        this._receivers.set(streamId, subscriber);\n        let initialized = false;\n        subscriber.onSubscribe({\n          cancel: () => {\n            this._receivers.delete(streamId);\n            if (!initialized) {\n              return;\n            }\n            const cancelFrame = {\n              flags: 0,\n              streamId,\n              type: _RSocketFrame.FRAME_TYPES.CANCEL,\n            };\n            this._connection.sendOne(cancelFrame);\n          },\n          request: (n) => {\n            if (n > _RSocketFrame.MAX_REQUEST_N) {\n              n = _RSocketFrame.MAX_REQUEST_N;\n            }\n            if (initialized) {\n              const requestNFrame = {\n                flags: 0,\n                requestN: n,\n                streamId,\n                type: _RSocketFrame.FRAME_TYPES.REQUEST_N,\n              };\n              this._connection.sendOne(requestNFrame);\n            } else {\n              if (!payloadsSubscribed) {\n                payloadsSubscribed = true;\n                payloads.subscribe({\n                  onComplete: () => {\n                    this._sendStreamComplete(streamId);\n                  },\n                  onError: (error) => {\n                    this._sendStreamError(streamId, error.message);\n                  }, //Subscriber methods\n                  onNext: (payload) => {\n                    const data = this._serializers.data.serialize(payload.data);\n                    const metadata = this._serializers.metadata.serialize(\n                      payload.metadata\n                    );\n                    if (!initialized) {\n                      initialized = true;\n                      const requestChannelFrame = {\n                        data,\n                        flags:\n                          payload.metadata !== undefined\n                            ? _RSocketFrame.FLAGS.METADATA\n                            : 0,\n                        metadata,\n                        requestN: n,\n                        streamId,\n                        type: _RSocketFrame.FRAME_TYPES.REQUEST_CHANNEL,\n                      };\n                      this._connection.sendOne(requestChannelFrame);\n                    } else {\n                      const payloadFrame = {\n                        data,\n                        flags:\n                          _RSocketFrame.FLAGS.NEXT |\n                          (payload.metadata !== undefined\n                            ? _RSocketFrame.FLAGS.METADATA\n                            : 0),\n                        metadata,\n                        streamId,\n                        type: _RSocketFrame.FRAME_TYPES.PAYLOAD,\n                      };\n                      this._connection.sendOne(payloadFrame);\n                    }\n                  },\n                  onSubscribe: (subscription) => {\n                    this._subscriptions.set(streamId, subscription);\n                    subscription.request(1);\n                  },\n                });\n              } else {\n                (0, _warning.default)(\n                  false,\n                  'RSocketClient: re-entrant call to request n before initial' +\n                    ' channel established.'\n                );\n              }\n            }\n          },\n        });\n      } catch (err) {\n        console.warn('Exception while subscribing to channel flowable:' + err);\n      }\n    }, _RSocketFrame.MAX_REQUEST_N);\n  }\n  metadataPush(payload) {\n    // TODO #18065331: implement metadataPush\n    throw new Error('metadataPush() is not implemented');\n  }\n  _getNextStreamId(streamIds) {\n    const streamId = this._nextStreamId;\n    do {\n      this._nextStreamId =\n        (this._nextStreamId + 2) & _RSocketFrame.MAX_STREAM_ID;\n    } while (this._nextStreamId === 0 || streamIds.has(streamId));\n    return streamId;\n  }\n  _useLeaseOrError(leaseHandler) {\n    if (leaseHandler) {\n      if (!leaseHandler.use()) {\n        return leaseHandler.errorMessage();\n      }\n    }\n  }\n  _leaseFrameSender() {\n    return (lease) =>\n      this._connection.sendOne({\n        flags: 0,\n        metadata: lease.metadata,\n        requestCount: lease.allowedRequests,\n        streamId: _RSocketFrame.CONNECTION_STREAM_ID,\n        ttl: lease.timeToLiveMillis,\n        type: _RSocketFrame.FRAME_TYPES.LEASE,\n      });\n  }\n  _dispose(...disposables) {\n    disposables.forEach((d) => {\n      if (d) {\n        d.dispose();\n      }\n    });\n  }\n  _isRequest(frameType) {\n    switch (frameType) {\n      case _RSocketFrame.FRAME_TYPES.REQUEST_FNF:\n      case _RSocketFrame.FRAME_TYPES.REQUEST_RESPONSE:\n      case _RSocketFrame.FRAME_TYPES.REQUEST_STREAM:\n      case _RSocketFrame.FRAME_TYPES.REQUEST_CHANNEL:\n        return true;\n      default:\n        return false;\n    }\n  }\n  /**\n   * Handle the connection closing normally: this is an error for any open streams.\n   */ _handleConnectionError(error) {\n    this._handleError(error);\n    this._connection.close();\n    const errorHandler = this._errorHandler;\n    if (errorHandler) {\n      errorHandler(error);\n    }\n  }\n  /**\n   * Handle a frame received from the transport client.\n   */ /**\n   * Handle connection frames (stream id === 0).\n   */ _handleConnectionFrame(frame) {\n    switch (frame.type) {\n      case _RSocketFrame.FRAME_TYPES.ERROR:\n        const error = (0, _RSocketFrame.createErrorFromFrame)(frame);\n        this._handleConnectionError(error);\n        break;\n      case _RSocketFrame.FRAME_TYPES.EXT:\n        // Extensions are not supported\n        break;\n      case _RSocketFrame.FRAME_TYPES.KEEPALIVE:\n        this._keepAliveLastReceivedMillis = Date.now();\n        if ((0, _RSocketFrame.isRespond)(frame.flags)) {\n          this._connection.sendOne(\n            _objectSpread(\n              _objectSpread({}, frame),\n              {},\n              {\n                flags: frame.flags ^ _RSocketFrame.FLAGS.RESPOND, // eslint-disable-line no-bitwise\n                lastReceivedPosition: 0,\n              }\n            )\n          );\n        }\n        break;\n      case _RSocketFrame.FRAME_TYPES.LEASE:\n        const r = this._requesterLeaseHandler;\n        if (r) {\n          r.receive(frame);\n        }\n        break;\n      case _RSocketFrame.FRAME_TYPES.METADATA_PUSH:\n      case _RSocketFrame.FRAME_TYPES.REQUEST_CHANNEL:\n      case _RSocketFrame.FRAME_TYPES.REQUEST_FNF:\n      case _RSocketFrame.FRAME_TYPES.REQUEST_RESPONSE:\n      case _RSocketFrame.FRAME_TYPES.REQUEST_STREAM:\n        // TODO #18064706: handle requests from server\n        break;\n      case _RSocketFrame.FRAME_TYPES.RESERVED:\n        // No-op\n        break;\n      case _RSocketFrame.FRAME_TYPES.RESUME:\n      case _RSocketFrame.FRAME_TYPES.RESUME_OK:\n        // TODO #18065016: support resumption\n        break;\n      default:\n        if (false) {}\n        break;\n    }\n  }\n\n  /**\n   * Handle stream-specific frames (stream id !== 0).\n   */\n  _handleStreamFrame(streamId, frame) {\n    if (this._isRequest(frame.type)) {\n      const leaseError = this._useLeaseOrError(this._responderLeaseHandler);\n      if (leaseError) {\n        this._sendStreamError(streamId, leaseError);\n        return;\n      }\n    }\n    switch (frame.type) {\n      case _RSocketFrame.FRAME_TYPES.CANCEL:\n        this._handleCancel(streamId, frame);\n        break;\n      case _RSocketFrame.FRAME_TYPES.REQUEST_N:\n        this._handleRequestN(streamId, frame);\n        break;\n      case _RSocketFrame.FRAME_TYPES.REQUEST_FNF:\n        this._handleFireAndForget(streamId, frame);\n        break;\n      case _RSocketFrame.FRAME_TYPES.REQUEST_RESPONSE:\n        this._handleRequestResponse(streamId, frame);\n        break;\n      case _RSocketFrame.FRAME_TYPES.REQUEST_STREAM:\n        this._handleRequestStream(streamId, frame);\n        break;\n      case _RSocketFrame.FRAME_TYPES.REQUEST_CHANNEL:\n        this._handleRequestChannel(streamId, frame);\n        break;\n      case _RSocketFrame.FRAME_TYPES.ERROR:\n        const error = (0, _RSocketFrame.createErrorFromFrame)(frame);\n        this._handleStreamError(streamId, error);\n        break;\n      case _RSocketFrame.FRAME_TYPES.PAYLOAD:\n        const receiver = this._receivers.get(streamId);\n        if (receiver != null) {\n          if ((0, _RSocketFrame.isNext)(frame.flags)) {\n            const payload = {\n              data: this._serializers.data.deserialize(frame.data),\n              metadata: this._serializers.metadata.deserialize(frame.metadata),\n            };\n\n            receiver.onNext(payload);\n          }\n          if ((0, _RSocketFrame.isComplete)(frame.flags)) {\n            this._receivers.delete(streamId);\n            receiver.onComplete();\n          }\n        }\n        break;\n      default:\n        if (false) {}\n        break;\n    }\n  }\n\n  _handleCancel(streamId, frame) {\n    const subscription = this._subscriptions.get(streamId);\n    if (subscription) {\n      subscription.cancel();\n      this._subscriptions.delete(streamId);\n    }\n  }\n\n  _handleRequestN(streamId, frame) {\n    const subscription = this._subscriptions.get(streamId);\n    if (subscription) {\n      subscription.request(frame.requestN);\n    }\n  }\n\n  _handleFireAndForget(streamId, frame) {\n    const payload = this._deserializePayload(frame);\n    this._requestHandler.fireAndForget(payload);\n  }\n\n  _handleRequestResponse(streamId, frame) {\n    const payload = this._deserializePayload(frame);\n    this._requestHandler.requestResponse(payload).subscribe({\n      onComplete: (payload) => {\n        this._sendStreamPayload(streamId, payload, true);\n      },\n      onError: (error) => this._sendStreamError(streamId, error.message),\n      onSubscribe: (cancel) => {\n        const subscription = {\n          cancel,\n          request: _emptyFunction.default,\n        };\n\n        this._subscriptions.set(streamId, subscription);\n      },\n    });\n  }\n\n  _handleRequestStream(streamId, frame) {\n    const payload = this._deserializePayload(frame);\n    this._requestHandler.requestStream(payload).subscribe({\n      onComplete: () => this._sendStreamComplete(streamId),\n      onError: (error) => this._sendStreamError(streamId, error.message),\n      onNext: (payload) => this._sendStreamPayload(streamId, payload),\n      onSubscribe: (subscription) => {\n        this._subscriptions.set(streamId, subscription);\n        subscription.request(frame.requestN);\n      },\n    });\n  }\n\n  _handleRequestChannel(streamId, frame) {\n    const existingSubscription = this._subscriptions.get(streamId);\n    if (existingSubscription) {\n      //Likely a duplicate REQUEST_CHANNEL frame, ignore per spec\n      return;\n    }\n\n    const payloads = new _rsocketFlowable.Flowable((subscriber) => {\n      let firstRequest = true;\n\n      subscriber.onSubscribe({\n        cancel: () => {\n          this._receivers.delete(streamId);\n          const cancelFrame = {\n            flags: 0,\n            streamId,\n            type: _RSocketFrame.FRAME_TYPES.CANCEL,\n          };\n\n          this._connection.sendOne(cancelFrame);\n        },\n        request: (n) => {\n          if (n > _RSocketFrame.MAX_REQUEST_N) {\n            n = _RSocketFrame.MAX_REQUEST_N;\n          }\n          if (firstRequest) {\n            n--;\n          }\n\n          if (n > 0) {\n            const requestNFrame = {\n              flags: 0,\n              requestN: n,\n              streamId,\n              type: _RSocketFrame.FRAME_TYPES.REQUEST_N,\n            };\n\n            this._connection.sendOne(requestNFrame);\n          }\n          //critically, if n is 0 now, that's okay because we eagerly decremented it\n          if (firstRequest && n >= 0) {\n            firstRequest = false;\n            //release the initial frame we received in frame form due to map operator\n            subscriber.onNext(frame);\n          }\n        },\n      });\n    }, _RSocketFrame.MAX_REQUEST_N);\n    const framesToPayloads = new _rsocketFlowable.FlowableProcessor(\n      payloads,\n      (frame) => this._deserializePayload(frame)\n    );\n\n    this._receivers.set(streamId, framesToPayloads);\n\n    this._requestHandler.requestChannel(framesToPayloads).subscribe({\n      onComplete: () => this._sendStreamComplete(streamId),\n      onError: (error) => this._sendStreamError(streamId, error.message),\n      onNext: (payload) => this._sendStreamPayload(streamId, payload),\n      onSubscribe: (subscription) => {\n        this._subscriptions.set(streamId, subscription);\n        subscription.request(frame.requestN);\n      },\n    });\n  }\n\n  _sendStreamComplete(streamId) {\n    this._subscriptions.delete(streamId);\n    this._connection.sendOne({\n      data: null,\n      flags: _RSocketFrame.FLAGS.COMPLETE,\n      metadata: null,\n      streamId,\n      type: _RSocketFrame.FRAME_TYPES.PAYLOAD,\n    });\n  }\n\n  _sendStreamError(streamId, errorMessage) {\n    this._subscriptions.delete(streamId);\n    this._connection.sendOne({\n      code: _RSocketFrame.ERROR_CODES.APPLICATION_ERROR,\n      flags: 0,\n      message: errorMessage,\n      streamId,\n      type: _RSocketFrame.FRAME_TYPES.ERROR,\n    });\n  }\n\n  _sendStreamPayload(streamId, payload, complete = false) {\n    let flags = _RSocketFrame.FLAGS.NEXT;\n    if (complete) {\n      // eslint-disable-next-line no-bitwise\n      flags |= _RSocketFrame.FLAGS.COMPLETE;\n      this._subscriptions.delete(streamId);\n    }\n    const data = this._serializers.data.serialize(payload.data);\n    const metadata = this._serializers.metadata.serialize(payload.metadata);\n    this._connection.sendOne({\n      data,\n      flags,\n      metadata,\n      streamId,\n      type: _RSocketFrame.FRAME_TYPES.PAYLOAD,\n    });\n  }\n\n  _deserializePayload(frame) {\n    return deserializePayload(this._serializers, frame);\n  }\n\n  /**\n   * Handle an error specific to a stream.\n   */\n  _handleStreamError(streamId, error) {\n    const receiver = this._receivers.get(streamId);\n    if (receiver != null) {\n      this._receivers.delete(streamId);\n      receiver.onError(error);\n    }\n  }\n}\n\nfunction deserializePayload(serializers, frame) {\n  return {\n    data: serializers.data.deserialize(frame.data),\n    metadata: serializers.metadata.deserialize(frame.metadata),\n  };\n}\n\n\n//# sourceURL=webpack://rsocket-demo/./node_modules/rsocket-core/build/RSocketMachine.js?");

/***/ }),

/***/ "./node_modules/rsocket-core/build/RSocketResumableTransport.js":
/*!**********************************************************************!*\
  !*** ./node_modules/rsocket-core/build/RSocketResumableTransport.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/** Copyright (c) Facebook, Inc. and its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n */\n\n\nObject.defineProperty(exports, \"__esModule\", ({value: true}));\nexports.default = void 0;\n\nvar _rsocketFlowable = __webpack_require__(/*! rsocket-flowable */ \"./node_modules/rsocket-flowable/build/index.js\");\nvar _invariant = _interopRequireDefault(__webpack_require__(/*! fbjs/lib/invariant */ \"./node_modules/fbjs/lib/invariant.js\"));\nvar _RSocketFrame = __webpack_require__(/*! ./RSocketFrame */ \"./node_modules/rsocket-core/build/RSocketFrame.js\");\n\nvar _rsocketTypes = __webpack_require__(/*! rsocket-types */ \"./node_modules/rsocket-types/build/index.js\");\n\nvar _RSocketBinaryFraming = __webpack_require__(/*! ./RSocketBinaryFraming */ \"./node_modules/rsocket-core/build/RSocketBinaryFraming.js\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly)\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(\n          target,\n          key,\n          Object.getOwnPropertyDescriptor(source, key)\n        );\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true,\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n * NOTE: This implementation conforms to an upcoming version of the RSocket protocol\n *       and will not work with version 1.0 servers.\n *\n * An implementation of the DuplexConnection interface that supports automatic\n * resumption per the RSocket protocol.\n *\n * # Example\n *\n * Create a client instance:\n * ```\n * const client = new RSocketClient({\n *   ...,\n *   transport: new RSocketResumableTransport(\n *     () => new RSocketWebSocketClient(...), // provider for low-level transport instances\n *     {\n *       bufferSize: 10, // max number of sent & pending frames to buffer before failing\n *       resumeToken: 'abc123', // string to uniquely identify the session across connections\n *     }\n *   ),\n * })\n *\n * Open the connection. After this if the connection dies it will be auto-resumed:\n * ```\n * client.connect().subscribe(...);\n * ```\n *\n * Optionally, subscribe to the status of the connection:\n * ```\n * client.connectionStatus().subscribe(...);\n * ```\n *\n * # Implementation Notes\n *\n * This transport maintains:\n * - _currentConnection: a current low-level transport, which is null when not\n *   connected\n * - _sentFrames: a buffer of frames written to a low-level transport (which\n *   may or may not have been received by the server)\n * - _pendingFrames: a buffer of frames not yet written to the low-level\n *   connection, because they were sent while not connected.\n *\n * The initial connection is simple: connect using the low-level transport and\n * flush any _pendingFrames (write them and add them to _sentFrames).\n *\n * Thereafter if the low-level transport drops, this transport attempts resumption.\n * It obtains a fresh low-level transport from the given transport `source`\n * and attempts to connect. Once connected, it sends a RESUME frame and waits.\n * If RESUME_OK is received, _sentFrames and _pendingFrames are adjusted such\n * that:\n * - any frames the server has received are removed from _sentFrames\n * - the remaining frames are merged (in correct order) into _pendingFrames\n *\n * Then the connection proceeds as above, where all pending frames are flushed.\n * If anything other than RESUME_OK is received, resumption is considered to\n * have failed and the connection is set to the ERROR status.\n */\nclass RSocketResumableTransport {\n  constructor(source, options, encoders) {\n    (0, _invariant.default)(\n      options.bufferSize >= 0,\n      'RSocketResumableTransport: bufferSize option must be >= 0, got `%s`.',\n      options.bufferSize\n    );\n\n    this._encoders = encoders;\n    this._bufferSize = options.bufferSize;\n    this._sentFramesSize = 0;\n    this._position = {\n      client: 0,\n      server: 0,\n    };\n\n    this._currentConnection = null;\n    this._statusSubscription = null;\n    this._receiveSubscription = null;\n    this._receivers = new Set();\n    this._resumeToken = options.resumeToken;\n    this._sessionTimeoutMillis = options.sessionDurationSeconds * 1000;\n    this._sessionTimeoutHandle = null;\n    this._senders = new Set();\n    this._sentFrames = [];\n    this._setupFrame = null;\n    this._source = source;\n    this._status = _rsocketTypes.CONNECTION_STATUS.NOT_CONNECTED;\n    this._statusSubscribers = new Set();\n  }\n\n  close() {\n    this._close();\n  }\n\n  connect() {\n    (0, _invariant.default)(\n      !this._isTerminated(),\n      'RSocketResumableTransport: Cannot connect(), connection terminated (%s: %s).',\n      this._status.kind,\n      this._status.kind === 'ERROR' ? this._status.error.message : 'no message'\n    );\n\n    try {\n      this._disconnect();\n      this._currentConnection = null;\n      this._receiveSubscription = null;\n      this._statusSubscription = null;\n      this._setConnectionStatus(_rsocketTypes.CONNECTION_STATUS.CONNECTING);\n      const connection = this._source();\n      connection.connectionStatus().subscribe({\n        onNext: (status) => {\n          if (status.kind === this._status.kind) {\n            return;\n          }\n          if (status.kind === 'CONNECTED') {\n            if (this._sessionTimeoutHandle) {\n              clearTimeout(this._sessionTimeoutHandle);\n              this._sessionTimeoutHandle = null;\n            }\n            //Setup\n            if (this._setupFrame == null) {\n              this._handleConnected(connection);\n              //Resume\n            } else {\n              this._handleResume(connection);\n            }\n          } else if (this._isTerminationStatus(status)) {\n            if (!this._sessionTimeoutHandle) {\n              this._sessionTimeoutHandle = setTimeout(\n                () => this._close(this._resumeTimeoutError()),\n                this._sessionTimeoutMillis\n              );\n            }\n            this._disconnect();\n            this._setConnectionStatus(\n              _rsocketTypes.CONNECTION_STATUS.NOT_CONNECTED\n            );\n          }\n        },\n        onSubscribe: (subscription) => {\n          this._statusSubscription = subscription;\n          subscription.request(Number.MAX_SAFE_INTEGER);\n        },\n      });\n\n      connection.connect();\n    } catch (error) {\n      this._close(error);\n    }\n  }\n\n  connectionStatus() {\n    return new _rsocketFlowable.Flowable((subscriber) => {\n      subscriber.onSubscribe({\n        cancel: () => {\n          this._statusSubscribers.delete(subscriber);\n        },\n        request: () => {\n          this._statusSubscribers.add(subscriber);\n          subscriber.onNext(this._status);\n        },\n      });\n    });\n  }\n\n  receive() {\n    return new _rsocketFlowable.Flowable((subject) => {\n      let added = false;\n      subject.onSubscribe({\n        cancel: () => {\n          this._receivers.delete(subject);\n        },\n        request: () => {\n          if (!added) {\n            added = true;\n            this._receivers.add(subject);\n          }\n        },\n      });\n    });\n  }\n\n  sendOne(frame) {\n    try {\n      this._writeFrame(frame);\n    } catch (error) {\n      this._close(error);\n    }\n  }\n\n  send(frames) {\n    let subscription;\n    frames.subscribe({\n      onComplete: () => {\n        subscription && this._senders.delete(subscription);\n      },\n      onError: (error) => {\n        subscription && this._senders.delete(subscription);\n        this._close(error);\n      },\n      onNext: (frame) => this._writeFrame(frame),\n      onSubscribe: (_subscription) => {\n        subscription = _subscription;\n        this._senders.add(subscription);\n        subscription.request(Number.MAX_SAFE_INTEGER);\n      },\n    });\n  }\n\n  _close(error) {\n    if (this._isTerminated()) {\n      return;\n    }\n    if (error) {\n      this._setConnectionStatus({error, kind: 'ERROR'});\n    } else {\n      this._setConnectionStatus(_rsocketTypes.CONNECTION_STATUS.CLOSED);\n    }\n    const receivers = this._receivers;\n    receivers.forEach((r) => r.onComplete());\n    receivers.clear();\n\n    const senders = this._senders;\n    senders.forEach((s) => s.cancel());\n    senders.clear();\n    this._sentFrames.length = 0;\n\n    this._disconnect();\n  }\n\n  _disconnect() {\n    if (this._statusSubscription) {\n      this._statusSubscription.cancel();\n      this._statusSubscription = null;\n    }\n    if (this._receiveSubscription) {\n      this._receiveSubscription.cancel();\n      this._receiveSubscription = null;\n    }\n    if (this._currentConnection) {\n      this._currentConnection.close();\n      this._currentConnection = null;\n    }\n  }\n\n  _handleConnected(connection) {\n    this._currentConnection = connection;\n    this._flushFrames();\n    this._setConnectionStatus(_rsocketTypes.CONNECTION_STATUS.CONNECTED);\n    connection.receive().subscribe({\n      onNext: (frame) => {\n        try {\n          this._receiveFrame(frame);\n        } catch (error) {\n          this._close(error);\n        }\n      },\n      onSubscribe: (subscription) => {\n        this._receiveSubscription = subscription;\n        subscription.request(Number.MAX_SAFE_INTEGER);\n      },\n    });\n  }\n\n  _handleResume(connection) {\n    connection\n      .receive()\n      .take(1)\n      .subscribe({\n        onNext: (frame) => {\n          try {\n            if (frame.type === _RSocketFrame.FRAME_TYPES.RESUME_OK) {\n              const {clientPosition} = frame;\n              // clientPosition indicates which frames the server is missing:\n              // - anything after that still needs to be sent\n              // - anything before that can be discarded\n              if (clientPosition < this._position.client) {\n                // Invalid RESUME_OK frame: server asked for an older\n                // client frame than is available\n                this._close(this._nonResumableStateError());\n                return;\n              }\n              // remove tail frames of total length = remoteImpliedPos-localPos\n              let removeSize = clientPosition - this._position.client;\n              let index = 0;\n              while (removeSize > 0) {\n                const frameSize = this._onReleasedTailFrame(\n                  this._sentFrames[index]\n                );\n\n                if (!frameSize) {\n                  this._close(this._absentLengthError(frame));\n                  return;\n                }\n                removeSize -= frameSize;\n                index++;\n              }\n              if (removeSize !== 0) {\n                this._close(this._inconsistentImpliedPositionError());\n                return;\n              }\n              // Drop sent frames that the server has received\n              if (index > 0) {\n                this._sentFrames.splice(0, index);\n              }\n              // Continue connecting, which will flush pending frames\n              this._handleConnected(connection);\n            } else {\n              const error =\n                frame.type === _RSocketFrame.FRAME_TYPES.ERROR\n                  ? (0, _RSocketFrame.createErrorFromFrame)(frame)\n                  : new Error(\n                      'RSocketResumableTransport: Resumption failed for an ' +\n                        'unspecified reason.'\n                    );\n\n              this._close(error);\n            }\n          } catch (error) {\n            this._close(error);\n          }\n        },\n        onSubscribe: (subscription) => {\n          this._receiveSubscription = subscription;\n          subscription.request(1);\n        },\n      });\n\n    const setupFrame = this._setupFrame;\n    (0, _invariant.default)(\n      setupFrame,\n      'RSocketResumableTransport: Cannot resume, setup frame has not been sent.'\n    );\n\n    connection.sendOne({\n      clientPosition: this._position.client,\n      flags: 0,\n      majorVersion: setupFrame.majorVersion,\n      minorVersion: setupFrame.minorVersion,\n      resumeToken: this._resumeToken,\n      serverPosition: this._position.server,\n      streamId: _RSocketFrame.CONNECTION_STREAM_ID,\n      type: _RSocketFrame.FRAME_TYPES.RESUME,\n    });\n  }\n\n  _absentLengthError(frame) {\n    return new Error(\n      'RSocketResumableTransport: absent frame.length for type ' + frame.type\n    );\n  }\n\n  _inconsistentImpliedPositionError() {\n    return new Error(\n      'RSocketResumableTransport: local frames are inconsistent with remote implied position'\n    );\n  }\n\n  _nonResumableStateError() {\n    return new Error(\n      'RSocketResumableTransport: resumption failed, server is ' +\n        'missing frames that are no longer in the client buffer.'\n    );\n  }\n\n  _resumeTimeoutError() {\n    return new Error('RSocketResumableTransport: resumable session timed out');\n  }\n\n  _isTerminated() {\n    return this._isTerminationStatus(this._status);\n  }\n\n  _isTerminationStatus(status) {\n    const kind = status.kind;\n    return kind === 'CLOSED' || kind === 'ERROR';\n  }\n\n  _setConnectionStatus(status) {\n    if (status.kind === this._status.kind) {\n      return;\n    }\n    this._status = status;\n    this._statusSubscribers.forEach((subscriber) => subscriber.onNext(status));\n  }\n\n  _receiveFrame(frame) {\n    if ((0, _RSocketFrame.isResumePositionFrameType)(frame.type)) {\n      if (frame.length) {\n        this._position.server += frame.length;\n      }\n    }\n    // TODO: trim _sentFrames on KEEPALIVE frame\n    this._receivers.forEach((subscriber) => subscriber.onNext(frame));\n  }\n\n  _flushFrames() {\n    this._sentFrames.forEach((frame) => {\n      const connection = this._currentConnection;\n      if (connection) {\n        connection.sendOne(frame);\n      }\n    });\n  }\n\n  _onReleasedTailFrame(frame) {\n    const removedFrameSize = frame.length;\n    if (removedFrameSize) {\n      this._sentFramesSize -= removedFrameSize;\n      this._position.client += removedFrameSize;\n      return removedFrameSize;\n    }\n  }\n\n  _writeFrame(frame) {\n    // Ensure that SETUP frames contain the resume token\n    if (frame.type === _RSocketFrame.FRAME_TYPES.SETUP) {\n      frame = _objectSpread(\n        _objectSpread({}, frame),\n        {},\n        {\n          flags: frame.flags | _RSocketFrame.FLAGS.RESUME_ENABLE, // eslint-disable-line no-bitwise\n          resumeToken: this._resumeToken,\n        }\n      );\n\n      this._setupFrame = frame; // frame can only be a SetupFrame\n    }\n    frame.length = (0, _RSocketBinaryFraming.sizeOfFrame)(\n      frame,\n      this._encoders\n    );\n    // If connected, immediately write frames to the low-level transport\n    // and consider them \"sent\". The resumption protocol will figure out\n    // which frames may not have been received and recover.\n    if ((0, _RSocketFrame.isResumePositionFrameType)(frame.type)) {\n      let available = this._bufferSize - this._sentFramesSize;\n      const frameSize = frame.length;\n      if (frameSize) {\n        // remove tail until there is space for new frame\n        while (available < frameSize) {\n          const removedFrame = this._sentFrames.shift();\n          if (removedFrame) {\n            const removedFrameSize = this._onReleasedTailFrame(removedFrame);\n            if (!removedFrameSize) {\n              this._close(this._absentLengthError(frame));\n              return;\n            }\n            available += removedFrameSize;\n          } else {\n            break;\n          }\n        }\n        if (available >= frameSize) {\n          this._sentFrames.push(frame);\n          this._sentFramesSize += frameSize;\n        } else {\n          this._position.client += frameSize;\n        }\n      } else {\n        this._close(this._absentLengthError(frame));\n        return;\n      }\n    }\n    const currentConnection = this._currentConnection;\n    if (currentConnection) {\n      currentConnection.sendOne(frame);\n    }\n  }\n}\nexports.default = RSocketResumableTransport;\n\n\n//# sourceURL=webpack://rsocket-demo/./node_modules/rsocket-core/build/RSocketResumableTransport.js?");

/***/ }),

/***/ "./node_modules/rsocket-core/build/RSocketSerialization.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rsocket-core/build/RSocketSerialization.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/** Copyright (c) Facebook, Inc. and its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", ({value: true}));\nexports.IdentitySerializers = exports.IdentitySerializer = exports.JsonSerializers = exports.JsonSerializer = void 0;\n\nvar _LiteBuffer = __webpack_require__(/*! ./LiteBuffer */ \"./node_modules/rsocket-core/build/LiteBuffer.js\");\nvar _invariant = _interopRequireDefault(__webpack_require__(/*! fbjs/lib/invariant */ \"./node_modules/fbjs/lib/invariant.js\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n// JSON serializer\nconst JsonSerializer = {\n  deserialize: (data) => {\n    let str;\n    if (data == null) {\n      return null;\n    } else if (typeof data === 'string') {\n      str = data;\n    } else if (_LiteBuffer.LiteBuffer.isBuffer(data)) {\n      const buffer = data;\n      str = buffer.toString('utf8');\n    } else {\n      const buffer = _LiteBuffer.LiteBuffer.from(data);\n      str = buffer.toString('utf8');\n    }\n    return JSON.parse(str);\n  },\n  serialize: JSON.stringify,\n};\nexports.JsonSerializer = JsonSerializer;\n\nconst JsonSerializers = {\n  data: JsonSerializer,\n  metadata: JsonSerializer,\n};\n\n// Pass-through serializer\nexports.JsonSerializers = JsonSerializers;\nconst IdentitySerializer = {\n  deserialize: (data) => {\n    (0, _invariant.default)(\n      data == null ||\n        typeof data === 'string' ||\n        _LiteBuffer.LiteBuffer.isBuffer(data) ||\n        data instanceof Uint8Array,\n      'RSocketSerialization: Expected data to be a string, Buffer, or ' +\n        'Uint8Array. Got `%s`.',\n      data\n    );\n\n    return data;\n  },\n  serialize: (data) => data,\n};\nexports.IdentitySerializer = IdentitySerializer;\n\nconst IdentitySerializers = {\n  data: IdentitySerializer,\n  metadata: IdentitySerializer,\n};\nexports.IdentitySerializers = IdentitySerializers;\n\n\n//# sourceURL=webpack://rsocket-demo/./node_modules/rsocket-core/build/RSocketSerialization.js?");

/***/ }),

/***/ "./node_modules/rsocket-core/build/RSocketServer.js":
/*!**********************************************************!*\
  !*** ./node_modules/rsocket-core/build/RSocketServer.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/** Copyright (c) Facebook, Inc. and its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n */\n\n\nObject.defineProperty(exports, \"__esModule\", ({value: true}));\nexports.default = void 0;\n\nvar _rsocketFlowable = __webpack_require__(/*! rsocket-flowable */ \"./node_modules/rsocket-flowable/build/index.js\");\nvar _invariant = _interopRequireDefault(__webpack_require__(/*! fbjs/lib/invariant */ \"./node_modules/fbjs/lib/invariant.js\"));\nvar _RSocketFrame = __webpack_require__(/*! ./RSocketFrame */ \"./node_modules/rsocket-core/build/RSocketFrame.js\");\n\nvar _RSocketSerialization = __webpack_require__(/*! ./RSocketSerialization */ \"./node_modules/rsocket-core/build/RSocketSerialization.js\");\nvar _RSocketMachine = __webpack_require__(/*! ./RSocketMachine */ \"./node_modules/rsocket-core/build/RSocketMachine.js\");\nvar _RSocketLease = __webpack_require__(/*! ./RSocketLease */ \"./node_modules/rsocket-core/build/RSocketLease.js\");\n\nvar _ReassemblyDuplexConnection = __webpack_require__(/*! ./ReassemblyDuplexConnection */ \"./node_modules/rsocket-core/build/ReassemblyDuplexConnection.js\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true,\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n * RSocketServer: A server in an RSocket connection that accepts connections\n * from peers via the given transport server.\n */\nclass RSocketServer {\n  constructor(config) {\n    _defineProperty(\n      this,\n      '_handleTransportComplete',\n\n      () => {\n        this._handleTransportError(\n          new Error('RSocketServer: Connection closed unexpectedly.')\n        );\n      }\n    );\n    _defineProperty(\n      this,\n      '_handleTransportError',\n\n      (error) => {\n        this._connections.forEach((connection) => {\n          // TODO: Allow passing in error\n          connection.close();\n        });\n      }\n    );\n    _defineProperty(\n      this,\n      '_handleTransportConnection',\n\n      (connection) => {\n        const swapper = new SubscriberSwapper();\n        let subscription;\n        connection = new _ReassemblyDuplexConnection.ReassemblyDuplexConnection(\n          connection\n        );\n        connection.receive().subscribe(\n          swapper.swap({\n            onError: (error) => console.error(error),\n            onNext: (frame) => {\n              switch (frame.type) {\n                case _RSocketFrame.FRAME_TYPES.RESUME:\n                  connection.sendOne({\n                    code: _RSocketFrame.ERROR_CODES.REJECTED_RESUME,\n                    flags: 0,\n                    message: 'RSocketServer: RESUME not supported.',\n                    streamId: _RSocketFrame.CONNECTION_STREAM_ID,\n                    type: _RSocketFrame.FRAME_TYPES.ERROR,\n                  });\n\n                  connection.close();\n                  break;\n                case _RSocketFrame.FRAME_TYPES.SETUP:\n                  if (this._setupLeaseError(frame)) {\n                    connection.sendOne({\n                      code: _RSocketFrame.ERROR_CODES.INVALID_SETUP,\n                      flags: 0,\n                      message: 'RSocketServer: LEASE not supported.',\n                      streamId: _RSocketFrame.CONNECTION_STREAM_ID,\n                      type: _RSocketFrame.FRAME_TYPES.ERROR,\n                    });\n\n                    connection.close();\n                    break;\n                  }\n                  const serializers = this._getSerializers();\n\n                  let requesterLeaseHandler;\n                  let responderLeaseHandler;\n\n                  const leasesSupplier = this._config.leases;\n                  if (leasesSupplier) {\n                    const lease = leasesSupplier();\n                    requesterLeaseHandler = new _RSocketLease.RequesterLeaseHandler(\n                      lease._receiver\n                    );\n\n                    responderLeaseHandler = new _RSocketLease.ResponderLeaseHandler(\n                      lease._sender,\n                      lease._stats\n                    );\n                  }\n                  const serverMachine = (0,\n                  _RSocketMachine.createServerMachine)(\n                    connection,\n                    (subscriber) => {\n                      swapper.swap(subscriber);\n                    },\n                    frame.lifetime,\n                    serializers,\n                    this._config.errorHandler,\n                    requesterLeaseHandler,\n                    responderLeaseHandler\n                  );\n\n                  try {\n                    const requestHandler = this._config.getRequestHandler(\n                      serverMachine,\n                      deserializePayload(serializers, frame)\n                    );\n\n                    serverMachine.setRequestHandler(requestHandler);\n                    this._connections.add(serverMachine);\n                  } catch (error) {\n                    connection.sendOne({\n                      code: _RSocketFrame.ERROR_CODES.REJECTED_SETUP,\n                      flags: 0,\n                      message:\n                        'Application rejected setup, reason: ' + error.message,\n                      streamId: _RSocketFrame.CONNECTION_STREAM_ID,\n                      type: _RSocketFrame.FRAME_TYPES.ERROR,\n                    });\n\n                    connection.close();\n                  }\n\n                  // TODO(blom): We should subscribe to connection status\n                  // so we can remove the connection when it goes away\n                  break;\n                default:\n                  (0, _invariant.default)(\n                    false,\n                    'RSocketServer: Expected first frame to be SETUP or RESUME, ' +\n                      'got `%s`.',\n                    (0, _RSocketFrame.getFrameTypeName)(frame.type)\n                  );\n              }\n            },\n            onSubscribe: (_subscription) => {\n              subscription = _subscription;\n              subscription.request(1);\n            },\n          })\n        );\n      }\n    );\n    this._config = config;\n    this._connections = new Set();\n    this._started = false;\n    this._subscription = null;\n  }\n  start() {\n    (0, _invariant.default)(\n      !this._started,\n      'RSocketServer: Unexpected call to start(), already started.'\n    );\n    this._started = true;\n    this._config.transport.start().subscribe({\n      onComplete: this._handleTransportComplete,\n      onError: this._handleTransportError,\n      onNext: this._handleTransportConnection,\n      onSubscribe: (subscription) => {\n        this._subscription = subscription;\n        subscription.request(Number.MAX_SAFE_INTEGER);\n      },\n    });\n  }\n  stop() {\n    if (this._subscription) {\n      this._subscription.cancel();\n    }\n    this._config.transport.stop();\n    this._handleTransportError(\n      new Error('RSocketServer: Connection terminated via stop().')\n    );\n  }\n\n  _getSerializers() {\n    return (\n      this._config.serializers || _RSocketSerialization.IdentitySerializers\n    );\n  }\n\n  _setupLeaseError(frame) {\n    const clientLeaseEnabled =\n      (frame.flags & _RSocketFrame.FLAGS.LEASE) === _RSocketFrame.FLAGS.LEASE;\n    const serverLeaseEnabled = this._config.leases;\n    return clientLeaseEnabled && !serverLeaseEnabled;\n  }\n}\nexports.default = RSocketServer;\n\nclass SubscriberSwapper {\n  constructor(target) {\n    this._target = target;\n  }\n\n  swap(next) {\n    this._target = next;\n    if (this._subscription) {\n      this._target.onSubscribe && this._target.onSubscribe(this._subscription);\n    }\n    return this;\n  }\n\n  onComplete() {\n    (0, _invariant.default)(this._target, 'must have target');\n    this._target.onComplete && this._target.onComplete();\n  }\n  onError(error) {\n    (0, _invariant.default)(this._target, 'must have target');\n    this._target.onError && this._target.onError(error);\n  }\n  onNext(value) {\n    (0, _invariant.default)(this._target, 'must have target');\n    this._target.onNext && this._target.onNext(value);\n  }\n  onSubscribe(subscription) {\n    (0, _invariant.default)(this._target, 'must have target');\n    this._subscription = subscription;\n    this._target.onSubscribe && this._target.onSubscribe(subscription);\n  }\n}\n\nfunction deserializePayload(serializers, frame) {\n  return {\n    data: serializers.data.deserialize(frame.data),\n    metadata: serializers.metadata.deserialize(frame.metadata),\n  };\n}\n\n\n//# sourceURL=webpack://rsocket-demo/./node_modules/rsocket-core/build/RSocketServer.js?");

/***/ }),

/***/ "./node_modules/rsocket-core/build/RSocketVersion.js":
/*!***********************************************************!*\
  !*** ./node_modules/rsocket-core/build/RSocketVersion.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("/** Copyright (c) Facebook, Inc. and its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n */\n\n\nObject.defineProperty(exports, \"__esModule\", ({value: true}));\nexports.MINOR_VERSION = exports.MAJOR_VERSION = void 0;\n\nconst MAJOR_VERSION = 1;\nexports.MAJOR_VERSION = MAJOR_VERSION;\nconst MINOR_VERSION = 0;\nexports.MINOR_VERSION = MINOR_VERSION;\n\n\n//# sourceURL=webpack://rsocket-demo/./node_modules/rsocket-core/build/RSocketVersion.js?");

/***/ }),

/***/ "./node_modules/rsocket-core/build/ReassemblyDuplexConnection.js":
/*!***********************************************************************!*\
  !*** ./node_modules/rsocket-core/build/ReassemblyDuplexConnection.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({value: true}));\nexports.ReassemblyDuplexConnection = void 0;\n\nvar _LiteBuffer = __webpack_require__(/*! ./LiteBuffer */ \"./node_modules/rsocket-core/build/LiteBuffer.js\");\nvar _rsocketFlowable = __webpack_require__(/*! rsocket-flowable */ \"./node_modules/rsocket-flowable/build/index.js\");\nvar _RSocketFrame = __webpack_require__(/*! ./RSocketFrame */ \"./node_modules/rsocket-core/build/RSocketFrame.js\");\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true,\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nclass ReassemblyDuplexConnection {\n  constructor(source) {\n    this._source = source;\n  }\n\n  sendOne(frame) {\n    this._source.sendOne(frame);\n  }\n\n  send(input) {\n    this._source.send(input);\n  }\n\n  receive() {\n    return this._source\n      .receive()\n      .lift((actual) => new ReassemblySubscriber(actual));\n  }\n\n  close() {\n    this._source.close();\n  }\n\n  connect() {\n    this._source.connect();\n  }\n\n  connectionStatus() {\n    return this._source.connectionStatus();\n  }\n}\nexports.ReassemblyDuplexConnection = ReassemblyDuplexConnection;\n\nclass ReassemblySubscriber {\n  constructor(actual) {\n    _defineProperty(this, '_framesReassemblyMap', new Map());\n    this._actual = actual;\n  }\n\n  request(n) {\n    this._subscription.request(n);\n  }\n\n  cancel() {\n    this._subscription.cancel();\n    this._framesReassemblyMap.clear();\n  }\n\n  onSubscribe(s) {\n    if (this._subscription == null) {\n      this._subscription = s;\n      this._actual.onSubscribe(this);\n    } else {\n      s.cancel();\n    }\n  }\n\n  onComplete() {\n    this._actual.onComplete();\n  }\n\n  onError(error) {\n    this._actual.onError(error);\n  }\n\n  onNext(frame) {\n    const streamId = frame.streamId;\n    if (streamId !== _RSocketFrame.CONNECTION_STREAM_ID) {\n      const hasFollowsFlag = (0, _RSocketFrame.isFollows)(frame.flags);\n      const hasCompleteFlag = (0, _RSocketFrame.isComplete)(frame.flags);\n      const isCancelOrError =\n        frame.type === _RSocketFrame.FRAME_TYPES.ERROR ||\n        frame.type === _RSocketFrame.FRAME_TYPES.CANCEL;\n\n      const storedFrame = this._framesReassemblyMap.get(streamId);\n      if (storedFrame) {\n        if (isCancelOrError) {\n          this._framesReassemblyMap.delete(streamId);\n        } else {\n          if (storedFrame.metadata && frame.metadata) {\n            storedFrame.metadata = concatContent(\n              storedFrame.metadata,\n              frame.metadata\n            );\n          }\n\n          if (storedFrame.data && frame.data) {\n            storedFrame.data = concatContent(storedFrame.data, frame.data);\n          } else if (!storedFrame.data && frame.data) {\n            storedFrame.data = frame.data;\n          }\n\n          if (!hasFollowsFlag || hasCompleteFlag) {\n            if (hasCompleteFlag) {\n              storedFrame.flags |= _RSocketFrame.FLAGS.COMPLETE;\n            }\n\n            this._framesReassemblyMap.delete(streamId);\n            this._actual.onNext(storedFrame);\n          }\n\n          return;\n        }\n      } else if (hasFollowsFlag && !hasCompleteFlag && !isCancelOrError) {\n        this._framesReassemblyMap.set(streamId, frame);\n\n        return;\n      }\n    }\n\n    this._actual.onNext(frame);\n  }\n}\n\nconst concatContent = (a, b) => {\n  switch (a.constructor.name) {\n    case 'String':\n      return a + b;\n    case 'Uint8Array':\n      const result = new Uint8Array(a.length + b.length);\n      result.set(a);\n      result.set(b, a.length);\n      return result;\n    default:\n      return _LiteBuffer.LiteBuffer.concat([a, b]);\n  }\n};\n\n\n//# sourceURL=webpack://rsocket-demo/./node_modules/rsocket-core/build/ReassemblyDuplexConnection.js?");

/***/ }),

/***/ "./node_modules/rsocket-core/build/RoutingMetadata.js":
/*!************************************************************!*\
  !*** ./node_modules/rsocket-core/build/RoutingMetadata.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({value: true}));\nexports.encodeRoutes = encodeRoutes;\nexports.encodeRoute = encodeRoute;\nexports.decodeRoutes = decodeRoutes;\nexports.RoutingMetadata = void 0;\n\nvar _LiteBuffer = __webpack_require__(/*! ./LiteBuffer */ \"./node_modules/rsocket-core/build/LiteBuffer.js\");\nvar _RSocketBufferUtils = __webpack_require__(/*! ./RSocketBufferUtils */ \"./node_modules/rsocket-core/build/RSocketBufferUtils.js\"); // $FlowFixMe\n\n// $FlowFixMe\nclass RoutingMetadata {\n  constructor(buffer) {\n    this._buffer = buffer;\n  }\n\n  iterator() {\n    return decodeRoutes(this._buffer);\n  }\n\n  // $FlowFixMe\n  [Symbol.iterator]() {\n    return decodeRoutes(this._buffer);\n  }\n}\n\n/**\n * Encode given set of routes into {@link Buffer} following the <a href=\"https://github.com/rsocket/rsocket/blob/master/Extensions/Routing.md\">Routing Metadata Layout</a>\n *\n * @param routes non-empty set of routes\n * @returns {Buffer} with encoded content\n */ exports.RoutingMetadata = RoutingMetadata;\nfunction encodeRoutes(...routes) {\n  if (routes.length < 1) {\n    throw new Error('routes should be non empty array');\n  }\n\n  return _LiteBuffer.LiteBuffer.concat(\n    routes.map((route) => encodeRoute(route))\n  );\n}\n\nfunction encodeRoute(route) {\n  const encodedRoute = (0, _RSocketBufferUtils.toBuffer)(route, 'utf8');\n\n  if (encodedRoute.length > 255) {\n    throw new Error(\n      `route length should fit into unsigned byte length but the given one is ${encodedRoute.length}`\n    );\n  }\n\n  const encodedLength = (0, _RSocketBufferUtils.createBuffer)(1);\n\n  encodedLength.writeUInt8(encodedRoute.length);\n\n  return _LiteBuffer.LiteBuffer.concat([encodedLength, encodedRoute]);\n}\n\nfunction* decodeRoutes(routeMetadataBuffer) {\n  const length = routeMetadataBuffer.byteLength;\n  let offset = 0;\n\n  while (offset < length) {\n    const routeLength = routeMetadataBuffer.readUInt8(offset++);\n\n    if (offset + routeLength > length) {\n      throw new Error(\n        `Malformed RouteMetadata. Offset(${offset}) + RouteLength(${routeLength}) is greater than TotalLength`\n      );\n    }\n\n    const route = routeMetadataBuffer.toString(\n      'utf8',\n      offset,\n      offset + routeLength\n    );\n\n    offset += routeLength;\n    yield route;\n  }\n}\n\n\n//# sourceURL=webpack://rsocket-demo/./node_modules/rsocket-core/build/RoutingMetadata.js?");

/***/ }),

/***/ "./node_modules/rsocket-core/build/WellKnownAuthType.js":
/*!**************************************************************!*\
  !*** ./node_modules/rsocket-core/build/WellKnownAuthType.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({value: true}));\nexports.TYPES_BY_AUTH_STRING = exports.TYPES_BY_AUTH_ID = exports.BEARER = exports.SIMPLE = exports.UNKNOWN_RESERVED_AUTH_TYPE = exports.UNPARSEABLE_AUTH_TYPE = exports.default = void 0;\n\nclass WellKnownAuthType {\n  constructor(str, identifier) {\n    this._string = str;\n    this._identifier = identifier;\n  }\n\n  /**\n   * Find the {@link WellKnownAuthType} for the given identifier (as an {@link number}). Valid\n   * identifiers are defined to be integers between 0 and 127, inclusive. Identifiers outside of\n   * this range will produce the {@link #UNPARSEABLE_AUTH_TYPE}. Additionally, some identifiers in\n   * that range are still only reserved and don't have a type associated yet: this method returns\n   * the {@link #UNKNOWN_RESERVED_AUTH_TYPE} when passing such an identifier, which lets call sites\n   * potentially detect this and keep the original representation when transmitting the associated\n   * metadata buffer.\n   *\n   * @param id the looked up identifier\n   * @return the {@link WellKnownAuthType}, or {@link #UNKNOWN_RESERVED_AUTH_TYPE} if the id is out\n   *     of the specification's range, or {@link #UNKNOWN_RESERVED_AUTH_TYPE} if the id is one that\n   *     is merely reserved but unknown to this implementation.\n   */\n  static fromIdentifier(id) {\n    if (id < 0x00 || id > 0x7f) {\n      return UNPARSEABLE_AUTH_TYPE;\n    }\n    return TYPES_BY_AUTH_ID[id];\n  }\n\n  /**\n   * Find the {@link WellKnownAuthType} for the given {@link String} representation. If the\n   * representation is {@code null} or doesn't match a {@link WellKnownAuthType}, the {@link\n   * #UNPARSEABLE_AUTH_TYPE} is returned.\n   *\n   * @param authTypeString the looked up mime type\n   * @return the matching {@link WellKnownAuthType}, or {@link #UNPARSEABLE_AUTH_TYPE} if none\n   *     matches\n   */\n  static fromString(authTypeString) {\n    if (!authTypeString) {\n      throw new Error('type must be non-null');\n    }\n\n    // force UNPARSEABLE if by chance UNKNOWN_RESERVED_MIME_TYPE's text has been used\n    if (authTypeString === UNKNOWN_RESERVED_AUTH_TYPE.string) {\n      return UNPARSEABLE_AUTH_TYPE;\n    }\n\n    return TYPES_BY_AUTH_STRING.get(authTypeString) || UNPARSEABLE_AUTH_TYPE;\n  }\n\n  /** @return the byte identifier of the mime type, guaranteed to be positive or zero. */\n  get identifier() {\n    return this._identifier;\n  }\n\n  /**\n   * @return the mime type represented as a {@link String}, which is made of US_ASCII compatible\n   *     characters only\n   */\n  get string() {\n    return this._string;\n  }\n\n  /** @see #string() */\n  toString() {\n    return this._string;\n  }\n}\nexports.default = WellKnownAuthType;\n\nconst UNPARSEABLE_AUTH_TYPE = new WellKnownAuthType(\n  'UNPARSEABLE_AUTH_TYPE_DO_NOT_USE',\n  -2\n);\nexports.UNPARSEABLE_AUTH_TYPE = UNPARSEABLE_AUTH_TYPE;\n\nconst UNKNOWN_RESERVED_AUTH_TYPE = new WellKnownAuthType(\n  'UNKNOWN_YET_RESERVED_DO_NOT_USE',\n  -1\n);\nexports.UNKNOWN_RESERVED_AUTH_TYPE = UNKNOWN_RESERVED_AUTH_TYPE;\n\nconst SIMPLE = new WellKnownAuthType('simple', 0x00);\nexports.SIMPLE = SIMPLE;\nconst BEARER = new WellKnownAuthType('bearer', 0x01);\nexports.BEARER = BEARER;\n\nconst TYPES_BY_AUTH_ID = new Array(128);\nexports.TYPES_BY_AUTH_ID = TYPES_BY_AUTH_ID;\nconst TYPES_BY_AUTH_STRING = new Map();\nexports.TYPES_BY_AUTH_STRING = TYPES_BY_AUTH_STRING;\n\nconst ALL_MIME_TYPES = [\n  UNPARSEABLE_AUTH_TYPE,\n  UNKNOWN_RESERVED_AUTH_TYPE,\n  SIMPLE,\n  BEARER,\n];\n\nTYPES_BY_AUTH_ID.fill(UNKNOWN_RESERVED_AUTH_TYPE);\n\nfor (const value of ALL_MIME_TYPES) {\n  if (value.identifier >= 0) {\n    TYPES_BY_AUTH_ID[value.identifier] = value;\n    TYPES_BY_AUTH_STRING.set(value.string, value);\n  }\n}\n\nif (Object.seal) {\n  Object.seal(TYPES_BY_AUTH_ID);\n}\n\n\n//# sourceURL=webpack://rsocket-demo/./node_modules/rsocket-core/build/WellKnownAuthType.js?");

/***/ }),

/***/ "./node_modules/rsocket-core/build/WellKnownMimeType.js":
/*!**************************************************************!*\
  !*** ./node_modules/rsocket-core/build/WellKnownMimeType.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({value: true}));\nexports.TYPES_BY_MIME_STRING = exports.TYPES_BY_MIME_ID = exports.MESSAGE_RSOCKET_COMPOSITE_METADATA = exports.MESSAGE_RSOCKET_ROUTING = exports.MESSAGE_RSOCKET_TRACING_ZIPKIN = exports.MESSAGE_RSOCKET_AUTHENTICATION = exports.MESSAGE_RSOCKET_ACCEPT_MIMETYPES = exports.MESSAGE_RSOCKET_MIMETYPE = exports.APPLICATION_CLOUDEVENTS_JSON = exports.APPLICATION_JAVA_OBJECT = exports.APPLICATION_HESSIAN = exports.VIDEO_VP8 = exports.VIDEO_H265 = exports.VIDEO_H264 = exports.TEXT_XML = exports.TEXT_PLAIN = exports.TEXT_HTML = exports.TEXT_CSV = exports.TEXT_CSS = exports.MULTIPART_MIXED = exports.IMAGE_TIFF = exports.IMAGE_PNG = exports.IMAGE_JPEG = exports.IMAGE_HEIF = exports.IMAGE_HEIF_SEQUENCE = exports.IMAGE_HEIC = exports.IMAGE_HEIC_SEQUENCE = exports.IMAGE_GIG = exports.IMAGE_BMP = exports.AUDIO_VORBIS = exports.AUDIO_OPUS = exports.AUDIO_OGG = exports.AUDIO_MPEG = exports.AUDIO_MPEG3 = exports.AUDIO_MP4 = exports.AUDIO_MP3 = exports.AUDIO_AAC = exports.APPLICATION_ZIP = exports.APPLICATION_XML = exports.APPLICATION_PROTOBUF = exports.APPLICATION_THRIFT = exports.APPLICATION_PDF = exports.APPLICATION_OCTET_STREAM = exports.APPLICATION_JSON = exports.APPLICATION_JAVASCRIPT = exports.APPLICATION_GZIP = exports.APPLICATION_GRAPHQL = exports.APPLICATION_CBOR = exports.APPLICATION_AVRO = exports.UNKNOWN_RESERVED_MIME_TYPE = exports.UNPARSEABLE_MIME_TYPE = exports.default = void 0;\n\nclass WellKnownMimeType {\n  constructor(str, identifier) {\n    this._string = str;\n    this._identifier = identifier;\n  }\n\n  /**\n   * Find the {@link WellKnownMimeType} for the given identifier (as an {@code int}). Valid\n   * identifiers are defined to be integers between 0 and 127, inclusive. Identifiers outside of\n   * this range will produce the {@link #UNPARSEABLE_MIME_TYPE}. Additionally, some identifiers in\n   * that range are still only reserved and don't have a type associated yet: this method returns\n   * the {@link #UNKNOWN_RESERVED_MIME_TYPE} when passing such an identifier, which lets call sites\n   * potentially detect this and keep the original representation when transmitting the associated\n   * metadata buffer.\n   *\n   * @param id the looked up identifier\n   * @return the {@link WellKnownMimeType}, or {@link #UNKNOWN_RESERVED_MIME_TYPE} if the id is out\n   *     of the specification's range, or {@link #UNKNOWN_RESERVED_MIME_TYPE} if the id is one that\n   *     is merely reserved but unknown to this implementation.\n   */\n  static fromIdentifier(id) {\n    if (id < 0x00 || id > 0x7f) {\n      return UNPARSEABLE_MIME_TYPE;\n    }\n    return TYPES_BY_MIME_ID[id];\n  }\n\n  /**\n   * Find the {@link WellKnownMimeType} for the given {@link String} representation. If the\n   * representation is {@code null} or doesn't match a {@link WellKnownMimeType}, the {@link\n   * #UNPARSEABLE_MIME_TYPE} is returned.\n   *\n   * @param mimeType the looked up mime type\n   * @return the matching {@link WellKnownMimeType}, or {@link #UNPARSEABLE_MIME_TYPE} if none\n   *     matches\n   */\n  static fromString(mimeType) {\n    if (!mimeType) {\n      throw new Error('type must be non-null');\n    }\n\n    // force UNPARSEABLE if by chance UNKNOWN_RESERVED_MIME_TYPE's text has been used\n    if (mimeType === UNKNOWN_RESERVED_MIME_TYPE.string) {\n      return UNPARSEABLE_MIME_TYPE;\n    }\n\n    return TYPES_BY_MIME_STRING.get(mimeType) || UNPARSEABLE_MIME_TYPE;\n  }\n\n  /** @return the byte identifier of the mime type, guaranteed to be positive or zero. */\n  get identifier() {\n    return this._identifier;\n  }\n\n  /**\n   * @return the mime type represented as a {@link String}, which is made of US_ASCII compatible\n   *     characters only\n   */\n  get string() {\n    return this._string;\n  }\n\n  /** @see #getString() */\n  toString() {\n    return this._string;\n  }\n}\nexports.default = WellKnownMimeType;\n\nconst UNPARSEABLE_MIME_TYPE = new WellKnownMimeType(\n  'UNPARSEABLE_MIME_TYPE_DO_NOT_USE',\n  -2\n);\nexports.UNPARSEABLE_MIME_TYPE = UNPARSEABLE_MIME_TYPE;\n\nconst UNKNOWN_RESERVED_MIME_TYPE = new WellKnownMimeType(\n  'UNKNOWN_YET_RESERVED_DO_NOT_USE',\n  -1\n);\nexports.UNKNOWN_RESERVED_MIME_TYPE = UNKNOWN_RESERVED_MIME_TYPE;\n\nconst APPLICATION_AVRO = new WellKnownMimeType('application/avro', 0x00);\nexports.APPLICATION_AVRO = APPLICATION_AVRO;\n\nconst APPLICATION_CBOR = new WellKnownMimeType('application/cbor', 0x01);\nexports.APPLICATION_CBOR = APPLICATION_CBOR;\n\nconst APPLICATION_GRAPHQL = new WellKnownMimeType('application/graphql', 0x02);\nexports.APPLICATION_GRAPHQL = APPLICATION_GRAPHQL;\n\nconst APPLICATION_GZIP = new WellKnownMimeType('application/gzip', 0x03);\nexports.APPLICATION_GZIP = APPLICATION_GZIP;\n\nconst APPLICATION_JAVASCRIPT = new WellKnownMimeType(\n  'application/javascript',\n  0x04\n);\nexports.APPLICATION_JAVASCRIPT = APPLICATION_JAVASCRIPT;\n\nconst APPLICATION_JSON = new WellKnownMimeType('application/json', 0x05);\nexports.APPLICATION_JSON = APPLICATION_JSON;\n\nconst APPLICATION_OCTET_STREAM = new WellKnownMimeType(\n  'application/octet-stream',\n  0x06\n);\nexports.APPLICATION_OCTET_STREAM = APPLICATION_OCTET_STREAM;\n\nconst APPLICATION_PDF = new WellKnownMimeType('application/pdf', 0x07);\nexports.APPLICATION_PDF = APPLICATION_PDF;\n\nconst APPLICATION_THRIFT = new WellKnownMimeType(\n  'application/vnd.apache.thrift.binary',\n  0x08\n);\nexports.APPLICATION_THRIFT = APPLICATION_THRIFT;\n\nconst APPLICATION_PROTOBUF = new WellKnownMimeType(\n  'application/vnd.google.protobuf',\n  0x09\n);\nexports.APPLICATION_PROTOBUF = APPLICATION_PROTOBUF;\n\nconst APPLICATION_XML = new WellKnownMimeType('application/xml', 0x0a);\nexports.APPLICATION_XML = APPLICATION_XML;\n\nconst APPLICATION_ZIP = new WellKnownMimeType('application/zip', 0x0b);\nexports.APPLICATION_ZIP = APPLICATION_ZIP;\n\nconst AUDIO_AAC = new WellKnownMimeType('audio/aac', 0x0c);\nexports.AUDIO_AAC = AUDIO_AAC;\n\nconst AUDIO_MP3 = new WellKnownMimeType('audio/mp3', 0x0d);\nexports.AUDIO_MP3 = AUDIO_MP3;\n\nconst AUDIO_MP4 = new WellKnownMimeType('audio/mp4', 0x0e);\nexports.AUDIO_MP4 = AUDIO_MP4;\n\nconst AUDIO_MPEG3 = new WellKnownMimeType('audio/mpeg3', 0x0f);\nexports.AUDIO_MPEG3 = AUDIO_MPEG3;\n\nconst AUDIO_MPEG = new WellKnownMimeType('audio/mpeg', 0x10);\nexports.AUDIO_MPEG = AUDIO_MPEG;\n\nconst AUDIO_OGG = new WellKnownMimeType('audio/ogg', 0x11);\nexports.AUDIO_OGG = AUDIO_OGG;\n\nconst AUDIO_OPUS = new WellKnownMimeType('audio/opus', 0x12);\nexports.AUDIO_OPUS = AUDIO_OPUS;\n\nconst AUDIO_VORBIS = new WellKnownMimeType('audio/vorbis', 0x13);\nexports.AUDIO_VORBIS = AUDIO_VORBIS;\n\nconst IMAGE_BMP = new WellKnownMimeType('image/bmp', 0x14);\nexports.IMAGE_BMP = IMAGE_BMP;\n\nconst IMAGE_GIG = new WellKnownMimeType('image/gif', 0x15);\nexports.IMAGE_GIG = IMAGE_GIG;\n\nconst IMAGE_HEIC_SEQUENCE = new WellKnownMimeType('image/heic-sequence', 0x16);\nexports.IMAGE_HEIC_SEQUENCE = IMAGE_HEIC_SEQUENCE;\n\nconst IMAGE_HEIC = new WellKnownMimeType('image/heic', 0x17);\nexports.IMAGE_HEIC = IMAGE_HEIC;\n\nconst IMAGE_HEIF_SEQUENCE = new WellKnownMimeType('image/heif-sequence', 0x18);\nexports.IMAGE_HEIF_SEQUENCE = IMAGE_HEIF_SEQUENCE;\n\nconst IMAGE_HEIF = new WellKnownMimeType('image/heif', 0x19);\nexports.IMAGE_HEIF = IMAGE_HEIF;\n\nconst IMAGE_JPEG = new WellKnownMimeType('image/jpeg', 0x1a);\nexports.IMAGE_JPEG = IMAGE_JPEG;\n\nconst IMAGE_PNG = new WellKnownMimeType('image/png', 0x1b);\nexports.IMAGE_PNG = IMAGE_PNG;\n\nconst IMAGE_TIFF = new WellKnownMimeType('image/tiff', 0x1c);\nexports.IMAGE_TIFF = IMAGE_TIFF;\n\nconst MULTIPART_MIXED = new WellKnownMimeType('multipart/mixed', 0x1d);\nexports.MULTIPART_MIXED = MULTIPART_MIXED;\n\nconst TEXT_CSS = new WellKnownMimeType('text/css', 0x1e);\nexports.TEXT_CSS = TEXT_CSS;\n\nconst TEXT_CSV = new WellKnownMimeType('text/csv', 0x1f);\nexports.TEXT_CSV = TEXT_CSV;\n\nconst TEXT_HTML = new WellKnownMimeType('text/html', 0x20);\nexports.TEXT_HTML = TEXT_HTML;\n\nconst TEXT_PLAIN = new WellKnownMimeType('text/plain', 0x21);\nexports.TEXT_PLAIN = TEXT_PLAIN;\n\nconst TEXT_XML = new WellKnownMimeType('text/xml', 0x22);\nexports.TEXT_XML = TEXT_XML;\n\nconst VIDEO_H264 = new WellKnownMimeType('video/H264', 0x23);\nexports.VIDEO_H264 = VIDEO_H264;\n\nconst VIDEO_H265 = new WellKnownMimeType('video/H265', 0x24);\nexports.VIDEO_H265 = VIDEO_H265;\n\nconst VIDEO_VP8 = new WellKnownMimeType('video/VP8', 0x25);\nexports.VIDEO_VP8 = VIDEO_VP8;\n\nconst APPLICATION_HESSIAN = new WellKnownMimeType(\n  'application/x-hessian',\n  0x26\n);\nexports.APPLICATION_HESSIAN = APPLICATION_HESSIAN;\n\nconst APPLICATION_JAVA_OBJECT = new WellKnownMimeType(\n  'application/x-java-object',\n  0x27\n);\nexports.APPLICATION_JAVA_OBJECT = APPLICATION_JAVA_OBJECT;\n\nconst APPLICATION_CLOUDEVENTS_JSON = new WellKnownMimeType(\n  'application/cloudevents+json',\n  0x28\n);\n\n// ... reserved for future use ...\nexports.APPLICATION_CLOUDEVENTS_JSON = APPLICATION_CLOUDEVENTS_JSON;\nconst MESSAGE_RSOCKET_MIMETYPE = new WellKnownMimeType(\n  'message/x.rsocket.mime-type.v0',\n  0x7a\n);\nexports.MESSAGE_RSOCKET_MIMETYPE = MESSAGE_RSOCKET_MIMETYPE;\n\nconst MESSAGE_RSOCKET_ACCEPT_MIMETYPES = new WellKnownMimeType(\n  'message/x.rsocket.accept-mime-types.v0',\n  0x7b\n);\nexports.MESSAGE_RSOCKET_ACCEPT_MIMETYPES = MESSAGE_RSOCKET_ACCEPT_MIMETYPES;\n\nconst MESSAGE_RSOCKET_AUTHENTICATION = new WellKnownMimeType(\n  'message/x.rsocket.authentication.v0',\n  0x7c\n);\nexports.MESSAGE_RSOCKET_AUTHENTICATION = MESSAGE_RSOCKET_AUTHENTICATION;\n\nconst MESSAGE_RSOCKET_TRACING_ZIPKIN = new WellKnownMimeType(\n  'message/x.rsocket.tracing-zipkin.v0',\n  0x7d\n);\nexports.MESSAGE_RSOCKET_TRACING_ZIPKIN = MESSAGE_RSOCKET_TRACING_ZIPKIN;\n\nconst MESSAGE_RSOCKET_ROUTING = new WellKnownMimeType(\n  'message/x.rsocket.routing.v0',\n  0x7e\n);\nexports.MESSAGE_RSOCKET_ROUTING = MESSAGE_RSOCKET_ROUTING;\n\nconst MESSAGE_RSOCKET_COMPOSITE_METADATA = new WellKnownMimeType(\n  'message/x.rsocket.composite-metadata.v0',\n  0x7f\n);\nexports.MESSAGE_RSOCKET_COMPOSITE_METADATA = MESSAGE_RSOCKET_COMPOSITE_METADATA;\n\nconst TYPES_BY_MIME_ID = new Array(128);\nexports.TYPES_BY_MIME_ID = TYPES_BY_MIME_ID;\nconst TYPES_BY_MIME_STRING = new Map();\nexports.TYPES_BY_MIME_STRING = TYPES_BY_MIME_STRING;\n\nconst ALL_MIME_TYPES = [\n  UNPARSEABLE_MIME_TYPE,\n  UNKNOWN_RESERVED_MIME_TYPE,\n  APPLICATION_AVRO,\n  APPLICATION_CBOR,\n  APPLICATION_GRAPHQL,\n  APPLICATION_GZIP,\n  APPLICATION_JAVASCRIPT,\n  APPLICATION_JSON,\n  APPLICATION_OCTET_STREAM,\n  APPLICATION_PDF,\n  APPLICATION_THRIFT,\n  APPLICATION_PROTOBUF,\n  APPLICATION_XML,\n  APPLICATION_ZIP,\n  AUDIO_AAC,\n  AUDIO_MP3,\n  AUDIO_MP4,\n  AUDIO_MPEG3,\n  AUDIO_MPEG,\n  AUDIO_OGG,\n  AUDIO_OPUS,\n  AUDIO_VORBIS,\n  IMAGE_BMP,\n  IMAGE_GIG,\n  IMAGE_HEIC_SEQUENCE,\n  IMAGE_HEIC,\n  IMAGE_HEIF_SEQUENCE,\n  IMAGE_HEIF,\n  IMAGE_JPEG,\n  IMAGE_PNG,\n  IMAGE_TIFF,\n  MULTIPART_MIXED,\n  TEXT_CSS,\n  TEXT_CSV,\n  TEXT_HTML,\n  TEXT_PLAIN,\n  TEXT_XML,\n  VIDEO_H264,\n  VIDEO_H265,\n  VIDEO_VP8,\n  APPLICATION_HESSIAN,\n  APPLICATION_JAVA_OBJECT,\n  APPLICATION_CLOUDEVENTS_JSON,\n  MESSAGE_RSOCKET_MIMETYPE,\n  MESSAGE_RSOCKET_ACCEPT_MIMETYPES,\n  MESSAGE_RSOCKET_AUTHENTICATION,\n  MESSAGE_RSOCKET_TRACING_ZIPKIN,\n  MESSAGE_RSOCKET_ROUTING,\n  MESSAGE_RSOCKET_COMPOSITE_METADATA,\n];\n\nTYPES_BY_MIME_ID.fill(UNKNOWN_RESERVED_MIME_TYPE);\n\nfor (const value of ALL_MIME_TYPES) {\n  if (value.identifier >= 0) {\n    TYPES_BY_MIME_ID[value.identifier] = value;\n    TYPES_BY_MIME_STRING.set(value.string, value);\n  }\n}\n\nif (Object.seal) {\n  Object.seal(TYPES_BY_MIME_ID);\n}\n\n\n//# sourceURL=webpack://rsocket-demo/./node_modules/rsocket-core/build/WellKnownMimeType.js?");

/***/ }),

/***/ "./node_modules/rsocket-core/build/index.js":
/*!**************************************************!*\
  !*** ./node_modules/rsocket-core/build/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/** Copyright (c) Facebook, Inc. and its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n */\n\n\nObject.defineProperty(exports, \"__esModule\", ({value: true}));\nObject.defineProperty(exports, \"RSocketClient\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketClient.default;\n  },\n}));\nObject.defineProperty(exports, \"RSocketServer\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketServer.default;\n  },\n}));\nObject.defineProperty(exports, \"RSocketResumableTransport\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketResumableTransport.default;\n  },\n}));\nObject.defineProperty(exports, \"WellKnownMimeType\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.default;\n  },\n}));\nObject.defineProperty(exports, \"UNPARSEABLE_MIME_TYPE\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.UNPARSEABLE_MIME_TYPE;\n  },\n}));\nObject.defineProperty(exports, \"UNKNOWN_RESERVED_MIME_TYPE\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.UNKNOWN_RESERVED_MIME_TYPE;\n  },\n}));\nObject.defineProperty(exports, \"APPLICATION_AVRO\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.APPLICATION_AVRO;\n  },\n}));\nObject.defineProperty(exports, \"APPLICATION_CBOR\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.APPLICATION_CBOR;\n  },\n}));\nObject.defineProperty(exports, \"APPLICATION_GRAPHQL\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.APPLICATION_GRAPHQL;\n  },\n}));\nObject.defineProperty(exports, \"APPLICATION_GZIP\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.APPLICATION_GZIP;\n  },\n}));\nObject.defineProperty(exports, \"APPLICATION_JAVASCRIPT\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.APPLICATION_JAVASCRIPT;\n  },\n}));\nObject.defineProperty(exports, \"APPLICATION_JSON\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.APPLICATION_JSON;\n  },\n}));\nObject.defineProperty(exports, \"APPLICATION_OCTET_STREAM\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.APPLICATION_OCTET_STREAM;\n  },\n}));\nObject.defineProperty(exports, \"APPLICATION_PDF\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.APPLICATION_PDF;\n  },\n}));\nObject.defineProperty(exports, \"APPLICATION_THRIFT\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.APPLICATION_THRIFT;\n  },\n}));\nObject.defineProperty(exports, \"APPLICATION_PROTOBUF\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.APPLICATION_PROTOBUF;\n  },\n}));\nObject.defineProperty(exports, \"APPLICATION_XML\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.APPLICATION_XML;\n  },\n}));\nObject.defineProperty(exports, \"APPLICATION_ZIP\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.APPLICATION_ZIP;\n  },\n}));\nObject.defineProperty(exports, \"AUDIO_AAC\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.AUDIO_AAC;\n  },\n}));\nObject.defineProperty(exports, \"AUDIO_MP3\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.AUDIO_MP3;\n  },\n}));\nObject.defineProperty(exports, \"AUDIO_MP4\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.AUDIO_MP4;\n  },\n}));\nObject.defineProperty(exports, \"AUDIO_MPEG3\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.AUDIO_MPEG3;\n  },\n}));\nObject.defineProperty(exports, \"AUDIO_MPEG\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.AUDIO_MPEG;\n  },\n}));\nObject.defineProperty(exports, \"AUDIO_OGG\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.AUDIO_OGG;\n  },\n}));\nObject.defineProperty(exports, \"AUDIO_OPUS\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.AUDIO_OPUS;\n  },\n}));\nObject.defineProperty(exports, \"AUDIO_VORBIS\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.AUDIO_VORBIS;\n  },\n}));\nObject.defineProperty(exports, \"IMAGE_BMP\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.IMAGE_BMP;\n  },\n}));\nObject.defineProperty(exports, \"IMAGE_GIG\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.IMAGE_GIG;\n  },\n}));\nObject.defineProperty(exports, \"IMAGE_HEIC_SEQUENCE\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.IMAGE_HEIC_SEQUENCE;\n  },\n}));\nObject.defineProperty(exports, \"IMAGE_HEIC\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.IMAGE_HEIC;\n  },\n}));\nObject.defineProperty(exports, \"IMAGE_HEIF_SEQUENCE\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.IMAGE_HEIF_SEQUENCE;\n  },\n}));\nObject.defineProperty(exports, \"IMAGE_HEIF\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.IMAGE_HEIF;\n  },\n}));\nObject.defineProperty(exports, \"IMAGE_JPEG\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.IMAGE_JPEG;\n  },\n}));\nObject.defineProperty(exports, \"IMAGE_PNG\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.IMAGE_PNG;\n  },\n}));\nObject.defineProperty(exports, \"IMAGE_TIFF\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.IMAGE_TIFF;\n  },\n}));\nObject.defineProperty(exports, \"MULTIPART_MIXED\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.MULTIPART_MIXED;\n  },\n}));\nObject.defineProperty(exports, \"TEXT_CSS\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.TEXT_CSS;\n  },\n}));\nObject.defineProperty(exports, \"TEXT_CSV\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.TEXT_CSV;\n  },\n}));\nObject.defineProperty(exports, \"TEXT_HTML\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.TEXT_HTML;\n  },\n}));\nObject.defineProperty(exports, \"TEXT_PLAIN\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.TEXT_PLAIN;\n  },\n}));\nObject.defineProperty(exports, \"TEXT_XML\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.TEXT_XML;\n  },\n}));\nObject.defineProperty(exports, \"VIDEO_H264\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.VIDEO_H264;\n  },\n}));\nObject.defineProperty(exports, \"VIDEO_H265\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.VIDEO_H265;\n  },\n}));\nObject.defineProperty(exports, \"VIDEO_VP8\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.VIDEO_VP8;\n  },\n}));\nObject.defineProperty(exports, \"APPLICATION_HESSIAN\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.APPLICATION_HESSIAN;\n  },\n}));\nObject.defineProperty(exports, \"APPLICATION_JAVA_OBJECT\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.APPLICATION_JAVA_OBJECT;\n  },\n}));\nObject.defineProperty(exports, \"APPLICATION_CLOUDEVENTS_JSON\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.APPLICATION_CLOUDEVENTS_JSON;\n  },\n}));\nObject.defineProperty(exports, \"MESSAGE_RSOCKET_MIMETYPE\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.MESSAGE_RSOCKET_MIMETYPE;\n  },\n}));\nObject.defineProperty(exports, \"MESSAGE_RSOCKET_ACCEPT_MIMETYPES\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.MESSAGE_RSOCKET_ACCEPT_MIMETYPES;\n  },\n}));\nObject.defineProperty(exports, \"MESSAGE_RSOCKET_AUTHENTICATION\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.MESSAGE_RSOCKET_AUTHENTICATION;\n  },\n}));\nObject.defineProperty(exports, \"MESSAGE_RSOCKET_TRACING_ZIPKIN\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.MESSAGE_RSOCKET_TRACING_ZIPKIN;\n  },\n}));\nObject.defineProperty(exports, \"MESSAGE_RSOCKET_ROUTING\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.MESSAGE_RSOCKET_ROUTING;\n  },\n}));\nObject.defineProperty(exports, \"MESSAGE_RSOCKET_COMPOSITE_METADATA\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownMimeType.MESSAGE_RSOCKET_COMPOSITE_METADATA;\n  },\n}));\nObject.defineProperty(exports, \"WellKnownAuthType\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownAuthType.default;\n  },\n}));\nObject.defineProperty(exports, \"UNPARSEABLE_AUTH_TYPE\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownAuthType.UNPARSEABLE_AUTH_TYPE;\n  },\n}));\nObject.defineProperty(exports, \"UNKNOWN_RESERVED_AUTH_TYPE\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownAuthType.UNKNOWN_RESERVED_AUTH_TYPE;\n  },\n}));\nObject.defineProperty(exports, \"SIMPLE\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownAuthType.SIMPLE;\n  },\n}));\nObject.defineProperty(exports, \"BEARER\", ({\n  enumerable: true,\n  get: function () {\n    return _WellKnownAuthType.BEARER;\n  },\n}));\nObject.defineProperty(exports, \"CONNECTION_STREAM_ID\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketFrame.CONNECTION_STREAM_ID;\n  },\n}));\nObject.defineProperty(exports, \"ERROR_CODES\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketFrame.ERROR_CODES;\n  },\n}));\nObject.defineProperty(exports, \"ERROR_EXPLANATIONS\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketFrame.ERROR_EXPLANATIONS;\n  },\n}));\nObject.defineProperty(exports, \"FLAGS_MASK\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketFrame.FLAGS_MASK;\n  },\n}));\nObject.defineProperty(exports, \"FLAGS\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketFrame.FLAGS;\n  },\n}));\nObject.defineProperty(exports, \"FRAME_TYPE_OFFFSET\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketFrame.FRAME_TYPE_OFFFSET;\n  },\n}));\nObject.defineProperty(exports, \"FRAME_TYPES\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketFrame.FRAME_TYPES;\n  },\n}));\nObject.defineProperty(exports, \"MAX_CODE\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketFrame.MAX_CODE;\n  },\n}));\nObject.defineProperty(exports, \"MAX_KEEPALIVE\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketFrame.MAX_KEEPALIVE;\n  },\n}));\nObject.defineProperty(exports, \"MAX_LIFETIME\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketFrame.MAX_LIFETIME;\n  },\n}));\nObject.defineProperty(exports, \"MAX_MIME_LENGTH\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketFrame.MAX_MIME_LENGTH;\n  },\n}));\nObject.defineProperty(exports, \"MAX_RESUME_LENGTH\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketFrame.MAX_RESUME_LENGTH;\n  },\n}));\nObject.defineProperty(exports, \"MAX_STREAM_ID\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketFrame.MAX_STREAM_ID;\n  },\n}));\nObject.defineProperty(exports, \"MAX_VERSION\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketFrame.MAX_VERSION;\n  },\n}));\nObject.defineProperty(exports, \"createErrorFromFrame\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketFrame.createErrorFromFrame;\n  },\n}));\nObject.defineProperty(exports, \"getErrorCodeExplanation\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketFrame.getErrorCodeExplanation;\n  },\n}));\nObject.defineProperty(exports, \"isComplete\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketFrame.isComplete;\n  },\n}));\nObject.defineProperty(exports, \"isIgnore\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketFrame.isIgnore;\n  },\n}));\nObject.defineProperty(exports, \"isLease\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketFrame.isLease;\n  },\n}));\nObject.defineProperty(exports, \"isMetadata\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketFrame.isMetadata;\n  },\n}));\nObject.defineProperty(exports, \"isNext\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketFrame.isNext;\n  },\n}));\nObject.defineProperty(exports, \"isRespond\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketFrame.isRespond;\n  },\n}));\nObject.defineProperty(exports, \"isResumeEnable\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketFrame.isResumeEnable;\n  },\n}));\nObject.defineProperty(exports, \"printFrame\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketFrame.printFrame;\n  },\n}));\nObject.defineProperty(exports, \"deserializeFrame\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketBinaryFraming.deserializeFrame;\n  },\n}));\nObject.defineProperty(exports, \"deserializeFrameWithLength\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketBinaryFraming.deserializeFrameWithLength;\n  },\n}));\nObject.defineProperty(exports, \"deserializeFrames\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketBinaryFraming.deserializeFrames;\n  },\n}));\nObject.defineProperty(exports, \"serializeFrame\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketBinaryFraming.serializeFrame;\n  },\n}));\nObject.defineProperty(exports, \"serializeFrameWithLength\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketBinaryFraming.serializeFrameWithLength;\n  },\n}));\nObject.defineProperty(exports, \"byteLength\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketBufferUtils.byteLength;\n  },\n}));\nObject.defineProperty(exports, \"createBuffer\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketBufferUtils.createBuffer;\n  },\n}));\nObject.defineProperty(exports, \"readUInt24BE\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketBufferUtils.readUInt24BE;\n  },\n}));\nObject.defineProperty(exports, \"toBuffer\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketBufferUtils.toBuffer;\n  },\n}));\nObject.defineProperty(exports, \"writeUInt24BE\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketBufferUtils.writeUInt24BE;\n  },\n}));\nObject.defineProperty(exports, \"BufferEncoders\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketEncoding.BufferEncoders;\n  },\n}));\nObject.defineProperty(exports, \"BufferEncoder\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketEncoding.BufferEncoder;\n  },\n}));\nObject.defineProperty(exports, \"Utf8Encoders\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketEncoding.Utf8Encoders;\n  },\n}));\nObject.defineProperty(exports, \"UTF8Encoder\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketEncoding.UTF8Encoder;\n  },\n}));\nObject.defineProperty(exports, \"IdentitySerializer\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketSerialization.IdentitySerializer;\n  },\n}));\nObject.defineProperty(exports, \"IdentitySerializers\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketSerialization.IdentitySerializers;\n  },\n}));\nObject.defineProperty(exports, \"JsonSerializer\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketSerialization.JsonSerializer;\n  },\n}));\nObject.defineProperty(exports, \"JsonSerializers\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketSerialization.JsonSerializers;\n  },\n}));\nObject.defineProperty(exports, \"Leases\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketLease.Leases;\n  },\n}));\nObject.defineProperty(exports, \"Lease\", ({\n  enumerable: true,\n  get: function () {\n    return _RSocketLease.Lease;\n  },\n}));\nObject.defineProperty(exports, \"CompositeMetadata\", ({\n  enumerable: true,\n  get: function () {\n    return _CompositeMetadata.CompositeMetadata;\n  },\n}));\nObject.defineProperty(exports, \"ReservedMimeTypeEntry\", ({\n  enumerable: true,\n  get: function () {\n    return _CompositeMetadata.ReservedMimeTypeEntry;\n  },\n}));\nObject.defineProperty(exports, \"WellKnownMimeTypeEntry\", ({\n  enumerable: true,\n  get: function () {\n    return _CompositeMetadata.WellKnownMimeTypeEntry;\n  },\n}));\nObject.defineProperty(exports, \"ExplicitMimeTimeEntry\", ({\n  enumerable: true,\n  get: function () {\n    return _CompositeMetadata.ExplicitMimeTimeEntry;\n  },\n}));\nObject.defineProperty(exports, \"encodeAndAddCustomMetadata\", ({\n  enumerable: true,\n  get: function () {\n    return _CompositeMetadata.encodeAndAddCustomMetadata;\n  },\n}));\nObject.defineProperty(exports, \"encodeAndAddWellKnownMetadata\", ({\n  enumerable: true,\n  get: function () {\n    return _CompositeMetadata.encodeAndAddWellKnownMetadata;\n  },\n}));\nObject.defineProperty(exports, \"encodeCompositeMetadata\", ({\n  enumerable: true,\n  get: function () {\n    return _CompositeMetadata.encodeCompositeMetadata;\n  },\n}));\nObject.defineProperty(exports, \"decodeCompositeMetadata\", ({\n  enumerable: true,\n  get: function () {\n    return _CompositeMetadata.decodeCompositeMetadata;\n  },\n}));\nObject.defineProperty(exports, \"RoutingMetadata\", ({\n  enumerable: true,\n  get: function () {\n    return _RoutingMetadata.RoutingMetadata;\n  },\n}));\nObject.defineProperty(exports, \"encodeRoute\", ({\n  enumerable: true,\n  get: function () {\n    return _RoutingMetadata.encodeRoute;\n  },\n}));\nObject.defineProperty(exports, \"encodeRoutes\", ({\n  enumerable: true,\n  get: function () {\n    return _RoutingMetadata.encodeRoutes;\n  },\n}));\nObject.defineProperty(exports, \"decodeRoutes\", ({\n  enumerable: true,\n  get: function () {\n    return _RoutingMetadata.decodeRoutes;\n  },\n}));\nObject.defineProperty(exports, \"encodeSimpleAuthMetadata\", ({\n  enumerable: true,\n  get: function () {\n    return _AuthMetadata.encodeSimpleAuthMetadata;\n  },\n}));\nObject.defineProperty(exports, \"encodeBearerAuthMetadata\", ({\n  enumerable: true,\n  get: function () {\n    return _AuthMetadata.encodeBearerAuthMetadata;\n  },\n}));\nObject.defineProperty(exports, \"encodeWellKnownAuthMetadata\", ({\n  enumerable: true,\n  get: function () {\n    return _AuthMetadata.encodeWellKnownAuthMetadata;\n  },\n}));\nObject.defineProperty(exports, \"encodeCustomAuthMetadata\", ({\n  enumerable: true,\n  get: function () {\n    return _AuthMetadata.encodeCustomAuthMetadata;\n  },\n}));\nObject.defineProperty(exports, \"decodeSimpleAuthPayload\", ({\n  enumerable: true,\n  get: function () {\n    return _AuthMetadata.decodeSimpleAuthPayload;\n  },\n}));\nObject.defineProperty(exports, \"decodeAuthMetadata\", ({\n  enumerable: true,\n  get: function () {\n    return _AuthMetadata.decodeAuthMetadata;\n  },\n}));\n\nvar _RSocketClient = _interopRequireDefault(__webpack_require__(/*! ./RSocketClient */ \"./node_modules/rsocket-core/build/RSocketClient.js\"));\n\nvar _RSocketServer = _interopRequireDefault(__webpack_require__(/*! ./RSocketServer */ \"./node_modules/rsocket-core/build/RSocketServer.js\"));\n\nvar _RSocketResumableTransport = _interopRequireDefault(\n  __webpack_require__(/*! ./RSocketResumableTransport */ \"./node_modules/rsocket-core/build/RSocketResumableTransport.js\")\n);\n\nvar _WellKnownMimeType = _interopRequireWildcard(\n  __webpack_require__(/*! ./WellKnownMimeType */ \"./node_modules/rsocket-core/build/WellKnownMimeType.js\")\n);\n\nvar _WellKnownAuthType = _interopRequireWildcard(\n  __webpack_require__(/*! ./WellKnownAuthType */ \"./node_modules/rsocket-core/build/WellKnownAuthType.js\")\n);\n\nvar _RSocketFrame = __webpack_require__(/*! ./RSocketFrame */ \"./node_modules/rsocket-core/build/RSocketFrame.js\");\n\nvar _RSocketBinaryFraming = __webpack_require__(/*! ./RSocketBinaryFraming */ \"./node_modules/rsocket-core/build/RSocketBinaryFraming.js\");\n\nvar _RSocketBufferUtils = __webpack_require__(/*! ./RSocketBufferUtils */ \"./node_modules/rsocket-core/build/RSocketBufferUtils.js\");\n\nvar _RSocketEncoding = __webpack_require__(/*! ./RSocketEncoding */ \"./node_modules/rsocket-core/build/RSocketEncoding.js\");\n\nvar _RSocketSerialization = __webpack_require__(/*! ./RSocketSerialization */ \"./node_modules/rsocket-core/build/RSocketSerialization.js\");\n\nvar _RSocketLease = __webpack_require__(/*! ./RSocketLease */ \"./node_modules/rsocket-core/build/RSocketLease.js\");\n\nvar _CompositeMetadata = __webpack_require__(/*! ./CompositeMetadata */ \"./node_modules/rsocket-core/build/CompositeMetadata.js\");\n\nvar _RoutingMetadata = __webpack_require__(/*! ./RoutingMetadata */ \"./node_modules/rsocket-core/build/RoutingMetadata.js\");\n\nvar _AuthMetadata = __webpack_require__(/*! ./AuthMetadata */ \"./node_modules/rsocket-core/build/AuthMetadata.js\");\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== 'function') return null;\n  var cache = new WeakMap();\n  _getRequireWildcardCache = function () {\n    return cache;\n  };\n  return cache;\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {\n    return {default: obj};\n  }\n  var cache = _getRequireWildcardCache();\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor =\n    Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor\n        ? Object.getOwnPropertyDescriptor(obj, key)\n        : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n\n//# sourceURL=webpack://rsocket-demo/./node_modules/rsocket-core/build/index.js?");

/***/ }),

/***/ "./node_modules/rsocket-flowable/build/Flowable.js":
/*!*********************************************************!*\
  !*** ./node_modules/rsocket-flowable/build/Flowable.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/** Copyright (c) Facebook, Inc. and its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n */\n\n\nObject.defineProperty(exports, \"__esModule\", ({value: true}));\nexports.default = void 0;\n\nvar _FlowableMapOperator = _interopRequireDefault(\n  __webpack_require__(/*! ./FlowableMapOperator */ \"./node_modules/rsocket-flowable/build/FlowableMapOperator.js\")\n);\nvar _FlowableTakeOperator = _interopRequireDefault(\n  __webpack_require__(/*! ./FlowableTakeOperator */ \"./node_modules/rsocket-flowable/build/FlowableTakeOperator.js\")\n);\n\nvar _invariant = _interopRequireDefault(__webpack_require__(/*! fbjs/lib/invariant */ \"./node_modules/fbjs/lib/invariant.js\"));\nvar _warning = _interopRequireDefault(__webpack_require__(/*! fbjs/lib/warning */ \"./node_modules/fbjs/lib/warning.js\"));\nvar _emptyFunction = _interopRequireDefault(__webpack_require__(/*! fbjs/lib/emptyFunction */ \"./node_modules/fbjs/lib/emptyFunction.js\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true,\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n * Implements the ReactiveStream `Publisher` interface with Rx-style operators.\n */\nclass Flowable {\n  static just(...values) {\n    return new Flowable((subscriber) => {\n      let cancelled = false;\n      let i = 0;\n      subscriber.onSubscribe({\n        cancel: () => {\n          cancelled = true;\n        },\n        request: (n) => {\n          while (!cancelled && n > 0 && i < values.length) {\n            subscriber.onNext(values[i++]);\n            n--;\n          }\n          if (!cancelled && i == values.length) {\n            subscriber.onComplete();\n          }\n        },\n      });\n    });\n  }\n\n  static error(error) {\n    return new Flowable((subscriber) => {\n      subscriber.onSubscribe({\n        cancel: () => {},\n        request: () => {\n          subscriber.onError(error);\n        },\n      });\n    });\n  }\n\n  static never() {\n    return new Flowable((subscriber) => {\n      subscriber.onSubscribe({\n        cancel: _emptyFunction.default,\n        request: _emptyFunction.default,\n      });\n    });\n  }\n\n  constructor(source, max = Number.MAX_SAFE_INTEGER) {\n    this._max = max;\n    this._source = source;\n  }\n\n  subscribe(subscriberOrCallback) {\n    let partialSubscriber;\n    if (typeof subscriberOrCallback === 'function') {\n      partialSubscriber = this._wrapCallback(subscriberOrCallback);\n    } else {\n      partialSubscriber = subscriberOrCallback;\n    }\n    const subscriber = new FlowableSubscriber(partialSubscriber, this._max);\n    this._source(subscriber);\n  }\n\n  lift(onSubscribeLift) {\n    return new Flowable((subscriber) =>\n      this._source(onSubscribeLift(subscriber))\n    );\n  }\n\n  map(fn) {\n    return this.lift(\n      (subscriber) => new _FlowableMapOperator.default(subscriber, fn)\n    );\n  }\n\n  take(toTake) {\n    return this.lift(\n      (subscriber) => new _FlowableTakeOperator.default(subscriber, toTake)\n    );\n  }\n\n  _wrapCallback(callback) {\n    const max = this._max;\n    return {\n      onNext: callback,\n      onSubscribe(subscription) {\n        subscription.request(max);\n      },\n    };\n  }\n}\n\n/**\n * @private\n */ exports.default = Flowable;\nclass FlowableSubscriber {\n  constructor(subscriber, max) {\n    _defineProperty(\n      this,\n      '_cancel',\n\n      () => {\n        if (!this._active) {\n          return;\n        }\n        this._active = false;\n        if (this._subscription) {\n          this._subscription.cancel();\n        }\n      }\n    );\n    _defineProperty(\n      this,\n      '_request',\n\n      (n) => {\n        (0, _invariant.default)(\n          Number.isInteger(n) && n >= 1 && n <= this._max,\n          'Flowable: Expected request value to be an integer with a ' +\n            'value greater than 0 and less than or equal to %s, got ' +\n            '`%s`.',\n          this._max,\n          n\n        );\n\n        if (!this._active) {\n          return;\n        }\n        if (n === this._max) {\n          this._pending = this._max;\n        } else {\n          this._pending += n;\n          if (this._pending >= this._max) {\n            this._pending = this._max;\n          }\n        }\n        if (this._subscription) {\n          this._subscription.request(n);\n        }\n      }\n    );\n    this._active = false;\n    this._max = max;\n    this._pending = 0;\n    this._started = false;\n    this._subscriber = subscriber || {};\n    this._subscription = null;\n  }\n  onComplete() {\n    if (!this._active) {\n      (0, _warning.default)(\n        false,\n        'Flowable: Invalid call to onComplete(): %s.',\n        this._started\n          ? 'onComplete/onError was already called'\n          : 'onSubscribe has not been called'\n      );\n      return;\n    }\n    this._active = false;\n    this._started = true;\n    try {\n      if (this._subscriber.onComplete) {\n        this._subscriber.onComplete();\n      }\n    } catch (error) {\n      if (this._subscriber.onError) {\n        this._subscriber.onError(error);\n      }\n    }\n  }\n  onError(error) {\n    if (this._started && !this._active) {\n      (0, _warning.default)(\n        false,\n        'Flowable: Invalid call to onError(): %s.',\n        this._active\n          ? 'onComplete/onError was already called'\n          : 'onSubscribe has not been called'\n      );\n      return;\n    }\n    this._active = false;\n    this._started = true;\n    this._subscriber.onError && this._subscriber.onError(error);\n  }\n  onNext(data) {\n    if (!this._active) {\n      (0, _warning.default)(\n        false,\n        'Flowable: Invalid call to onNext(): %s.',\n        this._active\n          ? 'onComplete/onError was already called'\n          : 'onSubscribe has not been called'\n      );\n      return;\n    }\n    if (this._pending === 0) {\n      (0, _warning.default)(\n        false,\n        'Flowable: Invalid call to onNext(), all request()ed values have been ' +\n          'published.'\n      );\n      return;\n    }\n    if (this._pending !== this._max) {\n      this._pending--;\n    }\n    try {\n      this._subscriber.onNext && this._subscriber.onNext(data);\n    } catch (error) {\n      if (this._subscription) {\n        this._subscription.cancel();\n      }\n      this.onError(error);\n    }\n  }\n  onSubscribe(subscription) {\n    if (this._started) {\n      (0, _warning.default)(\n        false,\n        'Flowable: Invalid call to onSubscribe(): already called.'\n      );\n      return;\n    }\n    this._active = true;\n    this._started = true;\n    this._subscription = subscription;\n    try {\n      this._subscriber.onSubscribe &&\n        this._subscriber.onSubscribe({\n          cancel: this._cancel,\n          request: this._request,\n        });\n    } catch (error) {\n      this.onError(error);\n    }\n  }\n}\n\n\n//# sourceURL=webpack://rsocket-demo/./node_modules/rsocket-flowable/build/Flowable.js?");

/***/ }),

/***/ "./node_modules/rsocket-flowable/build/FlowableMapOperator.js":
/*!********************************************************************!*\
  !*** ./node_modules/rsocket-flowable/build/FlowableMapOperator.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/** Copyright (c) Facebook, Inc. and its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n */\n\n\nObject.defineProperty(exports, \"__esModule\", ({value: true}));\nexports.default = void 0;\n\nvar _nullthrows = _interopRequireDefault(__webpack_require__(/*! fbjs/lib/nullthrows */ \"./node_modules/fbjs/lib/nullthrows.js\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n/**\n * An operator that acts like Array.map, applying a given function to\n * all values provided by its `Subscription` and passing the result to its\n * `Subscriber`.\n */\nclass FlowableMapOperator {\n  constructor(subscriber, fn) {\n    this._fn = fn;\n    this._subscriber = subscriber;\n    this._subscription = null;\n  }\n\n  onComplete() {\n    this._subscriber.onComplete();\n  }\n\n  onError(error) {\n    this._subscriber.onError(error);\n  }\n\n  onNext(t) {\n    try {\n      this._subscriber.onNext(this._fn(t));\n    } catch (e) {\n      (0, _nullthrows.default)(this._subscription).cancel();\n      this._subscriber.onError(e);\n    }\n  }\n\n  onSubscribe(subscription) {\n    this._subscription = subscription;\n    this._subscriber.onSubscribe(subscription);\n  }\n}\nexports.default = FlowableMapOperator;\n\n\n//# sourceURL=webpack://rsocket-demo/./node_modules/rsocket-flowable/build/FlowableMapOperator.js?");

/***/ }),

/***/ "./node_modules/rsocket-flowable/build/FlowableProcessor.js":
/*!******************************************************************!*\
  !*** ./node_modules/rsocket-flowable/build/FlowableProcessor.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({value: true}));\nexports.default = void 0;\nvar _warning = _interopRequireDefault(__webpack_require__(/*! fbjs/lib/warning */ \"./node_modules/fbjs/lib/warning.js\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nclass FlowableProcessor {\n  constructor(source, fn) {\n    this._source = source;\n    this._transformer = fn;\n    this._done = false;\n    this._mappers = []; //mappers for map function\n  }\n\n  onSubscribe(subscription) {\n    this._subscription = subscription;\n  }\n\n  onNext(t) {\n    if (!this._sink) {\n      (0, _warning.default)(\n        'Warning, premature onNext for processor, dropping value'\n      );\n      return;\n    }\n\n    let val = t;\n    if (this._transformer) {\n      val = this._transformer(t);\n    }\n    const finalVal = this._mappers.reduce(\n      (interimVal, mapper) => mapper(interimVal),\n      val\n    );\n\n    this._sink.onNext(finalVal);\n  }\n\n  onError(error) {\n    this._error = error;\n    if (!this._sink) {\n      (0, _warning.default)(\n        'Warning, premature onError for processor, marking complete/errored'\n      );\n    } else {\n      this._sink.onError(error);\n    }\n  }\n\n  onComplete() {\n    this._done = true;\n    if (!this._sink) {\n      (0, _warning.default)(\n        'Warning, premature onError for processor, marking complete'\n      );\n    } else {\n      this._sink.onComplete();\n    }\n  }\n\n  subscribe(subscriber) {\n    if (this._source.subscribe) {\n      this._source.subscribe(this);\n    }\n    this._sink = subscriber;\n    this._sink.onSubscribe(this);\n\n    if (this._error) {\n      this._sink.onError(this._error);\n    } else if (this._done) {\n      this._sink.onComplete();\n    }\n  }\n\n  map(fn) {\n    this._mappers.push(fn);\n    return this;\n  }\n\n  request(n) {\n    this._subscription && this._subscription.request(n);\n  }\n\n  cancel() {\n    this._subscription && this._subscription.cancel();\n  }\n}\nexports.default = FlowableProcessor;\n\n\n//# sourceURL=webpack://rsocket-demo/./node_modules/rsocket-flowable/build/FlowableProcessor.js?");

/***/ }),

/***/ "./node_modules/rsocket-flowable/build/FlowableTakeOperator.js":
/*!*********************************************************************!*\
  !*** ./node_modules/rsocket-flowable/build/FlowableTakeOperator.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/** Copyright (c) Facebook, Inc. and its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n */\n\n\nObject.defineProperty(exports, \"__esModule\", ({value: true}));\nexports.default = void 0;\n\nvar _nullthrows = _interopRequireDefault(__webpack_require__(/*! fbjs/lib/nullthrows */ \"./node_modules/fbjs/lib/nullthrows.js\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n/**\n * An operator that requests a fixed number of values from its source\n * `Subscription` and forwards them to its `Subscriber`, cancelling the\n * subscription when the requested number of items has been reached.\n */\nclass FlowableTakeOperator {\n  constructor(subscriber, toTake) {\n    this._subscriber = subscriber;\n    this._subscription = null;\n    this._toTake = toTake;\n  }\n\n  onComplete() {\n    this._subscriber.onComplete();\n  }\n\n  onError(error) {\n    this._subscriber.onError(error);\n  }\n\n  onNext(t) {\n    try {\n      this._subscriber.onNext(t);\n      if (--this._toTake === 0) {\n        this._cancelAndComplete();\n      }\n    } catch (e) {\n      (0, _nullthrows.default)(this._subscription).cancel();\n      this._subscriber.onError(e);\n    }\n  }\n\n  onSubscribe(subscription) {\n    this._subscription = subscription;\n    this._subscriber.onSubscribe(subscription);\n    if (this._toTake <= 0) {\n      this._cancelAndComplete();\n    }\n  }\n\n  _cancelAndComplete() {\n    (0, _nullthrows.default)(this._subscription).cancel();\n    this._subscriber.onComplete();\n  }\n}\nexports.default = FlowableTakeOperator;\n\n\n//# sourceURL=webpack://rsocket-demo/./node_modules/rsocket-flowable/build/FlowableTakeOperator.js?");

/***/ }),

/***/ "./node_modules/rsocket-flowable/build/FlowableTimer.js":
/*!**************************************************************!*\
  !*** ./node_modules/rsocket-flowable/build/FlowableTimer.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/** Copyright (c) Facebook, Inc. and its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n */\n\n\nObject.defineProperty(exports, \"__esModule\", ({value: true}));\nexports.every = every;\n\nvar _Flowable = _interopRequireDefault(__webpack_require__(/*! ./Flowable */ \"./node_modules/rsocket-flowable/build/Flowable.js\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n/**\n * Returns a Publisher that provides the current time (Date.now()) every `ms`\n * milliseconds.\n *\n * The timer is established on the first call to `request`: on each\n * interval a value is published if there are outstanding requests,\n * otherwise nothing occurs for that interval. This approach ensures\n * that the interval between `onNext` calls is as regular as possible\n * and means that overlapping `request` calls (ie calling again before\n * the previous values have been vended) behaves consistently.\n */\nfunction every(ms) {\n  return new _Flowable.default((subscriber) => {\n    let intervalId = null;\n    let pending = 0;\n    subscriber.onSubscribe({\n      cancel: () => {\n        if (intervalId != null) {\n          clearInterval(intervalId);\n          intervalId = null;\n        }\n      },\n      request: (n) => {\n        if (n < Number.MAX_SAFE_INTEGER) {\n          pending += n;\n        } else {\n          pending = Number.MAX_SAFE_INTEGER;\n        }\n        if (intervalId != null) {\n          return;\n        }\n        intervalId = setInterval(() => {\n          if (pending > 0) {\n            if (pending !== Number.MAX_SAFE_INTEGER) {\n              pending--;\n            }\n            subscriber.onNext(Date.now());\n          }\n        }, ms);\n      },\n    });\n  });\n}\n\n\n//# sourceURL=webpack://rsocket-demo/./node_modules/rsocket-flowable/build/FlowableTimer.js?");

/***/ }),

/***/ "./node_modules/rsocket-flowable/build/Single.js":
/*!*******************************************************!*\
  !*** ./node_modules/rsocket-flowable/build/Single.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/** Copyright (c) Facebook, Inc. and its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n */\n\n\nObject.defineProperty(exports, \"__esModule\", ({value: true}));\nexports.default = void 0;\n\nvar _warning = _interopRequireDefault(__webpack_require__(/*! fbjs/lib/warning */ \"./node_modules/fbjs/lib/warning.js\"));\nvar _emptyFunction = _interopRequireDefault(__webpack_require__(/*! fbjs/lib/emptyFunction */ \"./node_modules/fbjs/lib/emptyFunction.js\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n/**\n * Represents a lazy computation that will either produce a value of type T\n * or fail with an error. Calling `subscribe()` starts the\n * computation and returns a subscription object, which has an `unsubscribe()`\n * method that can be called to prevent completion/error callbacks from being\n * invoked and, where supported, to also cancel the computation.\n * Implementations may optionally implement cancellation; if they do not\n * `cancel()` is a no-op.\n *\n * Note: Unlike Promise, callbacks (onComplete/onError) may be invoked\n * synchronously.\n *\n * Example:\n *\n * ```\n * const value = new Single(subscriber => {\n *   const id = setTimeout(\n *     () => subscriber.onComplete('Hello!'),\n *     250\n *   );\n *   // Optional: Call `onSubscribe` with a cancellation callback\n *   subscriber.onSubscribe(() => clearTimeout(id));\n * });\n *\n * // Start the computation. onComplete will be called after the timeout\n * // with 'hello'  unless `cancel()` is called first.\n * value.subscribe({\n *   onComplete: value => console.log(value),\n *   onError: error => console.error(error),\n *   onSubscribe: cancel => ...\n * });\n * ```\n */\nclass Single {\n  static of(value) {\n    return new Single((subscriber) => {\n      subscriber.onSubscribe();\n      subscriber.onComplete(value);\n    });\n  }\n\n  static error(error) {\n    return new Single((subscriber) => {\n      subscriber.onSubscribe();\n      subscriber.onError(error);\n    });\n  }\n\n  static never() {\n    return new Single((subscriber) => {\n      subscriber.onSubscribe();\n    });\n  }\n\n  constructor(source) {\n    this._source = source;\n  }\n\n  subscribe(partialSubscriber) {\n    const subscriber = new FutureSubscriber(partialSubscriber);\n    try {\n      this._source(subscriber);\n    } catch (error) {\n      subscriber.onError(error);\n    }\n  }\n\n  flatMap(fn) {\n    return new Single((subscriber) => {\n      let currentCancel;\n      const cancel = () => {\n        currentCancel && currentCancel();\n        currentCancel = null;\n      };\n      this._source({\n        onComplete: (value) => {\n          fn(value).subscribe({\n            onComplete: (mapValue) => {\n              subscriber.onComplete(mapValue);\n            },\n            onError: (error) => subscriber.onError(error),\n            onSubscribe: (_cancel) => {\n              currentCancel = _cancel;\n            },\n          });\n        },\n        onError: (error) => subscriber.onError(error),\n        onSubscribe: (_cancel) => {\n          currentCancel = _cancel;\n          subscriber.onSubscribe(cancel);\n        },\n      });\n    });\n  }\n\n  /**\n   * Return a new Single that resolves to the value of this Single applied to\n   * the given mapping function.\n   */\n  map(fn) {\n    return new Single((subscriber) => {\n      return this._source({\n        onComplete: (value) => subscriber.onComplete(fn(value)),\n        onError: (error) => subscriber.onError(error),\n        onSubscribe: (cancel) => subscriber.onSubscribe(cancel),\n      });\n    });\n  }\n\n  then(successFn, errorFn) {\n    this.subscribe({\n      onComplete: successFn || _emptyFunction.default,\n      onError: errorFn || _emptyFunction.default,\n    });\n  }\n}\n\n/**\n * @private\n */ exports.default = Single;\nclass FutureSubscriber {\n  constructor(subscriber) {\n    this._active = false;\n    this._started = false;\n    this._subscriber = subscriber || {};\n  }\n\n  onComplete(value) {\n    if (!this._active) {\n      (0, _warning.default)(\n        false,\n        'Single: Invalid call to onComplete(): %s.',\n        this._started\n          ? 'onComplete/onError was already called'\n          : 'onSubscribe has not been called'\n      );\n\n      return;\n    }\n    this._active = false;\n    this._started = true;\n    try {\n      if (this._subscriber.onComplete) {\n        this._subscriber.onComplete(value);\n      }\n    } catch (error) {\n      if (this._subscriber.onError) {\n        this._subscriber.onError(error);\n      }\n    }\n  }\n\n  onError(error) {\n    if (this._started && !this._active) {\n      (0, _warning.default)(\n        false,\n        'Single: Invalid call to onError(): %s.',\n        this._active\n          ? 'onComplete/onError was already called'\n          : 'onSubscribe has not been called'\n      );\n\n      return;\n    }\n    this._active = false;\n    this._started = true;\n    this._subscriber.onError && this._subscriber.onError(error);\n  }\n\n  onSubscribe(cancel) {\n    if (this._started) {\n      (0, _warning.default)(\n        false,\n        'Single: Invalid call to onSubscribe(): already called.'\n      );\n      return;\n    }\n    this._active = true;\n    this._started = true;\n    try {\n      this._subscriber.onSubscribe &&\n        this._subscriber.onSubscribe(() => {\n          if (!this._active) {\n            return;\n          }\n          this._active = false;\n          cancel && cancel();\n        });\n    } catch (error) {\n      this.onError(error);\n    }\n  }\n}\n\n\n//# sourceURL=webpack://rsocket-demo/./node_modules/rsocket-flowable/build/Single.js?");

/***/ }),

/***/ "./node_modules/rsocket-flowable/build/index.js":
/*!******************************************************!*\
  !*** ./node_modules/rsocket-flowable/build/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/** Copyright (c) Facebook, Inc. and its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n */\n\n\nObject.defineProperty(exports, \"__esModule\", ({value: true}));\nObject.defineProperty(exports, \"Flowable\", ({\n  enumerable: true,\n  get: function () {\n    return _Flowable.default;\n  },\n}));\nObject.defineProperty(exports, \"Single\", ({\n  enumerable: true,\n  get: function () {\n    return _Single.default;\n  },\n}));\nObject.defineProperty(exports, \"FlowableProcessor\", ({\n  enumerable: true,\n  get: function () {\n    return _FlowableProcessor.default;\n  },\n}));\nObject.defineProperty(exports, \"every\", ({\n  enumerable: true,\n  get: function () {\n    return _FlowableTimer.every;\n  },\n}));\n\nvar _Flowable = _interopRequireDefault(__webpack_require__(/*! ./Flowable */ \"./node_modules/rsocket-flowable/build/Flowable.js\"));\nvar _Single = _interopRequireDefault(__webpack_require__(/*! ./Single */ \"./node_modules/rsocket-flowable/build/Single.js\"));\nvar _FlowableProcessor = _interopRequireDefault(__webpack_require__(/*! ./FlowableProcessor */ \"./node_modules/rsocket-flowable/build/FlowableProcessor.js\"));\nvar _FlowableTimer = __webpack_require__(/*! ./FlowableTimer */ \"./node_modules/rsocket-flowable/build/FlowableTimer.js\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n\n//# sourceURL=webpack://rsocket-demo/./node_modules/rsocket-flowable/build/index.js?");

/***/ }),

/***/ "./node_modules/rsocket-types/build/ReactiveSocketTypes.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rsocket-types/build/ReactiveSocketTypes.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({value: true}));\nexports.CONNECTION_STATUS = void 0;\n/** Copyright (c) Facebook, Inc. and its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n */\n\n/**\n * A contract providing different interaction models per the [ReactiveSocket protocol]\n (https://github.com/ReactiveSocket/reactivesocket/blob/master/Protocol.md).\n */\n\n/**\n * Represents a network connection with input/output used by a ReactiveSocket to\n * send/receive data.\n */\n\n/**\n * Describes the connection status of a ReactiveSocket/DuplexConnection.\n * - NOT_CONNECTED: no connection established or pending.\n * - CONNECTING: when `connect()` has been called but a connection is not yet\n *   established.\n * - CONNECTED: when a connection is established.\n * - CLOSED: when the connection has been explicitly closed via `close()`.\n * - ERROR: when the connection has been closed for any other reason.\n */\n\nconst CONNECTION_STATUS = {\n  CLOSED: Object.freeze({kind: 'CLOSED'}),\n  CONNECTED: Object.freeze({kind: 'CONNECTED'}),\n  CONNECTING: Object.freeze({kind: 'CONNECTING'}),\n  NOT_CONNECTED: Object.freeze({kind: 'NOT_CONNECTED'}),\n};\n\n/**\n * A type that can be written to a buffer.\n */ exports.CONNECTION_STATUS = CONNECTION_STATUS;\n\n\n//# sourceURL=webpack://rsocket-demo/./node_modules/rsocket-types/build/ReactiveSocketTypes.js?");

/***/ }),

/***/ "./node_modules/rsocket-types/build/ReactiveStreamTypes.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rsocket-types/build/ReactiveStreamTypes.js ***!
  \*****************************************************************/
/***/ (() => {

"use strict";
eval("\n\n\n//# sourceURL=webpack://rsocket-demo/./node_modules/rsocket-types/build/ReactiveStreamTypes.js?");

/***/ }),

/***/ "./node_modules/rsocket-types/build/index.js":
/*!***************************************************!*\
  !*** ./node_modules/rsocket-types/build/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/** Copyright (c) Facebook, Inc. and its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n */\n\n\nObject.defineProperty(exports, \"__esModule\", ({value: true}));\n\nvar _ReactiveSocketTypes = __webpack_require__(/*! ./ReactiveSocketTypes */ \"./node_modules/rsocket-types/build/ReactiveSocketTypes.js\");\nObject.keys(_ReactiveSocketTypes).forEach(function (key) {\n  if (key === 'default' || key === '__esModule') return;\n  if (key in exports && exports[key] === _ReactiveSocketTypes[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function () {\n      return _ReactiveSocketTypes[key];\n    },\n  });\n});\n\nvar _ReactiveStreamTypes = __webpack_require__(/*! ./ReactiveStreamTypes */ \"./node_modules/rsocket-types/build/ReactiveStreamTypes.js\");\nObject.keys(_ReactiveStreamTypes).forEach(function (key) {\n  if (key === 'default' || key === '__esModule') return;\n  if (key in exports && exports[key] === _ReactiveStreamTypes[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function () {\n      return _ReactiveStreamTypes[key];\n    },\n  });\n});\n\n\n//# sourceURL=webpack://rsocket-demo/./node_modules/rsocket-types/build/index.js?");

/***/ }),

/***/ "./node_modules/rsocket-websocket-client/build/RSocketWebSocketClient.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/rsocket-websocket-client/build/RSocketWebSocketClient.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/** Copyright (c) Facebook, Inc. and its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n */\n\n\nObject.defineProperty(exports, \"__esModule\", ({value: true}));\nexports.default = void 0;\n\nvar _invariant = _interopRequireDefault(__webpack_require__(/*! fbjs/lib/invariant */ \"./node_modules/fbjs/lib/invariant.js\"));\nvar _rsocketFlowable = __webpack_require__(/*! rsocket-flowable */ \"./node_modules/rsocket-flowable/build/index.js\");\nvar _rsocketCore = __webpack_require__(/*! rsocket-core */ \"./node_modules/rsocket-core/build/index.js\");\n\nvar _rsocketTypes = __webpack_require__(/*! rsocket-types */ \"./node_modules/rsocket-types/build/index.js\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true,\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n * A WebSocket transport client for use in browser environments.\n */\nclass RSocketWebSocketClient {\n  constructor(options, encoders) {\n    _defineProperty(\n      this,\n      '_handleClosed',\n\n      (e) => {\n        this._close(\n          new Error(\n            e.reason || 'RSocketWebSocketClient: Socket closed unexpectedly.'\n          )\n        );\n      }\n    );\n    _defineProperty(\n      this,\n      '_handleError',\n\n      (e) => {\n        this._close(e.error);\n      }\n    );\n    _defineProperty(\n      this,\n      '_handleOpened',\n\n      () => {\n        this._setConnectionStatus(_rsocketTypes.CONNECTION_STATUS.CONNECTED);\n      }\n    );\n    _defineProperty(\n      this,\n      '_handleMessage',\n\n      (message) => {\n        try {\n          const frame = this._readFrame(message);\n          this._receivers.forEach((subscriber) => subscriber.onNext(frame));\n        } catch (error) {\n          this._close(error);\n        }\n      }\n    );\n    this._encoders = encoders;\n    this._options = options;\n    this._receivers = new Set();\n    this._senders = new Set();\n    this._socket = null;\n    this._status = _rsocketTypes.CONNECTION_STATUS.NOT_CONNECTED;\n    this._statusSubscribers = new Set();\n  }\n  close() {\n    this._close();\n  }\n  connect() {\n    (0, _invariant.default)(\n      this._status.kind === 'NOT_CONNECTED',\n      'RSocketWebSocketClient: Cannot connect(), a connection is already ' +\n        'established.'\n    );\n    this._setConnectionStatus(_rsocketTypes.CONNECTION_STATUS.CONNECTING);\n    const wsCreator = this._options.wsCreator;\n    const url = this._options.url;\n    this._socket = wsCreator ? wsCreator(url) : new WebSocket(url);\n    const socket = this._socket;\n    socket.binaryType = 'arraybuffer';\n    socket.addEventListener('close', this._handleClosed);\n    socket.addEventListener('error', this._handleError);\n    socket.addEventListener('open', this._handleOpened);\n    socket.addEventListener('message', this._handleMessage);\n  }\n  connectionStatus() {\n    return new _rsocketFlowable.Flowable((subscriber) => {\n      subscriber.onSubscribe({\n        cancel: () => {\n          this._statusSubscribers.delete(subscriber);\n        },\n        request: () => {\n          this._statusSubscribers.add(subscriber);\n          subscriber.onNext(this._status);\n        },\n      });\n    });\n  }\n  receive() {\n    return new _rsocketFlowable.Flowable((subject) => {\n      subject.onSubscribe({\n        cancel: () => {\n          this._receivers.delete(subject);\n        },\n        request: () => {\n          this._receivers.add(subject);\n        },\n      });\n    });\n  }\n  sendOne(frame) {\n    this._writeFrame(frame);\n  }\n  send(frames) {\n    let subscription;\n    frames.subscribe({\n      onComplete: () => {\n        subscription && this._senders.delete(subscription);\n      },\n      onError: (error) => {\n        subscription && this._senders.delete(subscription);\n        this._close(error);\n      },\n      onNext: (frame) => this._writeFrame(frame),\n      onSubscribe: (_subscription) => {\n        subscription = _subscription;\n        this._senders.add(subscription);\n        subscription.request(Number.MAX_SAFE_INTEGER);\n      },\n    });\n  }\n  _close(error) {\n    if (this._status.kind === 'CLOSED' || this._status.kind === 'ERROR') {\n      // already closed\n      return;\n    }\n    const status = error\n      ? {error, kind: 'ERROR'}\n      : _rsocketTypes.CONNECTION_STATUS.CLOSED;\n    this._setConnectionStatus(status);\n    this._receivers.forEach((subscriber) => {\n      if (error) {\n        subscriber.onError(error);\n      } else {\n        subscriber.onComplete();\n      }\n    });\n    this._receivers.clear();\n    this._senders.forEach((subscription) => subscription.cancel());\n    this._senders.clear();\n    const socket = this._socket;\n    if (socket) {\n      socket.removeEventListener('close', this._handleClosed);\n      socket.removeEventListener('error', this._handleError);\n      socket.removeEventListener('open', this._handleOpened);\n      socket.removeEventListener('message', this._handleMessage);\n      socket.close();\n      this._socket = null;\n    }\n  }\n  _setConnectionStatus(status) {\n    this._status = status;\n    this._statusSubscribers.forEach((subscriber) => subscriber.onNext(status));\n  }\n  _readFrame(message) {\n    const buffer = (0, _rsocketCore.toBuffer)(message.data);\n    const frame = this._options.lengthPrefixedFrames\n      ? (0, _rsocketCore.deserializeFrameWithLength)(buffer, this._encoders)\n      : (0, _rsocketCore.deserializeFrame)(buffer, this._encoders);\n    if (false) {}\n    return frame;\n  }\n\n  _writeFrame(frame) {\n    try {\n      if (false) {}\n      const buffer = this._options.lengthPrefixedFrames\n        ? (0, _rsocketCore.serializeFrameWithLength)(frame, this._encoders)\n        : (0, _rsocketCore.serializeFrame)(frame, this._encoders);\n      (0, _invariant.default)(\n        this._socket,\n        'RSocketWebSocketClient: Cannot send frame, not connected.'\n      );\n\n      this._socket.send(buffer);\n    } catch (error) {\n      this._close(error);\n    }\n  }\n}\nexports.default = RSocketWebSocketClient;\n\n\n//# sourceURL=webpack://rsocket-demo/./node_modules/rsocket-websocket-client/build/RSocketWebSocketClient.js?");

/***/ }),

/***/ "./node_modules/rsocket-websocket-client/build/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/rsocket-websocket-client/build/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/** Copyright (c) Facebook, Inc. and its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n */\n\n\nObject.defineProperty(exports, \"__esModule\", ({value: true}));\nexports.default = void 0;\n\nvar _RSocketWebSocketClient = _interopRequireDefault(\n  __webpack_require__(/*! ./RSocketWebSocketClient */ \"./node_modules/rsocket-websocket-client/build/RSocketWebSocketClient.js\")\n);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\nvar _default = _RSocketWebSocketClient.default;\nexports.default = _default;\n\n\n//# sourceURL=webpack://rsocket-demo/./node_modules/rsocket-websocket-client/build/index.js?");

/***/ }),

/***/ "./src/main/js/app.js":
/*!****************************!*\
  !*** ./src/main/js/app.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var rsocket_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rsocket-core */ \"./node_modules/rsocket-core/build/index.js\");\n/* harmony import */ var rsocket_websocket_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rsocket-websocket-client */ \"./node_modules/rsocket-websocket-client/build/index.js\");\n\n\n\nfunction addMessage(message) {\n  var ul = document.getElementById(\"messages\");\n  var li = document.createElement(\"li\");\n  li.appendChild(document.createTextNode(message));\n  if (ul.childNodes.length == 0) {\n    ul.appendChild(li);\n  } else {\n    if (ul.childNodes.length > 19) {\n      ul.removeChild(ul.lastChild);\n    }\n    ul.insertBefore(li, ul.firstChild);\n  }\n}\n\nfunction main() {\n  const url = \"ws://localhost:8080/rsocket\";\n\n  // Create an instance of a client\n  const client = new rsocket_core__WEBPACK_IMPORTED_MODULE_0__.RSocketClient({\n    setup: {\n      keepAlive: 60000,\n      lifetime: 180000,\n      dataMimeType: 'application/json',\n      metadataMimeType: 'application/json',\n    },\n    transport: new rsocket_websocket_client__WEBPACK_IMPORTED_MODULE_1__.default({url: url}),\n  });\n\n  // Open the connection\n  client.connect().subscribe({\n    onComplete: socket => {\n      socket.requestStream({\n        data: null,\n        metadata: null,\n      }).subscribe({\n        onComplete: () => console.log('complete'),\n        onError: error => console.error(error),\n        onNext: payload => {\n          addMessage(payload.data);\n        },\n        onSubscribe: subscription => {\n          subscription.request(10000000);\n        },\n      });\n    },\n    onError: error => console.error(error),\n    onSubscribe: cancel => {/* call cancel() to abort */}\n  });\n}\n\ndocument.addEventListener('DOMContentLoaded', main);\n\n//# sourceURL=webpack://rsocket-demo/./src/main/js/app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/main/js/app.js");
/******/ 	
/******/ })()
;